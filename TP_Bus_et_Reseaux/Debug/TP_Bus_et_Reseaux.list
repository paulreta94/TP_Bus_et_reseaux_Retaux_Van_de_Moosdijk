
TP_Bus_et_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  0800411c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800411c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000daff  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bd  00000000  00000000  0002dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000957  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e4d  00000000  00000000  000311ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100e0  00000000  00000000  0003403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf30c  00000000  00000000  0004411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003850  00000000  00000000  00113428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00116c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004050 	.word	0x08004050

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004050 	.word	0x08004050

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_UART_RxCpltCallback>:
CAN_TxHeaderTypeDef reset = { .StdId = 0x62, .ExtId = 0x0, .IDE = CAN_ID_STD,
		.RTR = CAN_RTR_DATA, .DLC = 0x0, .TransmitGlobalTime = DISABLE };
uint8_t *reset_frame = NULL;
uint32_t test_mail_box;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

			HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000508:	2201      	movs	r2, #1
 800050a:	4905      	ldr	r1, [pc, #20]	; (8000520 <HAL_UART_RxCpltCallback+0x20>)
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <HAL_UART_RxCpltCallback+0x24>)
 800050e:	f002 f95a 	bl	80027c6 <HAL_UART_Receive_IT>
		printf("Com OK\r\n");
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_UART_RxCpltCallback+0x28>)
 8000514:	f003 fab2 	bl	8003a7c <puts>
	}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000188 	.word	0x20000188
 8000524:	20000100 	.word	0x20000100
 8000528:	08004068 	.word	0x08004068

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	test_frame_forward[0] = 0x54;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x5c>)
 8000532:	2254      	movs	r2, #84	; 0x54
 8000534:	701a      	strb	r2, [r3, #0]
	test_frame_forward[1] = 0x00;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x5c>)
 8000538:	2200      	movs	r2, #0
 800053a:	705a      	strb	r2, [r3, #1]
	test_frame_reverse[0] = 0x54;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0x60>)
 800053e:	2254      	movs	r2, #84	; 0x54
 8000540:	701a      	strb	r2, [r3, #0]
	test_frame_reverse[1] = 0x01;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <main+0x60>)
 8000544:	2201      	movs	r2, #1
 8000546:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fc2e 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f828 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f94a 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f91e 	bl	8000794 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000558:	f000 f8c4 	bl	80006e4 <MX_I2C1_Init>
  MX_CAN1_Init();
 800055c:	f000 f88c 	bl	8000678 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000560:	f000 f8ee 	bl	8000740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//Shell_Init();
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x64>)
 8000566:	f000 fd8c 	bl	8001082 <HAL_CAN_Start>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <main+0x48>
	Error_Handler();
 8000570:	f000 f9a8 	bl	80008c4 <Error_Handler>
  HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000574:	2201      	movs	r2, #1
 8000576:	4907      	ldr	r1, [pc, #28]	; (8000594 <main+0x68>)
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <main+0x6c>)
 800057a:	f002 f924 	bl	80027c6 <HAL_UART_Receive_IT>
  //if (HAL_UART_Receive_IT(&huart1, uint8_t *pData, uint16_t Size))
  printf("Initialisation terminée\r\n");
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <main+0x70>)
 8000580:	f003 fa7c 	bl	8003a7c <puts>
  //BMP280_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000584:	e7fe      	b.n	8000584 <main+0x58>
 8000586:	bf00      	nop
 8000588:	2000018c 	.word	0x2000018c
 800058c:	20000190 	.word	0x20000190
 8000590:	20000084 	.word	0x20000084
 8000594:	20000188 	.word	0x20000188
 8000598:	20000100 	.word	0x20000100
 800059c:	08004070 	.word	0x08004070

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb44 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000618:	2350      	movs	r3, #80	; 0x50
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fd4d 	bl	80020cc <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 f944 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f9ed 	bl	8001a38 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000664:	f000 f92e 	bl	80008c4 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_CAN1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_CAN1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_CAN1_Init+0x64>)
 8000684:	2210      	movs	r2, #16
 8000686:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_CAN1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_CAN1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_CAN1_Init+0x64>)
 8000696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_CAN1_Init+0x64>)
 800069e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_CAN1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_CAN1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_CAN1_Init+0x64>)
 80006ca:	f000 fbdf 	bl	8000e8c <HAL_CAN_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f8f6 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40006400 	.word	0x40006400

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f001 f845 	bl	80017b0 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f8ca 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000ac 	.word	0x200000ac
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f001 ff46 	bl	8002608 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f89f 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000100 	.word	0x20000100
 8000790:	40011000 	.word	0x40011000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 ff1c 	bl	8002608 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f875 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	f000 ff82 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000890:	f000 fde0 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000894:	2320      	movs	r3, #32
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xd4>)
 80008ac:	f000 fdd2 	bl	8001454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090e:	2007      	movs	r0, #7
 8000910:	f000 fccc 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_CAN_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12c      	bne.n	800099c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 800094c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_CAN_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800098c:	2309      	movs	r3, #9
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_CAN_MspInit+0x8c>)
 8000998:	f000 fd5c 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40006400 	.word	0x40006400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_I2C_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23c0      	movs	r3, #192	; 0xc0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fe:	2304      	movs	r3, #4
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <HAL_I2C_MspInit+0x8c>)
 8000a0a:	f000 fd23 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <HAL_UART_MspInit+0xf8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d135      	bne.n	8000ace <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a34      	ldr	r2, [pc, #208]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aac:	2307      	movs	r3, #7
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4822      	ldr	r0, [pc, #136]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000ab8:	f000 fccc 	bl	8001454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2025      	movs	r0, #37	; 0x25
 8000ac2:	f000 fbfe 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ac6:	2025      	movs	r0, #37	; 0x25
 8000ac8:	f000 fc17 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000acc:	e030      	b.n	8000b30 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_UART_MspInit+0x104>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d12b      	bne.n	8000b30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000b2c:	f000 fc92 	bl	8001454 <HAL_GPIO_Init>
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400

08000b48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b56:	2201      	movs	r2, #1
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <__io_putchar+0x30>)
 8000b5a:	f001 fda2 	bl	80026a2 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b5e:	1d39      	adds	r1, r7, #4
 8000b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b64:	2201      	movs	r2, #1
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <__io_putchar+0x34>)
 8000b68:	f001 fd9b 	bl	80026a2 <HAL_UART_Transmit>
  return ch;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000144 	.word	0x20000144
 8000b7c:	20000100 	.word	0x20000100

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f93e 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART1_IRQHandler+0x10>)
 8000bda:	f001 fe25 	bl	8002828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//  uartRxReceived = 1;
//  printf("Flag changed\r\n");
  /* USER CODE END USART1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000100 	.word	0x20000100

08000be8 <_read>:
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
 8000bfa:	f3af 8000 	nop.w
 8000bfe:	4601      	mov	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_write>:
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e009      	b.n	8000c48 <_write+0x26>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff83 	bl	8000b48 <__io_putchar>
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf1      	blt.n	8000c34 <_write+0x12>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	2300      	movs	r3, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
 8000cf4:	f003 f800 	bl	8003cf8 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000194 	.word	0x20000194
 8000d2c:	200002e8 	.word	0x200002e8

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:
 8000d62:	58d4      	ldr	r4, [r2, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:
 8000d68:	18c4      	adds	r4, r0, r3
 8000d6a:	428c      	cmp	r4, r1
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
 8000d72:	2300      	movs	r3, #0
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:
 8000d7a:	42a2      	cmp	r2, r4
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
 8000d82:	f002 ffbf 	bl	8003d04 <__libc_init_array>
 8000d86:	f7ff fbd1 	bl	800052c <main>
 8000d8a:	4770      	bx	lr
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000068 	.word	0x20000068
 8000d98:	080040b4 	.word	0x080040b4
 8000d9c:	20000068 	.word	0x20000068
 8000da0:	200002e8 	.word	0x200002e8

08000da4 <ADC_IRQHandler>:
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 fa6b 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fd78 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fa83 	bl	8001316 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 fa4b 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000198 	.word	0x20000198

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000198 	.word	0x20000198

08000e8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0ed      	b.n	800107a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fd38 	bl	8000920 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec0:	f7ff ffd8 	bl	8000e74 <HAL_GetTick>
 8000ec4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ec6:	e012      	b.n	8000eee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec8:	f7ff ffd4 	bl	8000e74 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b0a      	cmp	r3, #10
 8000ed4:	d90b      	bls.n	8000eee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0c5      	b.n	800107a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0e5      	beq.n	8000ec8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0202 	bic.w	r2, r2, #2
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f0c:	f7ff ffb2 	bl	8000e74 <HAL_GetTick>
 8000f10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f12:	e012      	b.n	8000f3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f14:	f7ff ffae 	bl	8000e74 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b0a      	cmp	r3, #10
 8000f20:	d90b      	bls.n	8000f3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2205      	movs	r2, #5
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e09f      	b.n	800107a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e5      	bne.n	8000f14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e007      	b.n	8000f72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7e5b      	ldrb	r3, [r3, #25]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d108      	bne.n	8000f8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e9b      	ldrb	r3, [r3, #26]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d108      	bne.n	8000fb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0220 	orr.w	r2, r2, #32
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e007      	b.n	8000fc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0220 	bic.w	r2, r2, #32
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7edb      	ldrb	r3, [r3, #27]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0210 	bic.w	r2, r2, #16
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e007      	b.n	8000ff0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0210 	orr.w	r2, r2, #16
 8000fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7f1b      	ldrb	r3, [r3, #28]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d108      	bne.n	800100a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0208 	orr.w	r2, r2, #8
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e007      	b.n	800101a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0208 	bic.w	r2, r2, #8
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7f5b      	ldrb	r3, [r3, #29]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0204 	orr.w	r2, r2, #4
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e007      	b.n	8001044 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0204 	bic.w	r2, r2, #4
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	ea42 0103 	orr.w	r1, r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d12e      	bne.n	80010f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010ae:	f7ff fee1 	bl	8000e74 <HAL_GetTick>
 80010b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b4:	e012      	b.n	80010dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b6:	f7ff fedd 	bl	8000e74 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d90b      	bls.n	80010dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2205      	movs	r2, #5
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e012      	b.n	8001102 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e5      	bne.n	80010b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e006      	b.n	8001102 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
  }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fd9a 	bl	8000e74 <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d008      	beq.n	8001360 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e052      	b.n	8001406 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0216 	bic.w	r2, r2, #22
 800136e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800137e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <HAL_DMA_Abort+0x62>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b0:	e013      	b.n	80013da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b2:	f7ff fd5f 	bl	8000e74 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d90c      	bls.n	80013da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e015      	b.n	8001406 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e4      	bne.n	80013b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	223f      	movs	r2, #63	; 0x3f
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d004      	beq.n	800142c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e00c      	b.n	8001446 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2205      	movs	r2, #5
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e165      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8154 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ae 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_GPIO_Init+0x304>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x308>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x30c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x310>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x314>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <HAL_GPIO_Init+0x318>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x20a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x31c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x206>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_GPIO_Init+0x320>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x202>
 8001652:	2306      	movs	r3, #6
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001656:	2307      	movs	r3, #7
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x21c>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_GPIO_Init+0x324>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x324>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_GPIO_Init+0x324>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae96 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e12b      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f8ea 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001814:	f000 fa02 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <HAL_I2C_Init+0x274>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d807      	bhi.n	8001834 <HAL_I2C_Init+0x84>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <HAL_I2C_Init+0x278>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e006      	b.n	8001842 <HAL_I2C_Init+0x92>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a7d      	ldr	r2, [pc, #500]	; (8001a2c <HAL_I2C_Init+0x27c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0e7      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a78      	ldr	r2, [pc, #480]	; (8001a30 <HAL_I2C_Init+0x280>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_I2C_Init+0x274>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d802      	bhi.n	8001884 <HAL_I2C_Init+0xd4>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	e009      	b.n	8001898 <HAL_I2C_Init+0xe8>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a69      	ldr	r2, [pc, #420]	; (8001a34 <HAL_I2C_Init+0x284>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	495c      	ldr	r1, [pc, #368]	; (8001a24 <HAL_I2C_Init+0x274>)
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d819      	bhi.n	80018ec <HAL_I2C_Init+0x13c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e59      	subs	r1, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018cc:	400b      	ands	r3, r1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_I2C_Init+0x138>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e59      	subs	r1, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	e051      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e04f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_I2C_Init+0x168>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e012      	b.n	800193e <HAL_I2C_Init+0x18e>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Init+0x196>
 8001942:	2301      	movs	r3, #1
 8001944:	e022      	b.n	800198c <HAL_I2C_Init+0x1dc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10e      	bne.n	800196c <HAL_I2C_Init+0x1bc>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e58      	subs	r0, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	e00f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	0099      	lsls	r1, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	6809      	ldr	r1, [r1, #0]
 8001990:	4313      	orrs	r3, r2
 8001992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6911      	ldr	r1, [r2, #16]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68d2      	ldr	r2, [r2, #12]
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	000186a0 	.word	0x000186a0
 8001a28:	001e847f 	.word	0x001e847f
 8001a2c:	003d08ff 	.word	0x003d08ff
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0cc      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d90c      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d044      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e067      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4934      	ldr	r1, [pc, #208]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f9a4 	bl	8000e74 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f9a0 	bl	8000e74 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d20c      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f855 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f904 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	0800408c 	.word	0x0800408c
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	0800409c 	.word	0x0800409c

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffdc 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0b5b      	lsrs	r3, r3, #13
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	0800409c 	.word	0x0800409c

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b0ae      	sub	sp, #184	; 0xb8
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c92:	4bcb      	ldr	r3, [pc, #812]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	f200 8206 	bhi.w	80020ac <HAL_RCC_GetSysClockFreq+0x440>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cdd 	.word	0x08001cdd
 8001cac:	080020ad 	.word	0x080020ad
 8001cb0:	080020ad 	.word	0x080020ad
 8001cb4:	080020ad 	.word	0x080020ad
 8001cb8:	08001ce5 	.word	0x08001ce5
 8001cbc:	080020ad 	.word	0x080020ad
 8001cc0:	080020ad 	.word	0x080020ad
 8001cc4:	080020ad 	.word	0x080020ad
 8001cc8:	08001ced 	.word	0x08001ced
 8001ccc:	080020ad 	.word	0x080020ad
 8001cd0:	080020ad 	.word	0x080020ad
 8001cd4:	080020ad 	.word	0x080020ad
 8001cd8:	08001edd 	.word	0x08001edd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4bb9      	ldr	r3, [pc, #740]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ce2:	e1e7      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce4:	4bb8      	ldr	r3, [pc, #736]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cea:	e1e3      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4bb4      	ldr	r3, [pc, #720]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf8:	4bb1      	ldr	r3, [pc, #708]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d071      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d04:	4bae      	ldr	r3, [pc, #696]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	462b      	mov	r3, r5
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	0159      	lsls	r1, r3, #5
 8001d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3c:	0150      	lsls	r0, r2, #5
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4621      	mov	r1, r4
 8001d44:	1a51      	subs	r1, r2, r1
 8001d46:	6439      	str	r1, [r7, #64]	; 0x40
 8001d48:	4629      	mov	r1, r5
 8001d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	018b      	lsls	r3, r1, #6
 8001d60:	4641      	mov	r1, r8
 8001d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d66:	4641      	mov	r1, r8
 8001d68:	018a      	lsls	r2, r1, #6
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	1a51      	subs	r1, r2, r1
 8001d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d70:	4649      	mov	r1, r9
 8001d72:	eb63 0301 	sbc.w	r3, r3, r1
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d84:	4649      	mov	r1, r9
 8001d86:	00cb      	lsls	r3, r1, #3
 8001d88:	4641      	mov	r1, r8
 8001d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d8e:	4641      	mov	r1, r8
 8001d90:	00ca      	lsls	r2, r1, #3
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	4622      	mov	r2, r4
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9e:	462b      	mov	r3, r5
 8001da0:	460a      	mov	r2, r1
 8001da2:	eb42 0303 	adc.w	r3, r2, r3
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001db4:	4629      	mov	r1, r5
 8001db6:	024b      	lsls	r3, r1, #9
 8001db8:	4621      	mov	r1, r4
 8001dba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	024a      	lsls	r2, r1, #9
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001dd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001dd8:	f7fe fa14 	bl	8000204 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4613      	mov	r3, r2
 8001de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001de6:	e067      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de8:	4b75      	ldr	r3, [pc, #468]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	2200      	movs	r2, #0
 8001df0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001df4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e00:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e02:	2300      	movs	r3, #0
 8001e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	462b      	mov	r3, r5
 8001e0e:	f04f 0000 	mov.w	r0, #0
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	0159      	lsls	r1, r3, #5
 8001e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1c:	0150      	lsls	r0, r2, #5
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4621      	mov	r1, r4
 8001e24:	1a51      	subs	r1, r2, r1
 8001e26:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e28:	4629      	mov	r1, r5
 8001e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	018b      	lsls	r3, r1, #6
 8001e40:	4641      	mov	r1, r8
 8001e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e46:	4641      	mov	r1, r8
 8001e48:	018a      	lsls	r2, r1, #6
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e6a:	4692      	mov	sl, r2
 8001e6c:	469b      	mov	fp, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	eb1a 0303 	adds.w	r3, sl, r3
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	462b      	mov	r3, r5
 8001e78:	eb4b 0303 	adc.w	r3, fp, r3
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	028b      	lsls	r3, r1, #10
 8001e8e:	4621      	mov	r1, r4
 8001e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e94:	4621      	mov	r1, r4
 8001e96:	028a      	lsls	r2, r1, #10
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ea4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ea6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eaa:	f7fe f9ab 	bl	8000204 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eda:	e0eb      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d06b      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	2200      	movs	r2, #0
 8001efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f06:	663b      	str	r3, [r7, #96]	; 0x60
 8001f08:	2300      	movs	r3, #0
 8001f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f10:	4622      	mov	r2, r4
 8001f12:	462b      	mov	r3, r5
 8001f14:	f04f 0000 	mov.w	r0, #0
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	0159      	lsls	r1, r3, #5
 8001f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f22:	0150      	lsls	r0, r2, #5
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4621      	mov	r1, r4
 8001f2a:	1a51      	subs	r1, r2, r1
 8001f2c:	61b9      	str	r1, [r7, #24]
 8001f2e:	4629      	mov	r1, r5
 8001f30:	eb63 0301 	sbc.w	r3, r3, r1
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f42:	4659      	mov	r1, fp
 8001f44:	018b      	lsls	r3, r1, #6
 8001f46:	4651      	mov	r1, sl
 8001f48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4c:	4651      	mov	r1, sl
 8001f4e:	018a      	lsls	r2, r1, #6
 8001f50:	4651      	mov	r1, sl
 8001f52:	ebb2 0801 	subs.w	r8, r2, r1
 8001f56:	4659      	mov	r1, fp
 8001f58:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f70:	4690      	mov	r8, r2
 8001f72:	4699      	mov	r9, r3
 8001f74:	4623      	mov	r3, r4
 8001f76:	eb18 0303 	adds.w	r3, r8, r3
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	462b      	mov	r3, r5
 8001f7e:	eb49 0303 	adc.w	r3, r9, r3
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f90:	4629      	mov	r1, r5
 8001f92:	024b      	lsls	r3, r1, #9
 8001f94:	4621      	mov	r1, r4
 8001f96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	024a      	lsls	r2, r1, #9
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001faa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fb0:	f7fe f928 	bl	8000204 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fbe:	e065      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x420>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8001fde:	2300      	movs	r3, #0
 8001fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	464b      	mov	r3, r9
 8001fea:	f04f 0000 	mov.w	r0, #0
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	0159      	lsls	r1, r3, #5
 8001ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff8:	0150      	lsls	r0, r2, #5
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4641      	mov	r1, r8
 8002000:	1a51      	subs	r1, r2, r1
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	4649      	mov	r1, r9
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002018:	4659      	mov	r1, fp
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	4651      	mov	r1, sl
 800201e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002022:	4651      	mov	r1, sl
 8002024:	018a      	lsls	r2, r1, #6
 8002026:	4651      	mov	r1, sl
 8002028:	1a54      	subs	r4, r2, r1
 800202a:	4659      	mov	r1, fp
 800202c:	eb63 0501 	sbc.w	r5, r3, r1
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	00eb      	lsls	r3, r5, #3
 800203a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800203e:	00e2      	lsls	r2, r4, #3
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	4643      	mov	r3, r8
 8002046:	18e3      	adds	r3, r4, r3
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	464b      	mov	r3, r9
 800204c:	eb45 0303 	adc.w	r3, r5, r3
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205e:	4629      	mov	r1, r5
 8002060:	028b      	lsls	r3, r1, #10
 8002062:	4621      	mov	r1, r4
 8002064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002068:	4621      	mov	r1, r4
 800206a:	028a      	lsls	r2, r1, #10
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002074:	2200      	movs	r2, #0
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
 8002078:	64fa      	str	r2, [r7, #76]	; 0x4c
 800207a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800207e:	f7fe f8c1 	bl	8000204 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4613      	mov	r3, r2
 8002088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0f1b      	lsrs	r3, r3, #28
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800209a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020aa:	e003      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	37b8      	adds	r7, #184	; 0xb8
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400

080020cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e28d      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8083 	beq.w	80021f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020ec:	4b94      	ldr	r3, [pc, #592]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d019      	beq.n	800212c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020f8:	4b91      	ldr	r3, [pc, #580]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002100:	2b08      	cmp	r3, #8
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002104:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b8b      	ldr	r3, [pc, #556]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x124>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e25a      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x90>
 800214e:	4b7c      	ldr	r3, [pc, #496]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7b      	ldr	r2, [pc, #492]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xcc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0xb4>
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b73      	ldr	r3, [pc, #460]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a72      	ldr	r2, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xcc>
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b6c      	ldr	r3, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6b      	ldr	r2, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe68 	bl	8000e74 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe64 	bl	8000e74 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e21f      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b61      	ldr	r3, [pc, #388]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xdc>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe54 	bl	8000e74 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fe50 	bl	8000e74 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e20b      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x104>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06f      	beq.n	80022de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021fe:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d017      	beq.n	800223a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x186>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1d3      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x278>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fdfd 	bl	8000e74 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fdf9 	bl	8000e74 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1b4      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x278>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fddc 	bl	8000e74 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fdd8 	bl	8000e74 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e193      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x27c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fdbc 	bl	8000e74 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fdb8 	bl	8000e74 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e173      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x234>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x27c>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe fda5 	bl	8000e74 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fda1 	bl	8000e74 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e15c      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b83      	ldr	r3, [pc, #524]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a7e      	ldr	r2, [pc, #504]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b79      	ldr	r3, [pc, #484]	; (800257c <HAL_RCC_OscConfig+0x4b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x4b0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x4b0>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fd61 	bl	8000e74 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe fd5d 	bl	8000e74 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e118      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6c      	ldr	r3, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x4b0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x31e>
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x358>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x340>
 80023f2:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a60      	ldr	r2, [pc, #384]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	4b5e      	ldr	r3, [pc, #376]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x358>
 800240c:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a59      	ldr	r2, [pc, #356]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	4b57      	ldr	r3, [pc, #348]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a56      	ldr	r2, [pc, #344]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fd22 	bl	8000e74 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fd1e 	bl	8000e74 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0d7      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x368>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7fe fd0c 	bl	8000e74 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe fd08 	bl	8000e74 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0c1      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80ad 	beq.w	80025f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d060      	beq.n	800256c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d145      	bne.n	800253e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_RCC_OscConfig+0x4b4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fcdc 	bl	8000e74 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fcd8 	bl	8000e74 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e093      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x4b4>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fcad 	bl	8000e74 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fca9 	bl	8000e74 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e064      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x452>
 800253c:	e05c      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x4b4>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fc96 	bl	8000e74 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fc92 	bl	8000e74 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04d      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_OscConfig+0x4ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x480>
 800256a:	e045      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e040      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x538>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d030      	beq.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d129      	bne.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d122      	bne.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d119      	bne.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10f      	bne.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e03f      	b.n	800269a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fa06 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fddf 	bl	8003210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08a      	sub	sp, #40	; 0x28
 80026a6:	af02      	add	r7, sp, #8
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d17c      	bne.n	80027bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_UART_Transmit+0x2c>
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e075      	b.n	80027be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_UART_Transmit+0x3e>
 80026dc:	2302      	movs	r3, #2
 80026de:	e06e      	b.n	80027be <HAL_UART_Transmit+0x11c>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	; 0x21
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fbbd 	bl	8000e74 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x82>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002734:	e02a      	b.n	800278c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fb1f 	bl	8002d84 <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e036      	b.n	80027be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e007      	b.n	800277e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1cf      	bne.n	8002736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2140      	movs	r1, #64	; 0x40
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 faef 	bl	8002d84 <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d11d      	bne.n	800281c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_UART_Receive_IT+0x26>
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e016      	b.n	800281e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Receive_IT+0x38>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e00f      	b.n	800281e <HAL_UART_Receive_IT+0x58>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	461a      	mov	r2, r3
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fb24 	bl	8002e60 <UART_Start_Receive_IT>
 8002818:	4603      	mov	r3, r0
 800281a:	e000      	b.n	800281e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0ba      	sub	sp, #232	; 0xe8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_UART_IRQHandler+0x66>
 800287a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fc07 	bl	800309a <UART_Receive_IT>
      return;
 800288c:	e256      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800288e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80de 	beq.w	8002a54 <HAL_UART_IRQHandler+0x22c>
 8002898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80d1 	beq.w	8002a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_UART_IRQHandler+0xae>
 80028be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xd2>
 80028e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_UART_IRQHandler+0xf6>
 8002906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_UART_IRQHandler+0x126>
 800292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 81ed 	beq.w	8002d32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_UART_IRQHandler+0x14e>
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb92 	bl	800309a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_UART_IRQHandler+0x17a>
 800299a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa9a 	bl	8002edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d141      	bne.n	8002a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	; (8002c04 <HAL_UART_IRQHandler+0x3dc>)
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fcf9 	bl	800140e <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e00e      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f990 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00a      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f98c 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e006      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f988 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a4e:	e170      	b.n	8002d32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	bf00      	nop
    return;
 8002a52:	e16e      	b.n	8002d32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 814a 	bne.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8143 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 813c 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	f040 80b4 	bne.w	8002c08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8140 	beq.w	8002d36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f080 8139 	bcs.w	8002d36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	f000 8088 	beq.w	8002bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1d9      	bne.n	8002ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e1      	bne.n	8002b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e3      	bne.n	8002b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e3      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fba2 	bl	800132e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b6 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c00:	e099      	b.n	8002d36 <HAL_UART_IRQHandler+0x50e>
 8002c02:	bf00      	nop
 8002c04:	08002fa3 	.word	0x08002fa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 808b 	beq.w	8002d3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8086 	beq.w	8002d3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c52:	647a      	str	r2, [r7, #68]	; 0x44
 8002c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	623b      	str	r3, [r7, #32]
   return(result);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e3      	bne.n	8002c66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e3      	bne.n	8002cac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f83e 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf0:	e023      	b.n	8002d3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x4ea>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f95d 	bl	8002fca <UART_Transmit_IT>
    return;
 8002d10:	e014      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <HAL_UART_IRQHandler+0x514>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f99d 	bl	800306a <UART_EndTransmit_IT>
    return;
 8002d30:	e004      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
    return;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
      return;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
      return;
 8002d3a:	bf00      	nop
  }
}
 8002d3c:	37e8      	adds	r7, #232	; 0xe8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b090      	sub	sp, #64	; 0x40
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d94:	e050      	b.n	8002e38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d04c      	beq.n	8002e38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002da4:	f7fe f866 	bl	8000e74 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d241      	bcs.n	8002e38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd4:	637a      	str	r2, [r7, #52]	; 0x34
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e5      	bne.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3314      	adds	r3, #20
 8002dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	613b      	str	r3, [r7, #16]
   return(result);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3314      	adds	r3, #20
 8002e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e08:	623a      	str	r2, [r7, #32]
 8002e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	69f9      	ldr	r1, [r7, #28]
 8002e0e:	6a3a      	ldr	r2, [r7, #32]
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e5      	bne.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e00f      	b.n	8002e58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d09f      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3740      	adds	r7, #64	; 0x40
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2222      	movs	r2, #34	; 0x22
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b095      	sub	sp, #84	; 0x54
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f04:	643a      	str	r2, [r7, #64]	; 0x40
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d119      	bne.n	8002f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0310 	bic.w	r3, r3, #16
 8002f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f74:	61ba      	str	r2, [r7, #24]
 8002f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	613b      	str	r3, [r7, #16]
   return(result);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f96:	bf00      	nop
 8002f98:	3754      	adds	r7, #84	; 0x54
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fecb 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b21      	cmp	r3, #33	; 0x21
 8002fdc:	d13e      	bne.n	800305c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d114      	bne.n	8003012 <UART_Transmit_IT+0x48>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d110      	bne.n	8003012 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	621a      	str	r2, [r3, #32]
 8003010:	e008      	b.n	8003024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6211      	str	r1, [r2, #32]
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29b      	uxth	r3, r3
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4619      	mov	r1, r3
 8003032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fe5a 	bl	8002d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08c      	sub	sp, #48	; 0x30
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b22      	cmp	r3, #34	; 0x22
 80030ac:	f040 80ab 	bne.w	8003206 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d117      	bne.n	80030ea <UART_Receive_IT+0x50>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d113      	bne.n	80030ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d8:	b29a      	uxth	r2, r3
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
 80030e8:	e026      	b.n	8003138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fc:	d007      	beq.n	800310e <UART_Receive_IT+0x74>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <UART_Receive_IT+0x82>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e008      	b.n	800312e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003128:	b2da      	uxtb	r2, r3
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4619      	mov	r1, r3
 8003146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003148:	2b00      	cmp	r3, #0
 800314a:	d15a      	bne.n	8003202 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0220 	bic.w	r2, r2, #32
 800315a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	2b01      	cmp	r3, #1
 800318a:	d135      	bne.n	80031f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	613b      	str	r3, [r7, #16]
   return(result);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f023 0310 	bic.w	r3, r3, #16
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	623a      	str	r2, [r7, #32]
 80031b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	69f9      	ldr	r1, [r7, #28]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d10a      	bne.n	80031ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fdbb 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
 80031f6:	e002      	b.n	80031fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd f981 	bl	8000500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e002      	b.n	8003208 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3730      	adds	r7, #48	; 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b0c0      	sub	sp, #256	; 0x100
 8003216:	af00      	add	r7, sp, #0
 8003218:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	ea40 0301 	orr.w	r3, r0, r1
 8003238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003268:	f021 010c 	bic.w	r1, r1, #12
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003276:	430b      	orrs	r3, r1
 8003278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	6999      	ldr	r1, [r3, #24]
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	ea40 0301 	orr.w	r3, r0, r1
 8003296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b8f      	ldr	r3, [pc, #572]	; (80034dc <UART_SetConfig+0x2cc>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d005      	beq.n	80032b0 <UART_SetConfig+0xa0>
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b8d      	ldr	r3, [pc, #564]	; (80034e0 <UART_SetConfig+0x2d0>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d104      	bne.n	80032ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7fe fcc8 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 80032b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032b8:	e003      	b.n	80032c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ba:	f7fe fcaf 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80032be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032cc:	f040 810c 	bne.w	80034e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ea:	415b      	adcs	r3, r3
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032f2:	4621      	mov	r1, r4
 80032f4:	eb12 0801 	adds.w	r8, r2, r1
 80032f8:	4629      	mov	r1, r5
 80032fa:	eb43 0901 	adc.w	r9, r3, r1
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	4623      	mov	r3, r4
 8003318:	eb18 0303 	adds.w	r3, r8, r3
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003320:	462b      	mov	r3, r5
 8003322:	eb49 0303 	adc.w	r3, r9, r3
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003336:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800333a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800333e:	460b      	mov	r3, r1
 8003340:	18db      	adds	r3, r3, r3
 8003342:	653b      	str	r3, [r7, #80]	; 0x50
 8003344:	4613      	mov	r3, r2
 8003346:	eb42 0303 	adc.w	r3, r2, r3
 800334a:	657b      	str	r3, [r7, #84]	; 0x54
 800334c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003354:	f7fc ff56 	bl	8000204 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <UART_SetConfig+0x2d4>)
 800335e:	fba3 2302 	umull	r2, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	011c      	lsls	r4, r3, #4
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003370:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	1891      	adds	r1, r2, r2
 800337e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003380:	415b      	adcs	r3, r3
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003388:	4641      	mov	r1, r8
 800338a:	eb12 0a01 	adds.w	sl, r2, r1
 800338e:	4649      	mov	r1, r9
 8003390:	eb43 0b01 	adc.w	fp, r3, r1
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a8:	4692      	mov	sl, r2
 80033aa:	469b      	mov	fp, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	eb1a 0303 	adds.w	r3, sl, r3
 80033b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b6:	464b      	mov	r3, r9
 80033b8:	eb4b 0303 	adc.w	r3, fp, r3
 80033bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033d4:	460b      	mov	r3, r1
 80033d6:	18db      	adds	r3, r3, r3
 80033d8:	643b      	str	r3, [r7, #64]	; 0x40
 80033da:	4613      	mov	r3, r2
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
 80033e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ea:	f7fc ff0b 	bl	8000204 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <UART_SetConfig+0x2d4>)
 80033f6:	fba3 2301 	umull	r2, r3, r3, r1
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2264      	movs	r2, #100	; 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	1acb      	subs	r3, r1, r3
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <UART_SetConfig+0x2d4>)
 800340c:	fba3 2302 	umull	r2, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	63b9      	str	r1, [r7, #56]	; 0x38
 8003434:	415b      	adcs	r3, r3
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6339      	str	r1, [r7, #48]	; 0x30
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003470:	464b      	mov	r3, r9
 8003472:	460a      	mov	r2, r1
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003488:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800348c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003490:	460b      	mov	r3, r1
 8003492:	18db      	adds	r3, r3, r3
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	4613      	mov	r3, r2
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034a6:	f7fc fead 	bl	8000204 <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <UART_SetConfig+0x2d4>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	; 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3332      	adds	r3, #50	; 0x32
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <UART_SetConfig+0x2d4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 0207 	and.w	r2, r3, #7
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4422      	add	r2, r4
 80034d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d8:	e106      	b.n	80036e8 <UART_SetConfig+0x4d8>
 80034da:	bf00      	nop
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40011400 	.word	0x40011400
 80034e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034fa:	4642      	mov	r2, r8
 80034fc:	464b      	mov	r3, r9
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	6239      	str	r1, [r7, #32]
 8003502:	415b      	adcs	r3, r3
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800350a:	4641      	mov	r1, r8
 800350c:	1854      	adds	r4, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb43 0501 	adc.w	r5, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	00eb      	lsls	r3, r5, #3
 800351e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003522:	00e2      	lsls	r2, r4, #3
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	4643      	mov	r3, r8
 800352a:	18e3      	adds	r3, r4, r3
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003530:	464b      	mov	r3, r9
 8003532:	eb45 0303 	adc.w	r3, r5, r3
 8003536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003556:	4629      	mov	r1, r5
 8003558:	008b      	lsls	r3, r1, #2
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003560:	4621      	mov	r1, r4
 8003562:	008a      	lsls	r2, r1, #2
 8003564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003568:	f7fc fe4c 	bl	8000204 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <UART_SetConfig+0x4e4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	61b9      	str	r1, [r7, #24]
 8003594:	415b      	adcs	r3, r3
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6139      	str	r1, [r7, #16]
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003606:	f7fc fdfd 	bl	8000204 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4611      	mov	r1, r2
 8003610:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <UART_SetConfig+0x4e4>)
 8003612:	fba3 2301 	umull	r2, r3, r3, r1
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2264      	movs	r2, #100	; 0x64
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	1acb      	subs	r3, r1, r3
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	3332      	adds	r3, #50	; 0x32
 8003624:	4a33      	ldr	r2, [pc, #204]	; (80036f4 <UART_SetConfig+0x4e4>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003630:	441c      	add	r4, r3
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	673b      	str	r3, [r7, #112]	; 0x70
 800363a:	677a      	str	r2, [r7, #116]	; 0x74
 800363c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	415b      	adcs	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	66bb      	str	r3, [r7, #104]	; 0x68
 8003682:	464b      	mov	r3, r9
 8003684:	460a      	mov	r2, r1
 8003686:	eb42 0303 	adc.w	r3, r2, r3
 800368a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	663b      	str	r3, [r7, #96]	; 0x60
 8003696:	667a      	str	r2, [r7, #100]	; 0x64
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036a4:	4649      	mov	r1, r9
 80036a6:	008b      	lsls	r3, r1, #2
 80036a8:	4641      	mov	r1, r8
 80036aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ae:	4641      	mov	r1, r8
 80036b0:	008a      	lsls	r2, r1, #2
 80036b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036b6:	f7fc fda5 	bl	8000204 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <UART_SetConfig+0x4e4>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	; 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	3332      	adds	r3, #50	; 0x32
 80036d2:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <UART_SetConfig+0x4e4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4422      	add	r2, r4
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <sbrk_aligned>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4e0e      	ldr	r6, [pc, #56]	; (8003734 <sbrk_aligned+0x3c>)
 80036fc:	460c      	mov	r4, r1
 80036fe:	6831      	ldr	r1, [r6, #0]
 8003700:	4605      	mov	r5, r0
 8003702:	b911      	cbnz	r1, 800370a <sbrk_aligned+0x12>
 8003704:	f000 fad6 	bl	8003cb4 <_sbrk_r>
 8003708:	6030      	str	r0, [r6, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 fad1 	bl	8003cb4 <_sbrk_r>
 8003712:	1c43      	adds	r3, r0, #1
 8003714:	d00a      	beq.n	800372c <sbrk_aligned+0x34>
 8003716:	1cc4      	adds	r4, r0, #3
 8003718:	f024 0403 	bic.w	r4, r4, #3
 800371c:	42a0      	cmp	r0, r4
 800371e:	d007      	beq.n	8003730 <sbrk_aligned+0x38>
 8003720:	1a21      	subs	r1, r4, r0
 8003722:	4628      	mov	r0, r5
 8003724:	f000 fac6 	bl	8003cb4 <_sbrk_r>
 8003728:	3001      	adds	r0, #1
 800372a:	d101      	bne.n	8003730 <sbrk_aligned+0x38>
 800372c:	f04f 34ff 	mov.w	r4, #4294967295
 8003730:	4620      	mov	r0, r4
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	200001a0 	.word	0x200001a0

08003738 <_malloc_r>:
 8003738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800373c:	1ccd      	adds	r5, r1, #3
 800373e:	f025 0503 	bic.w	r5, r5, #3
 8003742:	3508      	adds	r5, #8
 8003744:	2d0c      	cmp	r5, #12
 8003746:	bf38      	it	cc
 8003748:	250c      	movcc	r5, #12
 800374a:	2d00      	cmp	r5, #0
 800374c:	4607      	mov	r7, r0
 800374e:	db01      	blt.n	8003754 <_malloc_r+0x1c>
 8003750:	42a9      	cmp	r1, r5
 8003752:	d905      	bls.n	8003760 <_malloc_r+0x28>
 8003754:	230c      	movs	r3, #12
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	2600      	movs	r6, #0
 800375a:	4630      	mov	r0, r6
 800375c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003760:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003834 <_malloc_r+0xfc>
 8003764:	f000 f868 	bl	8003838 <__malloc_lock>
 8003768:	f8d8 3000 	ldr.w	r3, [r8]
 800376c:	461c      	mov	r4, r3
 800376e:	bb5c      	cbnz	r4, 80037c8 <_malloc_r+0x90>
 8003770:	4629      	mov	r1, r5
 8003772:	4638      	mov	r0, r7
 8003774:	f7ff ffc0 	bl	80036f8 <sbrk_aligned>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	4604      	mov	r4, r0
 800377c:	d155      	bne.n	800382a <_malloc_r+0xf2>
 800377e:	f8d8 4000 	ldr.w	r4, [r8]
 8003782:	4626      	mov	r6, r4
 8003784:	2e00      	cmp	r6, #0
 8003786:	d145      	bne.n	8003814 <_malloc_r+0xdc>
 8003788:	2c00      	cmp	r4, #0
 800378a:	d048      	beq.n	800381e <_malloc_r+0xe6>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	4631      	mov	r1, r6
 8003790:	4638      	mov	r0, r7
 8003792:	eb04 0903 	add.w	r9, r4, r3
 8003796:	f000 fa8d 	bl	8003cb4 <_sbrk_r>
 800379a:	4581      	cmp	r9, r0
 800379c:	d13f      	bne.n	800381e <_malloc_r+0xe6>
 800379e:	6821      	ldr	r1, [r4, #0]
 80037a0:	1a6d      	subs	r5, r5, r1
 80037a2:	4629      	mov	r1, r5
 80037a4:	4638      	mov	r0, r7
 80037a6:	f7ff ffa7 	bl	80036f8 <sbrk_aligned>
 80037aa:	3001      	adds	r0, #1
 80037ac:	d037      	beq.n	800381e <_malloc_r+0xe6>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	442b      	add	r3, r5
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	f8d8 3000 	ldr.w	r3, [r8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d038      	beq.n	800382e <_malloc_r+0xf6>
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	42a2      	cmp	r2, r4
 80037c0:	d12b      	bne.n	800381a <_malloc_r+0xe2>
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	e00f      	b.n	80037e8 <_malloc_r+0xb0>
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	1b52      	subs	r2, r2, r5
 80037cc:	d41f      	bmi.n	800380e <_malloc_r+0xd6>
 80037ce:	2a0b      	cmp	r2, #11
 80037d0:	d917      	bls.n	8003802 <_malloc_r+0xca>
 80037d2:	1961      	adds	r1, r4, r5
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	6025      	str	r5, [r4, #0]
 80037d8:	bf18      	it	ne
 80037da:	6059      	strne	r1, [r3, #4]
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	bf08      	it	eq
 80037e0:	f8c8 1000 	streq.w	r1, [r8]
 80037e4:	5162      	str	r2, [r4, r5]
 80037e6:	604b      	str	r3, [r1, #4]
 80037e8:	4638      	mov	r0, r7
 80037ea:	f104 060b 	add.w	r6, r4, #11
 80037ee:	f000 f829 	bl	8003844 <__malloc_unlock>
 80037f2:	f026 0607 	bic.w	r6, r6, #7
 80037f6:	1d23      	adds	r3, r4, #4
 80037f8:	1af2      	subs	r2, r6, r3
 80037fa:	d0ae      	beq.n	800375a <_malloc_r+0x22>
 80037fc:	1b9b      	subs	r3, r3, r6
 80037fe:	50a3      	str	r3, [r4, r2]
 8003800:	e7ab      	b.n	800375a <_malloc_r+0x22>
 8003802:	42a3      	cmp	r3, r4
 8003804:	6862      	ldr	r2, [r4, #4]
 8003806:	d1dd      	bne.n	80037c4 <_malloc_r+0x8c>
 8003808:	f8c8 2000 	str.w	r2, [r8]
 800380c:	e7ec      	b.n	80037e8 <_malloc_r+0xb0>
 800380e:	4623      	mov	r3, r4
 8003810:	6864      	ldr	r4, [r4, #4]
 8003812:	e7ac      	b.n	800376e <_malloc_r+0x36>
 8003814:	4634      	mov	r4, r6
 8003816:	6876      	ldr	r6, [r6, #4]
 8003818:	e7b4      	b.n	8003784 <_malloc_r+0x4c>
 800381a:	4613      	mov	r3, r2
 800381c:	e7cc      	b.n	80037b8 <_malloc_r+0x80>
 800381e:	230c      	movs	r3, #12
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4638      	mov	r0, r7
 8003824:	f000 f80e 	bl	8003844 <__malloc_unlock>
 8003828:	e797      	b.n	800375a <_malloc_r+0x22>
 800382a:	6025      	str	r5, [r4, #0]
 800382c:	e7dc      	b.n	80037e8 <_malloc_r+0xb0>
 800382e:	605b      	str	r3, [r3, #4]
 8003830:	deff      	udf	#255	; 0xff
 8003832:	bf00      	nop
 8003834:	2000019c 	.word	0x2000019c

08003838 <__malloc_lock>:
 8003838:	4801      	ldr	r0, [pc, #4]	; (8003840 <__malloc_lock+0x8>)
 800383a:	f000 ba88 	b.w	8003d4e <__retarget_lock_acquire_recursive>
 800383e:	bf00      	nop
 8003840:	200002e4 	.word	0x200002e4

08003844 <__malloc_unlock>:
 8003844:	4801      	ldr	r0, [pc, #4]	; (800384c <__malloc_unlock+0x8>)
 8003846:	f000 ba83 	b.w	8003d50 <__retarget_lock_release_recursive>
 800384a:	bf00      	nop
 800384c:	200002e4 	.word	0x200002e4

08003850 <std>:
 8003850:	2300      	movs	r3, #0
 8003852:	b510      	push	{r4, lr}
 8003854:	4604      	mov	r4, r0
 8003856:	e9c0 3300 	strd	r3, r3, [r0]
 800385a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800385e:	6083      	str	r3, [r0, #8]
 8003860:	8181      	strh	r1, [r0, #12]
 8003862:	6643      	str	r3, [r0, #100]	; 0x64
 8003864:	81c2      	strh	r2, [r0, #14]
 8003866:	6183      	str	r3, [r0, #24]
 8003868:	4619      	mov	r1, r3
 800386a:	2208      	movs	r2, #8
 800386c:	305c      	adds	r0, #92	; 0x5c
 800386e:	f000 f9e5 	bl	8003c3c <memset>
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <std+0x58>)
 8003874:	6263      	str	r3, [r4, #36]	; 0x24
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <std+0x5c>)
 8003878:	62a3      	str	r3, [r4, #40]	; 0x28
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <std+0x60>)
 800387c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <std+0x64>)
 8003880:	6323      	str	r3, [r4, #48]	; 0x30
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <std+0x68>)
 8003884:	6224      	str	r4, [r4, #32]
 8003886:	429c      	cmp	r4, r3
 8003888:	d006      	beq.n	8003898 <std+0x48>
 800388a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800388e:	4294      	cmp	r4, r2
 8003890:	d002      	beq.n	8003898 <std+0x48>
 8003892:	33d0      	adds	r3, #208	; 0xd0
 8003894:	429c      	cmp	r4, r3
 8003896:	d105      	bne.n	80038a4 <std+0x54>
 8003898:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f000 ba54 	b.w	8003d4c <__retarget_lock_init_recursive>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	bf00      	nop
 80038a8:	08003a8d 	.word	0x08003a8d
 80038ac:	08003aaf 	.word	0x08003aaf
 80038b0:	08003ae7 	.word	0x08003ae7
 80038b4:	08003b0b 	.word	0x08003b0b
 80038b8:	200001a4 	.word	0x200001a4

080038bc <stdio_exit_handler>:
 80038bc:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <stdio_exit_handler+0xc>)
 80038be:	4903      	ldr	r1, [pc, #12]	; (80038cc <stdio_exit_handler+0x10>)
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <stdio_exit_handler+0x14>)
 80038c2:	f000 b869 	b.w	8003998 <_fwalk_sglue>
 80038c6:	bf00      	nop
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	08003ef9 	.word	0x08003ef9
 80038d0:	20000018 	.word	0x20000018

080038d4 <cleanup_stdio>:
 80038d4:	6841      	ldr	r1, [r0, #4]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <cleanup_stdio+0x34>)
 80038d8:	4299      	cmp	r1, r3
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	d001      	beq.n	80038e4 <cleanup_stdio+0x10>
 80038e0:	f000 fb0a 	bl	8003ef8 <_fflush_r>
 80038e4:	68a1      	ldr	r1, [r4, #8]
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <cleanup_stdio+0x38>)
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <cleanup_stdio+0x1e>
 80038ec:	4620      	mov	r0, r4
 80038ee:	f000 fb03 	bl	8003ef8 <_fflush_r>
 80038f2:	68e1      	ldr	r1, [r4, #12]
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <cleanup_stdio+0x3c>)
 80038f6:	4299      	cmp	r1, r3
 80038f8:	d004      	beq.n	8003904 <cleanup_stdio+0x30>
 80038fa:	4620      	mov	r0, r4
 80038fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003900:	f000 bafa 	b.w	8003ef8 <_fflush_r>
 8003904:	bd10      	pop	{r4, pc}
 8003906:	bf00      	nop
 8003908:	200001a4 	.word	0x200001a4
 800390c:	2000020c 	.word	0x2000020c
 8003910:	20000274 	.word	0x20000274

08003914 <global_stdio_init.part.0>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <global_stdio_init.part.0+0x30>)
 8003918:	4c0b      	ldr	r4, [pc, #44]	; (8003948 <global_stdio_init.part.0+0x34>)
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <global_stdio_init.part.0+0x38>)
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	4620      	mov	r0, r4
 8003920:	2200      	movs	r2, #0
 8003922:	2104      	movs	r1, #4
 8003924:	f7ff ff94 	bl	8003850 <std>
 8003928:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800392c:	2201      	movs	r2, #1
 800392e:	2109      	movs	r1, #9
 8003930:	f7ff ff8e 	bl	8003850 <std>
 8003934:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003938:	2202      	movs	r2, #2
 800393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393e:	2112      	movs	r1, #18
 8003940:	f7ff bf86 	b.w	8003850 <std>
 8003944:	200002dc 	.word	0x200002dc
 8003948:	200001a4 	.word	0x200001a4
 800394c:	080038bd 	.word	0x080038bd

08003950 <__sfp_lock_acquire>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__sfp_lock_acquire+0x8>)
 8003952:	f000 b9fc 	b.w	8003d4e <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	200002e5 	.word	0x200002e5

0800395c <__sfp_lock_release>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sfp_lock_release+0x8>)
 800395e:	f000 b9f7 	b.w	8003d50 <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	200002e5 	.word	0x200002e5

08003968 <__sinit>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	f7ff fff0 	bl	8003950 <__sfp_lock_acquire>
 8003970:	6a23      	ldr	r3, [r4, #32]
 8003972:	b11b      	cbz	r3, 800397c <__sinit+0x14>
 8003974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003978:	f7ff bff0 	b.w	800395c <__sfp_lock_release>
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <__sinit+0x28>)
 800397e:	6223      	str	r3, [r4, #32]
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <__sinit+0x2c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f5      	bne.n	8003974 <__sinit+0xc>
 8003988:	f7ff ffc4 	bl	8003914 <global_stdio_init.part.0>
 800398c:	e7f2      	b.n	8003974 <__sinit+0xc>
 800398e:	bf00      	nop
 8003990:	080038d5 	.word	0x080038d5
 8003994:	200002dc 	.word	0x200002dc

08003998 <_fwalk_sglue>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	4607      	mov	r7, r0
 800399e:	4688      	mov	r8, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	2600      	movs	r6, #0
 80039a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a8:	f1b9 0901 	subs.w	r9, r9, #1
 80039ac:	d505      	bpl.n	80039ba <_fwalk_sglue+0x22>
 80039ae:	6824      	ldr	r4, [r4, #0]
 80039b0:	2c00      	cmp	r4, #0
 80039b2:	d1f7      	bne.n	80039a4 <_fwalk_sglue+0xc>
 80039b4:	4630      	mov	r0, r6
 80039b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d907      	bls.n	80039d0 <_fwalk_sglue+0x38>
 80039c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d003      	beq.n	80039d0 <_fwalk_sglue+0x38>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	4306      	orrs	r6, r0
 80039d0:	3568      	adds	r5, #104	; 0x68
 80039d2:	e7e9      	b.n	80039a8 <_fwalk_sglue+0x10>

080039d4 <_puts_r>:
 80039d4:	6a03      	ldr	r3, [r0, #32]
 80039d6:	b570      	push	{r4, r5, r6, lr}
 80039d8:	6884      	ldr	r4, [r0, #8]
 80039da:	4605      	mov	r5, r0
 80039dc:	460e      	mov	r6, r1
 80039de:	b90b      	cbnz	r3, 80039e4 <_puts_r+0x10>
 80039e0:	f7ff ffc2 	bl	8003968 <__sinit>
 80039e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e6:	07db      	lsls	r3, r3, #31
 80039e8:	d405      	bmi.n	80039f6 <_puts_r+0x22>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	0598      	lsls	r0, r3, #22
 80039ee:	d402      	bmi.n	80039f6 <_puts_r+0x22>
 80039f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f2:	f000 f9ac 	bl	8003d4e <__retarget_lock_acquire_recursive>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	0719      	lsls	r1, r3, #28
 80039fa:	d513      	bpl.n	8003a24 <_puts_r+0x50>
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	b18b      	cbz	r3, 8003a24 <_puts_r+0x50>
 8003a00:	3e01      	subs	r6, #1
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60a3      	str	r3, [r4, #8]
 8003a0c:	b9e9      	cbnz	r1, 8003a4a <_puts_r+0x76>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da2e      	bge.n	8003a70 <_puts_r+0x9c>
 8003a12:	4622      	mov	r2, r4
 8003a14:	210a      	movs	r1, #10
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f87b 	bl	8003b12 <__swbuf_r>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d007      	beq.n	8003a30 <_puts_r+0x5c>
 8003a20:	250a      	movs	r5, #10
 8003a22:	e007      	b.n	8003a34 <_puts_r+0x60>
 8003a24:	4621      	mov	r1, r4
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 f8b0 	bl	8003b8c <__swsetup_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d0e7      	beq.n	8003a00 <_puts_r+0x2c>
 8003a30:	f04f 35ff 	mov.w	r5, #4294967295
 8003a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a36:	07da      	lsls	r2, r3, #31
 8003a38:	d405      	bmi.n	8003a46 <_puts_r+0x72>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	d402      	bmi.n	8003a46 <_puts_r+0x72>
 8003a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a42:	f000 f985 	bl	8003d50 <__retarget_lock_release_recursive>
 8003a46:	4628      	mov	r0, r5
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da04      	bge.n	8003a58 <_puts_r+0x84>
 8003a4e:	69a2      	ldr	r2, [r4, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dc06      	bgt.n	8003a62 <_puts_r+0x8e>
 8003a54:	290a      	cmp	r1, #10
 8003a56:	d004      	beq.n	8003a62 <_puts_r+0x8e>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	6022      	str	r2, [r4, #0]
 8003a5e:	7019      	strb	r1, [r3, #0]
 8003a60:	e7cf      	b.n	8003a02 <_puts_r+0x2e>
 8003a62:	4622      	mov	r2, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f854 	bl	8003b12 <__swbuf_r>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d1c9      	bne.n	8003a02 <_puts_r+0x2e>
 8003a6e:	e7df      	b.n	8003a30 <_puts_r+0x5c>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	250a      	movs	r5, #10
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	6022      	str	r2, [r4, #0]
 8003a78:	701d      	strb	r5, [r3, #0]
 8003a7a:	e7db      	b.n	8003a34 <_puts_r+0x60>

08003a7c <puts>:
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <puts+0xc>)
 8003a7e:	4601      	mov	r1, r0
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f7ff bfa7 	b.w	80039d4 <_puts_r>
 8003a86:	bf00      	nop
 8003a88:	20000064 	.word	0x20000064

08003a8c <__sread>:
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	460c      	mov	r4, r1
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	f000 f8fc 	bl	8003c90 <_read_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	bfab      	itete	ge
 8003a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa0:	181b      	addge	r3, r3, r0
 8003aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aa6:	bfac      	ite	ge
 8003aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aaa:	81a3      	strhlt	r3, [r4, #12]
 8003aac:	bd10      	pop	{r4, pc}

08003aae <__swrite>:
 8003aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	898b      	ldrh	r3, [r1, #12]
 8003ab6:	05db      	lsls	r3, r3, #23
 8003ab8:	4605      	mov	r5, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	4616      	mov	r6, r2
 8003abe:	d505      	bpl.n	8003acc <__swrite+0x1e>
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f000 f8d0 	bl	8003c6c <_lseek_r>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	4632      	mov	r2, r6
 8003ada:	463b      	mov	r3, r7
 8003adc:	4628      	mov	r0, r5
 8003ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae2:	f000 b8f7 	b.w	8003cd4 <_write_r>

08003ae6 <__sseek>:
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	460c      	mov	r4, r1
 8003aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aee:	f000 f8bd 	bl	8003c6c <_lseek_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	bf15      	itete	ne
 8003af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b02:	81a3      	strheq	r3, [r4, #12]
 8003b04:	bf18      	it	ne
 8003b06:	81a3      	strhne	r3, [r4, #12]
 8003b08:	bd10      	pop	{r4, pc}

08003b0a <__sclose>:
 8003b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0e:	f000 b89d 	b.w	8003c4c <_close_r>

08003b12 <__swbuf_r>:
 8003b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b14:	460e      	mov	r6, r1
 8003b16:	4614      	mov	r4, r2
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b118      	cbz	r0, 8003b24 <__swbuf_r+0x12>
 8003b1c:	6a03      	ldr	r3, [r0, #32]
 8003b1e:	b90b      	cbnz	r3, 8003b24 <__swbuf_r+0x12>
 8003b20:	f7ff ff22 	bl	8003968 <__sinit>
 8003b24:	69a3      	ldr	r3, [r4, #24]
 8003b26:	60a3      	str	r3, [r4, #8]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	071a      	lsls	r2, r3, #28
 8003b2c:	d525      	bpl.n	8003b7a <__swbuf_r+0x68>
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	b31b      	cbz	r3, 8003b7a <__swbuf_r+0x68>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	6922      	ldr	r2, [r4, #16]
 8003b36:	1a98      	subs	r0, r3, r2
 8003b38:	6963      	ldr	r3, [r4, #20]
 8003b3a:	b2f6      	uxtb	r6, r6
 8003b3c:	4283      	cmp	r3, r0
 8003b3e:	4637      	mov	r7, r6
 8003b40:	dc04      	bgt.n	8003b4c <__swbuf_r+0x3a>
 8003b42:	4621      	mov	r1, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 f9d7 	bl	8003ef8 <_fflush_r>
 8003b4a:	b9e0      	cbnz	r0, 8003b86 <__swbuf_r+0x74>
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	60a3      	str	r3, [r4, #8]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	6022      	str	r2, [r4, #0]
 8003b58:	701e      	strb	r6, [r3, #0]
 8003b5a:	6962      	ldr	r2, [r4, #20]
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d004      	beq.n	8003b6c <__swbuf_r+0x5a>
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	07db      	lsls	r3, r3, #31
 8003b66:	d506      	bpl.n	8003b76 <__swbuf_r+0x64>
 8003b68:	2e0a      	cmp	r6, #10
 8003b6a:	d104      	bne.n	8003b76 <__swbuf_r+0x64>
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f9c2 	bl	8003ef8 <_fflush_r>
 8003b74:	b938      	cbnz	r0, 8003b86 <__swbuf_r+0x74>
 8003b76:	4638      	mov	r0, r7
 8003b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 f805 	bl	8003b8c <__swsetup_r>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0d5      	beq.n	8003b32 <__swbuf_r+0x20>
 8003b86:	f04f 37ff 	mov.w	r7, #4294967295
 8003b8a:	e7f4      	b.n	8003b76 <__swbuf_r+0x64>

08003b8c <__swsetup_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <__swsetup_r+0xac>)
 8003b90:	4605      	mov	r5, r0
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	460c      	mov	r4, r1
 8003b96:	b118      	cbz	r0, 8003ba0 <__swsetup_r+0x14>
 8003b98:	6a03      	ldr	r3, [r0, #32]
 8003b9a:	b90b      	cbnz	r3, 8003ba0 <__swsetup_r+0x14>
 8003b9c:	f7ff fee4 	bl	8003968 <__sinit>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ba6:	0718      	lsls	r0, r3, #28
 8003ba8:	d422      	bmi.n	8003bf0 <__swsetup_r+0x64>
 8003baa:	06d9      	lsls	r1, r3, #27
 8003bac:	d407      	bmi.n	8003bbe <__swsetup_r+0x32>
 8003bae:	2309      	movs	r3, #9
 8003bb0:	602b      	str	r3, [r5, #0]
 8003bb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e034      	b.n	8003c28 <__swsetup_r+0x9c>
 8003bbe:	0758      	lsls	r0, r3, #29
 8003bc0:	d512      	bpl.n	8003be8 <__swsetup_r+0x5c>
 8003bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc4:	b141      	cbz	r1, 8003bd8 <__swsetup_r+0x4c>
 8003bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	d002      	beq.n	8003bd4 <__swsetup_r+0x48>
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 f8c0 	bl	8003d54 <_free_r>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6363      	str	r3, [r4, #52]	; 0x34
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	2300      	movs	r3, #0
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	6923      	ldr	r3, [r4, #16]
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	81a3      	strh	r3, [r4, #12]
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	b94b      	cbnz	r3, 8003c08 <__swsetup_r+0x7c>
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfe:	d003      	beq.n	8003c08 <__swsetup_r+0x7c>
 8003c00:	4621      	mov	r1, r4
 8003c02:	4628      	mov	r0, r5
 8003c04:	f000 f9c6 	bl	8003f94 <__smakebuf_r>
 8003c08:	89a0      	ldrh	r0, [r4, #12]
 8003c0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c0e:	f010 0301 	ands.w	r3, r0, #1
 8003c12:	d00a      	beq.n	8003c2a <__swsetup_r+0x9e>
 8003c14:	2300      	movs	r3, #0
 8003c16:	60a3      	str	r3, [r4, #8]
 8003c18:	6963      	ldr	r3, [r4, #20]
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	61a3      	str	r3, [r4, #24]
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	b943      	cbnz	r3, 8003c34 <__swsetup_r+0xa8>
 8003c22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c26:	d1c4      	bne.n	8003bb2 <__swsetup_r+0x26>
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	0781      	lsls	r1, r0, #30
 8003c2c:	bf58      	it	pl
 8003c2e:	6963      	ldrpl	r3, [r4, #20]
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	e7f4      	b.n	8003c1e <__swsetup_r+0x92>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f7      	b.n	8003c28 <__swsetup_r+0x9c>
 8003c38:	20000064 	.word	0x20000064

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_close_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4d06      	ldr	r5, [pc, #24]	; (8003c68 <_close_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	f7fc ffff 	bl	8000c5a <_close>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_close_r+0x1a>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_close_r+0x1a>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	200002e0 	.word	0x200002e0

08003c6c <_lseek_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4d07      	ldr	r5, [pc, #28]	; (8003c8c <_lseek_r+0x20>)
 8003c70:	4604      	mov	r4, r0
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	2200      	movs	r2, #0
 8003c78:	602a      	str	r2, [r5, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7fd f814 	bl	8000ca8 <_lseek>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_lseek_r+0x1e>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_lseek_r+0x1e>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	200002e0 	.word	0x200002e0

08003c90 <_read_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4d07      	ldr	r5, [pc, #28]	; (8003cb0 <_read_r+0x20>)
 8003c94:	4604      	mov	r4, r0
 8003c96:	4608      	mov	r0, r1
 8003c98:	4611      	mov	r1, r2
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	602a      	str	r2, [r5, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f7fc ffa2 	bl	8000be8 <_read>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_read_r+0x1e>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_read_r+0x1e>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	200002e0 	.word	0x200002e0

08003cb4 <_sbrk_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4d06      	ldr	r5, [pc, #24]	; (8003cd0 <_sbrk_r+0x1c>)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	f7fd f800 	bl	8000cc4 <_sbrk>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_sbrk_r+0x1a>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_sbrk_r+0x1a>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200002e0 	.word	0x200002e0

08003cd4 <_write_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	; (8003cf4 <_write_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fc ff9d 	bl	8000c22 <_write>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_write_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_write_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	200002e0 	.word	0x200002e0

08003cf8 <__errno>:
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <__errno+0x8>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000064 	.word	0x20000064

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x38>)
 8003d08:	4c0d      	ldr	r4, [pc, #52]	; (8003d40 <__libc_init_array+0x3c>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	4d0b      	ldr	r5, [pc, #44]	; (8003d44 <__libc_init_array+0x40>)
 8003d16:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x44>)
 8003d18:	f000 f99a 	bl	8004050 <_init>
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	2600      	movs	r6, #0
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	080040ac 	.word	0x080040ac
 8003d40:	080040ac 	.word	0x080040ac
 8003d44:	080040ac 	.word	0x080040ac
 8003d48:	080040b0 	.word	0x080040b0

08003d4c <__retarget_lock_init_recursive>:
 8003d4c:	4770      	bx	lr

08003d4e <__retarget_lock_acquire_recursive>:
 8003d4e:	4770      	bx	lr

08003d50 <__retarget_lock_release_recursive>:
 8003d50:	4770      	bx	lr
	...

08003d54 <_free_r>:
 8003d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d044      	beq.n	8003de4 <_free_r+0x90>
 8003d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5e:	9001      	str	r0, [sp, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f1a1 0404 	sub.w	r4, r1, #4
 8003d66:	bfb8      	it	lt
 8003d68:	18e4      	addlt	r4, r4, r3
 8003d6a:	f7ff fd65 	bl	8003838 <__malloc_lock>
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <_free_r+0x94>)
 8003d70:	9801      	ldr	r0, [sp, #4]
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	b933      	cbnz	r3, 8003d84 <_free_r+0x30>
 8003d76:	6063      	str	r3, [r4, #4]
 8003d78:	6014      	str	r4, [r2, #0]
 8003d7a:	b003      	add	sp, #12
 8003d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d80:	f7ff bd60 	b.w	8003844 <__malloc_unlock>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d908      	bls.n	8003d9a <_free_r+0x46>
 8003d88:	6825      	ldr	r5, [r4, #0]
 8003d8a:	1961      	adds	r1, r4, r5
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf01      	itttt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	1949      	addeq	r1, r1, r5
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	e7ed      	b.n	8003d76 <_free_r+0x22>
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b10b      	cbz	r3, 8003da4 <_free_r+0x50>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d9fa      	bls.n	8003d9a <_free_r+0x46>
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	1855      	adds	r5, r2, r1
 8003da8:	42a5      	cmp	r5, r4
 8003daa:	d10b      	bne.n	8003dc4 <_free_r+0x70>
 8003dac:	6824      	ldr	r4, [r4, #0]
 8003dae:	4421      	add	r1, r4
 8003db0:	1854      	adds	r4, r2, r1
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	d1e0      	bne.n	8003d7a <_free_r+0x26>
 8003db8:	681c      	ldr	r4, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	6053      	str	r3, [r2, #4]
 8003dbe:	440c      	add	r4, r1
 8003dc0:	6014      	str	r4, [r2, #0]
 8003dc2:	e7da      	b.n	8003d7a <_free_r+0x26>
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x78>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	6003      	str	r3, [r0, #0]
 8003dca:	e7d6      	b.n	8003d7a <_free_r+0x26>
 8003dcc:	6825      	ldr	r5, [r4, #0]
 8003dce:	1961      	adds	r1, r4, r5
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	bf04      	itt	eq
 8003dd4:	6819      	ldreq	r1, [r3, #0]
 8003dd6:	685b      	ldreq	r3, [r3, #4]
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	bf04      	itt	eq
 8003ddc:	1949      	addeq	r1, r1, r5
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	6054      	str	r4, [r2, #4]
 8003de2:	e7ca      	b.n	8003d7a <_free_r+0x26>
 8003de4:	b003      	add	sp, #12
 8003de6:	bd30      	pop	{r4, r5, pc}
 8003de8:	2000019c 	.word	0x2000019c

08003dec <__sflush_r>:
 8003dec:	898a      	ldrh	r2, [r1, #12]
 8003dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df2:	4605      	mov	r5, r0
 8003df4:	0710      	lsls	r0, r2, #28
 8003df6:	460c      	mov	r4, r1
 8003df8:	d458      	bmi.n	8003eac <__sflush_r+0xc0>
 8003dfa:	684b      	ldr	r3, [r1, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	dc05      	bgt.n	8003e0c <__sflush_r+0x20>
 8003e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	dc02      	bgt.n	8003e0c <__sflush_r+0x20>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e0e:	2e00      	cmp	r6, #0
 8003e10:	d0f9      	beq.n	8003e06 <__sflush_r+0x1a>
 8003e12:	2300      	movs	r3, #0
 8003e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e18:	682f      	ldr	r7, [r5, #0]
 8003e1a:	6a21      	ldr	r1, [r4, #32]
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	d032      	beq.n	8003e86 <__sflush_r+0x9a>
 8003e20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	075a      	lsls	r2, r3, #29
 8003e26:	d505      	bpl.n	8003e34 <__sflush_r+0x48>
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	1ac0      	subs	r0, r0, r3
 8003e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e2e:	b10b      	cbz	r3, 8003e34 <__sflush_r+0x48>
 8003e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e32:	1ac0      	subs	r0, r0, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	4602      	mov	r2, r0
 8003e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e3a:	6a21      	ldr	r1, [r4, #32]
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	47b0      	blx	r6
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	d106      	bne.n	8003e54 <__sflush_r+0x68>
 8003e46:	6829      	ldr	r1, [r5, #0]
 8003e48:	291d      	cmp	r1, #29
 8003e4a:	d82b      	bhi.n	8003ea4 <__sflush_r+0xb8>
 8003e4c:	4a29      	ldr	r2, [pc, #164]	; (8003ef4 <__sflush_r+0x108>)
 8003e4e:	410a      	asrs	r2, r1
 8003e50:	07d6      	lsls	r6, r2, #31
 8003e52:	d427      	bmi.n	8003ea4 <__sflush_r+0xb8>
 8003e54:	2200      	movs	r2, #0
 8003e56:	6062      	str	r2, [r4, #4]
 8003e58:	04d9      	lsls	r1, r3, #19
 8003e5a:	6922      	ldr	r2, [r4, #16]
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	d504      	bpl.n	8003e6a <__sflush_r+0x7e>
 8003e60:	1c42      	adds	r2, r0, #1
 8003e62:	d101      	bne.n	8003e68 <__sflush_r+0x7c>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b903      	cbnz	r3, 8003e6a <__sflush_r+0x7e>
 8003e68:	6560      	str	r0, [r4, #84]	; 0x54
 8003e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e6c:	602f      	str	r7, [r5, #0]
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	d0c9      	beq.n	8003e06 <__sflush_r+0x1a>
 8003e72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e76:	4299      	cmp	r1, r3
 8003e78:	d002      	beq.n	8003e80 <__sflush_r+0x94>
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff ff6a 	bl	8003d54 <_free_r>
 8003e80:	2000      	movs	r0, #0
 8003e82:	6360      	str	r0, [r4, #52]	; 0x34
 8003e84:	e7c0      	b.n	8003e08 <__sflush_r+0x1c>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b0      	blx	r6
 8003e8c:	1c41      	adds	r1, r0, #1
 8003e8e:	d1c8      	bne.n	8003e22 <__sflush_r+0x36>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0c5      	beq.n	8003e22 <__sflush_r+0x36>
 8003e96:	2b1d      	cmp	r3, #29
 8003e98:	d001      	beq.n	8003e9e <__sflush_r+0xb2>
 8003e9a:	2b16      	cmp	r3, #22
 8003e9c:	d101      	bne.n	8003ea2 <__sflush_r+0xb6>
 8003e9e:	602f      	str	r7, [r5, #0]
 8003ea0:	e7b1      	b.n	8003e06 <__sflush_r+0x1a>
 8003ea2:	89a3      	ldrh	r3, [r4, #12]
 8003ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	e7ad      	b.n	8003e08 <__sflush_r+0x1c>
 8003eac:	690f      	ldr	r7, [r1, #16]
 8003eae:	2f00      	cmp	r7, #0
 8003eb0:	d0a9      	beq.n	8003e06 <__sflush_r+0x1a>
 8003eb2:	0793      	lsls	r3, r2, #30
 8003eb4:	680e      	ldr	r6, [r1, #0]
 8003eb6:	bf08      	it	eq
 8003eb8:	694b      	ldreq	r3, [r1, #20]
 8003eba:	600f      	str	r7, [r1, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	eba6 0807 	sub.w	r8, r6, r7
 8003ec4:	608b      	str	r3, [r1, #8]
 8003ec6:	f1b8 0f00 	cmp.w	r8, #0
 8003eca:	dd9c      	ble.n	8003e06 <__sflush_r+0x1a>
 8003ecc:	6a21      	ldr	r1, [r4, #32]
 8003ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	47b0      	blx	r6
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	dc06      	bgt.n	8003eea <__sflush_r+0xfe>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	e78e      	b.n	8003e08 <__sflush_r+0x1c>
 8003eea:	4407      	add	r7, r0
 8003eec:	eba8 0800 	sub.w	r8, r8, r0
 8003ef0:	e7e9      	b.n	8003ec6 <__sflush_r+0xda>
 8003ef2:	bf00      	nop
 8003ef4:	dfbffffe 	.word	0xdfbffffe

08003ef8 <_fflush_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	4605      	mov	r5, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	b913      	cbnz	r3, 8003f08 <_fflush_r+0x10>
 8003f02:	2500      	movs	r5, #0
 8003f04:	4628      	mov	r0, r5
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	b118      	cbz	r0, 8003f12 <_fflush_r+0x1a>
 8003f0a:	6a03      	ldr	r3, [r0, #32]
 8003f0c:	b90b      	cbnz	r3, 8003f12 <_fflush_r+0x1a>
 8003f0e:	f7ff fd2b 	bl	8003968 <__sinit>
 8003f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f3      	beq.n	8003f02 <_fflush_r+0xa>
 8003f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f1c:	07d0      	lsls	r0, r2, #31
 8003f1e:	d404      	bmi.n	8003f2a <_fflush_r+0x32>
 8003f20:	0599      	lsls	r1, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <_fflush_r+0x32>
 8003f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f26:	f7ff ff12 	bl	8003d4e <__retarget_lock_acquire_recursive>
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	f7ff ff5d 	bl	8003dec <__sflush_r>
 8003f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f34:	07da      	lsls	r2, r3, #31
 8003f36:	4605      	mov	r5, r0
 8003f38:	d4e4      	bmi.n	8003f04 <_fflush_r+0xc>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	059b      	lsls	r3, r3, #22
 8003f3e:	d4e1      	bmi.n	8003f04 <_fflush_r+0xc>
 8003f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f42:	f7ff ff05 	bl	8003d50 <__retarget_lock_release_recursive>
 8003f46:	e7dd      	b.n	8003f04 <_fflush_r+0xc>

08003f48 <__swhatbuf_r>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f50:	2900      	cmp	r1, #0
 8003f52:	b096      	sub	sp, #88	; 0x58
 8003f54:	4615      	mov	r5, r2
 8003f56:	461e      	mov	r6, r3
 8003f58:	da0d      	bge.n	8003f76 <__swhatbuf_r+0x2e>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	bf0c      	ite	eq
 8003f66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f6a:	2340      	movne	r3, #64	; 0x40
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	6031      	str	r1, [r6, #0]
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	b016      	add	sp, #88	; 0x58
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	466a      	mov	r2, sp
 8003f78:	f000 f848 	bl	800400c <_fstat_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	dbec      	blt.n	8003f5a <__swhatbuf_r+0x12>
 8003f80:	9901      	ldr	r1, [sp, #4]
 8003f82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f8a:	4259      	negs	r1, r3
 8003f8c:	4159      	adcs	r1, r3
 8003f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f92:	e7eb      	b.n	8003f6c <__swhatbuf_r+0x24>

08003f94 <__smakebuf_r>:
 8003f94:	898b      	ldrh	r3, [r1, #12]
 8003f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f98:	079d      	lsls	r5, r3, #30
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	d507      	bpl.n	8003fb0 <__smakebuf_r+0x1c>
 8003fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	6123      	str	r3, [r4, #16]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	6163      	str	r3, [r4, #20]
 8003fac:	b002      	add	sp, #8
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	ab01      	add	r3, sp, #4
 8003fb2:	466a      	mov	r2, sp
 8003fb4:	f7ff ffc8 	bl	8003f48 <__swhatbuf_r>
 8003fb8:	9900      	ldr	r1, [sp, #0]
 8003fba:	4605      	mov	r5, r0
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f7ff fbbb 	bl	8003738 <_malloc_r>
 8003fc2:	b948      	cbnz	r0, 8003fd8 <__smakebuf_r+0x44>
 8003fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc8:	059a      	lsls	r2, r3, #22
 8003fca:	d4ef      	bmi.n	8003fac <__smakebuf_r+0x18>
 8003fcc:	f023 0303 	bic.w	r3, r3, #3
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	e7e3      	b.n	8003fa0 <__smakebuf_r+0xc>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	6020      	str	r0, [r4, #0]
 8003fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe0:	81a3      	strh	r3, [r4, #12]
 8003fe2:	9b00      	ldr	r3, [sp, #0]
 8003fe4:	6163      	str	r3, [r4, #20]
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	6120      	str	r0, [r4, #16]
 8003fea:	b15b      	cbz	r3, 8004004 <__smakebuf_r+0x70>
 8003fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f000 f81d 	bl	8004030 <_isatty_r>
 8003ff6:	b128      	cbz	r0, 8004004 <__smakebuf_r+0x70>
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	81a3      	strh	r3, [r4, #12]
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	431d      	orrs	r5, r3
 8004008:	81a5      	strh	r5, [r4, #12]
 800400a:	e7cf      	b.n	8003fac <__smakebuf_r+0x18>

0800400c <_fstat_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d07      	ldr	r5, [pc, #28]	; (800402c <_fstat_r+0x20>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	f7fc fe2a 	bl	8000c72 <_fstat>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	d102      	bne.n	8004028 <_fstat_r+0x1c>
 8004022:	682b      	ldr	r3, [r5, #0]
 8004024:	b103      	cbz	r3, 8004028 <_fstat_r+0x1c>
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	bd38      	pop	{r3, r4, r5, pc}
 800402a:	bf00      	nop
 800402c:	200002e0 	.word	0x200002e0

08004030 <_isatty_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	; (800404c <_isatty_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fc fe29 	bl	8000c92 <_isatty>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_isatty_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_isatty_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	200002e0 	.word	0x200002e0

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
