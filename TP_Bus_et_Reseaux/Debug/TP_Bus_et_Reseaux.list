
TP_Bus_et_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a514  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800a6e8  0800a6e8  0001a6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acbc  0800acbc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800acc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001f0  0800aeb4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800aeb4  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed85  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000250d  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  00032180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023504  00000000  00000000  00032b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011738  00000000  00000000  0005603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf452  00000000  00000000  00067776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a84  00000000  00000000  00136bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013b64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6cc 	.word	0x0800a6cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800a6cc 	.word	0x0800a6cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9f1 	b.w	80010ec <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a6 	b.w	80010ec <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	460f      	mov	r7, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0xe2>
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	b143      	cbz	r3, 8000e52 <__udivmoddi4+0x2e>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0220 	rsb	r2, r3, #32
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	409c      	lsls	r4, r3
 8000e52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e56:	fa1f f58c 	uxth.w	r5, ip
 8000e5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e5e:	0c22      	lsrs	r2, r4, #16
 8000e60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e68:	fb01 f005 	mul.w	r0, r1, r5
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e78:	f080 811c 	bcs.w	80010b4 <__udivmoddi4+0x290>
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	f240 8119 	bls.w	80010b4 <__udivmoddi4+0x290>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4462      	add	r2, ip
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	b2a4      	uxth	r4, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e96:	fb00 f505 	mul.w	r5, r0, r5
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d90a      	bls.n	8000eb4 <__udivmoddi4+0x90>
 8000e9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea6:	f080 8107 	bcs.w	80010b8 <__udivmoddi4+0x294>
 8000eaa:	42a5      	cmp	r5, r4
 8000eac:	f240 8104 	bls.w	80010b8 <__udivmoddi4+0x294>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11e      	cbz	r6, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40dc      	lsrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0xbc>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	f000 80ed 	beq.w	80010ae <__udivmoddi4+0x28a>
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eda:	4608      	mov	r0, r1
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	fab3 f183 	clz	r1, r3
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d149      	bne.n	8000f7c <__udivmoddi4+0x158>
 8000ee8:	42ab      	cmp	r3, r5
 8000eea:	d302      	bcc.n	8000ef2 <__udivmoddi4+0xce>
 8000eec:	4282      	cmp	r2, r0
 8000eee:	f200 80f8 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d0e2      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	e9c6 4700 	strd	r4, r7, [r6]
 8000f04:	e7df      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f06:	b902      	cbnz	r2, 8000f0a <__udivmoddi4+0xe6>
 8000f08:	deff      	udf	#255	; 0xff
 8000f0a:	fab2 f382 	clz	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8090 	bne.w	8001034 <__udivmoddi4+0x210>
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1a:	fa1f fe8c 	uxth.w	lr, ip
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f24:	fb07 2015 	mls	r0, r7, r5, r2
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f2e:	fb0e f005 	mul.w	r0, lr, r5
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x124>
 8000f36:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x122>
 8000f40:	4290      	cmp	r0, r2
 8000f42:	f200 80cb 	bhi.w	80010dc <__udivmoddi4+0x2b8>
 8000f46:	4645      	mov	r5, r8
 8000f48:	1a12      	subs	r2, r2, r0
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f50:	fb07 2210 	mls	r2, r7, r0, r2
 8000f54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f58:	fb0e fe00 	mul.w	lr, lr, r0
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x14e>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x14c>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f200 80bb 	bhi.w	80010e6 <__udivmoddi4+0x2c2>
 8000f70:	4610      	mov	r0, r2
 8000f72:	eba4 040e 	sub.w	r4, r4, lr
 8000f76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7a:	e79f      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f7c:	f1c1 0720 	rsb	r7, r1, #32
 8000f80:	408b      	lsls	r3, r1
 8000f82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f92:	40fd      	lsrs	r5, r7
 8000f94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f9e:	fa1f fe8c 	uxth.w	lr, ip
 8000fa2:	fb09 5518 	mls	r5, r9, r8, r5
 8000fa6:	0c1c      	lsrs	r4, r3, #16
 8000fa8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fac:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000fba:	d90b      	bls.n	8000fd4 <__udivmoddi4+0x1b0>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc4:	f080 8088 	bcs.w	80010d8 <__udivmoddi4+0x2b4>
 8000fc8:	42a5      	cmp	r5, r4
 8000fca:	f240 8085 	bls.w	80010d8 <__udivmoddi4+0x2b4>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	b29d      	uxth	r5, r3
 8000fd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x1da>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ff4:	d26c      	bcs.n	80010d0 <__udivmoddi4+0x2ac>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	d96a      	bls.n	80010d0 <__udivmoddi4+0x2ac>
 8000ffa:	3b02      	subs	r3, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001002:	fba3 9502 	umull	r9, r5, r3, r2
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	42ac      	cmp	r4, r5
 800100c:	46c8      	mov	r8, r9
 800100e:	46ae      	mov	lr, r5
 8001010:	d356      	bcc.n	80010c0 <__udivmoddi4+0x29c>
 8001012:	d053      	beq.n	80010bc <__udivmoddi4+0x298>
 8001014:	b156      	cbz	r6, 800102c <__udivmoddi4+0x208>
 8001016:	ebb0 0208 	subs.w	r2, r0, r8
 800101a:	eb64 040e 	sbc.w	r4, r4, lr
 800101e:	fa04 f707 	lsl.w	r7, r4, r7
 8001022:	40ca      	lsrs	r2, r1
 8001024:	40cc      	lsrs	r4, r1
 8001026:	4317      	orrs	r7, r2
 8001028:	e9c6 7400 	strd	r7, r4, [r6]
 800102c:	4618      	mov	r0, r3
 800102e:	2100      	movs	r1, #0
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	f1c3 0120 	rsb	r1, r3, #32
 8001038:	fa02 fc03 	lsl.w	ip, r2, r3
 800103c:	fa20 f201 	lsr.w	r2, r0, r1
 8001040:	fa25 f101 	lsr.w	r1, r5, r1
 8001044:	409d      	lsls	r5, r3
 8001046:	432a      	orrs	r2, r5
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fbb1 f0f7 	udiv	r0, r1, r7
 8001054:	fb07 1510 	mls	r5, r7, r0, r1
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800105e:	fb00 f50e 	mul.w	r5, r0, lr
 8001062:	428d      	cmp	r5, r1
 8001064:	fa04 f403 	lsl.w	r4, r4, r3
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x258>
 800106a:	eb1c 0101 	adds.w	r1, ip, r1
 800106e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001072:	d22f      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 8001074:	428d      	cmp	r5, r1
 8001076:	d92d      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 8001078:	3802      	subs	r0, #2
 800107a:	4461      	add	r1, ip
 800107c:	1b49      	subs	r1, r1, r5
 800107e:	b292      	uxth	r2, r2
 8001080:	fbb1 f5f7 	udiv	r5, r1, r7
 8001084:	fb07 1115 	mls	r1, r7, r5, r1
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	fb05 f10e 	mul.w	r1, r5, lr
 8001090:	4291      	cmp	r1, r2
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x282>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f105 38ff 	add.w	r8, r5, #4294967295
 800109c:	d216      	bcs.n	80010cc <__udivmoddi4+0x2a8>
 800109e:	4291      	cmp	r1, r2
 80010a0:	d914      	bls.n	80010cc <__udivmoddi4+0x2a8>
 80010a2:	3d02      	subs	r5, #2
 80010a4:	4462      	add	r2, ip
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010ac:	e738      	b.n	8000f20 <__udivmoddi4+0xfc>
 80010ae:	4631      	mov	r1, r6
 80010b0:	4630      	mov	r0, r6
 80010b2:	e708      	b.n	8000ec6 <__udivmoddi4+0xa2>
 80010b4:	4639      	mov	r1, r7
 80010b6:	e6e6      	b.n	8000e86 <__udivmoddi4+0x62>
 80010b8:	4610      	mov	r0, r2
 80010ba:	e6fb      	b.n	8000eb4 <__udivmoddi4+0x90>
 80010bc:	4548      	cmp	r0, r9
 80010be:	d2a9      	bcs.n	8001014 <__udivmoddi4+0x1f0>
 80010c0:	ebb9 0802 	subs.w	r8, r9, r2
 80010c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c8:	3b01      	subs	r3, #1
 80010ca:	e7a3      	b.n	8001014 <__udivmoddi4+0x1f0>
 80010cc:	4645      	mov	r5, r8
 80010ce:	e7ea      	b.n	80010a6 <__udivmoddi4+0x282>
 80010d0:	462b      	mov	r3, r5
 80010d2:	e794      	b.n	8000ffe <__udivmoddi4+0x1da>
 80010d4:	4640      	mov	r0, r8
 80010d6:	e7d1      	b.n	800107c <__udivmoddi4+0x258>
 80010d8:	46d0      	mov	r8, sl
 80010da:	e77b      	b.n	8000fd4 <__udivmoddi4+0x1b0>
 80010dc:	3d02      	subs	r5, #2
 80010de:	4462      	add	r2, ip
 80010e0:	e732      	b.n	8000f48 <__udivmoddi4+0x124>
 80010e2:	4608      	mov	r0, r1
 80010e4:	e70a      	b.n	8000efc <__udivmoddi4+0xd8>
 80010e6:	4464      	add	r4, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e742      	b.n	8000f72 <__udivmoddi4+0x14e>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <BMP280_check>:
float final_T;

/*This function enables to check whether we can communicate well with the sensor
 * as well as whether we can retrieve its address.
 */
int BMP280_check() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80010f6:	23d0      	movs	r3, #208	; 0xd0
 80010f8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80010fa:	23ee      	movs	r3, #238	; 0xee
 80010fc:	b299      	uxth	r1, r3
 80010fe:	1d3a      	adds	r2, r7, #4
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <BMP280_check+0x80>)
 800110a:	f002 f987 	bl	800341c <HAL_I2C_Master_Transmit>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <BMP280_check+0x84>)
 800111a:	f005 fe8b 	bl	8006e34 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 800111e:	23ee      	movs	r3, #238	; 0xee
 8001120:	b299      	uxth	r1, r3
 8001122:	2301      	movs	r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	1d3a      	adds	r2, r7, #4
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	9000      	str	r0, [sp, #0]
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <BMP280_check+0x80>)
 8001130:	f002 fa72 	bl	8003618 <HAL_I2C_Master_Receive>
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
	HAL_MAX_DELAY);
	if (ret != 0) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <BMP280_check+0x88>)
 8001140:	f005 fe78 	bl	8006e34 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8001144:	793b      	ldrb	r3, [r7, #4]
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <BMP280_check+0x8c>)
 800114a:	f005 fe0d 	bl	8006d68 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	2258      	movs	r2, #88	; 0x58
 8001152:	4293      	cmp	r3, r2
 8001154:	d104      	bne.n	8001160 <BMP280_check+0x70>
		printf("Ok\r\n");
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <BMP280_check+0x90>)
 8001158:	f005 fe6c 	bl	8006e34 <puts>
		return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e003      	b.n	8001168 <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <BMP280_check+0x94>)
 8001162:	f005 fe67 	bl	8006e34 <puts>
		return 1;
 8001166:	2301      	movs	r3, #1
	}
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000026c 	.word	0x2000026c
 8001174:	0800a6e8 	.word	0x0800a6e8
 8001178:	0800a70c 	.word	0x0800a70c
 800117c:	0800a730 	.word	0x0800a730
 8001180:	0800a73c 	.word	0x0800a73c
 8001184:	0800a740 	.word	0x0800a740

08001188 <BMP280_get_trimming>:

/* This function enables to retrieve the trimming registers, which will help use to compensate the pressure and the pressure.
 * (Please see functions bmp280_compensate_P_int64() and bmp280_compensate_T_int32()).
 */

int BMP280_get_trimming() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	buf = BMP280_Read_Reg(BMP280_TRIM_REG_MSB, BMP280_TRIM_LEN);
 800118e:	2388      	movs	r3, #136	; 0x88
 8001190:	2218      	movs	r2, #24
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f92b 	bl	80013f0 <BMP280_Read_Reg>
 800119a:	6078      	str	r0, [r7, #4]
	dig_T1 = (buf[0] | buf[1]<<8);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3301      	adds	r3, #1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <BMP280_get_trimming+0x160>)
 80011b4:	801a      	strh	r2, [r3, #0]
	dig_T2 = (buf[2] | buf[3]<<8);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3302      	adds	r3, #2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21a      	sxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3303      	adds	r3, #3
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <BMP280_get_trimming+0x164>)
 80011ce:	801a      	strh	r2, [r3, #0]
	dig_T3 = (buf[4] | buf[5]<<8);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3304      	adds	r3, #4
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3305      	adds	r3, #5
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <BMP280_get_trimming+0x168>)
 80011e8:	801a      	strh	r2, [r3, #0]
	dig_P1 = (buf[6] | buf[7]<<8);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3306      	adds	r3, #6
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3307      	adds	r3, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <BMP280_get_trimming+0x16c>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_P2 = (buf[8] | buf[9]<<8);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3308      	adds	r3, #8
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3309      	adds	r3, #9
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <BMP280_get_trimming+0x170>)
 800121e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (buf[10] | buf[11]<<8);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	330a      	adds	r3, #10
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b21a      	sxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	330b      	adds	r3, #11
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <BMP280_get_trimming+0x174>)
 8001238:	801a      	strh	r2, [r3, #0]
	dig_P4 = (buf[12] | buf[13]<<8);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	330c      	adds	r3, #12
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b21a      	sxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	330d      	adds	r3, #13
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21a      	sxth	r2, r3
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <BMP280_get_trimming+0x178>)
 8001252:	801a      	strh	r2, [r3, #0]
	dig_P5 = (buf[14] | buf[15]<<8);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	330e      	adds	r3, #14
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b21a      	sxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	330f      	adds	r3, #15
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <BMP280_get_trimming+0x17c>)
 800126c:	801a      	strh	r2, [r3, #0]
	dig_P6 = (buf[16] | buf[17]<<8);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3310      	adds	r3, #16
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b21a      	sxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3311      	adds	r3, #17
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <BMP280_get_trimming+0x180>)
 8001286:	801a      	strh	r2, [r3, #0]
	dig_P7 = (buf[18] | buf[19]<<8);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3312      	adds	r3, #18
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3313      	adds	r3, #19
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <BMP280_get_trimming+0x184>)
 80012a0:	801a      	strh	r2, [r3, #0]
	dig_P8 = (buf[20] | buf[21]<<8);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3314      	adds	r3, #20
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3315      	adds	r3, #21
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <BMP280_get_trimming+0x188>)
 80012ba:	801a      	strh	r2, [r3, #0]
	dig_P9 = (buf[22] | buf[23]<<8);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3316      	adds	r3, #22
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3317      	adds	r3, #23
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <BMP280_get_trimming+0x18c>)
 80012d4:	801a      	strh	r2, [r3, #0]
	free(buf);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fd5a 	bl	8005d90 <free>
	return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000020c 	.word	0x2000020c
 80012ec:	2000020e 	.word	0x2000020e
 80012f0:	20000210 	.word	0x20000210
 80012f4:	20000212 	.word	0x20000212
 80012f8:	20000214 	.word	0x20000214
 80012fc:	20000216 	.word	0x20000216
 8001300:	20000218 	.word	0x20000218
 8001304:	2000021a 	.word	0x2000021a
 8001308:	2000021c 	.word	0x2000021c
 800130c:	2000021e 	.word	0x2000021e
 8001310:	20000220 	.word	0x20000220
 8001314:	20000222 	.word	0x20000222

08001318 <BMP280_init>:

/* This function enables to set temperature resolution at 17 bit/0.0025 °C, pressure resolution
 * at 20 bit/0.16 Pa and to set the power mode to normal
 */
int BMP280_init() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 800131e:	2357      	movs	r3, #87	; 0x57
 8001320:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <BMP280_init+0x44>)
 8001324:	f005 fd86 	bl	8006e34 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8001328:	22f4      	movs	r2, #244	; 0xf4
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f000 f81a 	bl	8001368 <BMP280_Write_Reg>
 8001334:	4603      	mov	r3, r0
 8001336:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <BMP280_init+0x34>
		printf("Config Ok\r\n");
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <BMP280_init+0x48>)
 8001340:	f005 fd78 	bl	8006e34 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	BMP280_get_trimming();
 8001344:	f7ff ff20 	bl	8001188 <BMP280_get_trimming>
	return 0;
 8001348:	2300      	movs	r3, #0
 800134a:	e003      	b.n	8001354 <BMP280_init+0x3c>
		printf("Config not Ok!\r\n");
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <BMP280_init+0x4c>)
 800134e:	f005 fd71 	bl	8006e34 <puts>
		return 1;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800a74c 	.word	0x0800a74c
 8001360:	0800a75c 	.word	0x0800a75c
 8001364:	0800a768 	.word	0x0800a768

08001368 <BMP280_Write_Reg>:

/* This function is a general one used to modify a register of the BMP280 memory.
 */

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8001380:	23ee      	movs	r3, #238	; 0xee
 8001382:	b299      	uxth	r1, r3
 8001384:	f107 020c 	add.w	r2, r7, #12
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <BMP280_Write_Reg+0x7c>)
 8001392:	f002 f843 	bl	800341c <HAL_I2C_Master_Transmit>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <BMP280_Write_Reg+0x80>)
 80013a2:	f005 fd47 	bl	8006e34 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80013a6:	23ee      	movs	r3, #238	; 0xee
 80013a8:	b299      	uxth	r1, r3
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <BMP280_Write_Reg+0x7c>)
 80013b8:	f002 f92e 	bl	8003618 <HAL_I2C_Master_Receive>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <BMP280_Write_Reg+0x84>)
 80013c8:	f005 fd34 	bl	8006e34 <puts>
	}

	if (buf[0] == value) {
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	79ba      	ldrb	r2, [r7, #6]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d101      	bne.n	80013d8 <BMP280_Write_Reg+0x70>
		return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80013d8:	2301      	movs	r3, #1
	}
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000026c 	.word	0x2000026c
 80013e8:	0800a778 	.word	0x0800a778
 80013ec:	0800a794 	.word	0x0800a794

080013f0 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001400:	23ee      	movs	r3, #238	; 0xee
 8001402:	b299      	uxth	r1, r3
 8001404:	1dfa      	adds	r2, r7, #7
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <BMP280_Read_Reg+0x70>)
 8001410:	f002 f804 	bl	800341c <HAL_I2C_Master_Transmit>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 800141e:	4811      	ldr	r0, [pc, #68]	; (8001464 <BMP280_Read_Reg+0x74>)
 8001420:	f005 fd08 	bl	8006e34 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fcaa 	bl	8005d80 <malloc>
 800142c:	4603      	mov	r3, r0
 800142e:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8001430:	23ee      	movs	r3, #238	; 0xee
 8001432:	b299      	uxth	r1, r3
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <BMP280_Read_Reg+0x70>)
 8001442:	f002 f8e9 	bl	8003618 <HAL_I2C_Master_Receive>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (ret != 0) {
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <BMP280_Read_Reg+0x78>)
 8001452:	f005 fcef 	bl	8006e34 <puts>
	}

	return buf;
 8001456:	68bb      	ldr	r3, [r7, #8]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000026c 	.word	0x2000026c
 8001464:	0800a778 	.word	0x0800a778
 8001468:	0800a794 	.word	0x0800a794

0800146c <BMP280_get_temperature>:

/* This function enables to retrieve the non compensated temperature.
 */

BMP280_S32_t BMP280_get_temperature() {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8001472:	23fa      	movs	r3, #250	; 0xfa
 8001474:	2203      	movs	r2, #3
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffb9 	bl	80013f0 <BMP280_Read_Reg>
 800147e:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	031a      	lsls	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	3202      	adds	r2, #2
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0912      	lsrs	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800149a:	4313      	orrs	r3, r2
 800149c:	603b      	str	r3, [r7, #0]

	free(buf);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f004 fc76 	bl	8005d90 <free>

//	printf("Non compensated temperature: ");
//	printf("0X%05lX", adc_T);
//	printf("\r\n");

	return adc_T;
 80014a4:	683b      	ldr	r3, [r7, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <BMP280_get_pressure>:
/* This function enables to retrieve the non compensated pressure.
 */

BMP280_S32_t BMP280_get_pressure() {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80014b4:	23f7      	movs	r3, #247	; 0xf7
 80014b6:	2203      	movs	r2, #3
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff98 	bl	80013f0 <BMP280_Read_Reg>
 80014c0:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	031a      	lsls	r2, r3, #12
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3301      	adds	r3, #1
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	3202      	adds	r2, #2
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	0912      	lsrs	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80014dc:	4313      	orrs	r3, r2
 80014de:	603b      	str	r3, [r7, #0]

	free(buf);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f004 fc55 	bl	8005d90 <free>

//	printf("Pressure:    0x");
//	printf("%05lX", adc_P);
//	printf("\r\n");

	return adc_P;
 80014e6:	683b      	ldr	r3, [r7, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <bmp280_compensate_T_int32>:

// This function returns temperature with 0.01 deg_C resolution.
float bmp280_compensate_T_int32() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
	BMP280_S32_t adc_T = BMP280_get_temperature();
 80014f6:	f7ff ffb9 	bl	800146c <BMP280_get_temperature>
 80014fa:	60f8      	str	r0, [r7, #12]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((BMP280_S32_t) dig_T1 << 1)))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	10da      	asrs	r2, r3, #3
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <bmp280_compensate_T_int32+0xb8>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	1ad3      	subs	r3, r2, r3
			* ((BMP280_S32_t) dig_T2)) >> 11;
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <bmp280_compensate_T_int32+0xbc>)
 800150a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_T >> 3) - ((BMP280_S32_t) dig_T1 << 1)))
 8001512:	12db      	asrs	r3, r3, #11
 8001514:	60bb      	str	r3, [r7, #8]
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t) dig_T1))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	111b      	asrs	r3, r3, #4
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <bmp280_compensate_T_int32+0xb8>)
 800151c:	8812      	ldrh	r2, [r2, #0]
 800151e:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((BMP280_S32_t) dig_T1))) >> 12)
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	1112      	asrs	r2, r2, #4
 8001524:	4920      	ldr	r1, [pc, #128]	; (80015a8 <bmp280_compensate_T_int32+0xb8>)
 8001526:	8809      	ldrh	r1, [r1, #0]
 8001528:	1a52      	subs	r2, r2, r1
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	131b      	asrs	r3, r3, #12
			* ((BMP280_S32_t) dig_T3)) >> 14;
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <bmp280_compensate_T_int32+0xc0>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((BMP280_S32_t) dig_T1))
 800153a:	139b      	asrs	r3, r3, #14
 800153c:	607b      	str	r3, [r7, #4]
	t_fine = var1 + var2;
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <bmp280_compensate_T_int32+0xc4>)
 8001546:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <bmp280_compensate_T_int32+0xc4>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3380      	adds	r3, #128	; 0x80
 8001554:	121b      	asrs	r3, r3, #8
 8001556:	603b      	str	r3, [r7, #0]
	final_T = 0.01*T;
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f7ff f813 	bl	8000584 <__aeabi_i2d>
 800155e:	a310      	add	r3, pc, #64	; (adr r3, 80015a0 <bmp280_compensate_T_int32+0xb0>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f878 	bl	8000658 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb6a 	bl	8000c48 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <bmp280_compensate_T_int32+0xc8>)
 8001578:	6013      	str	r3, [r2, #0]
	printf("T=+%.2f_C\r\n",final_T);
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <bmp280_compensate_T_int32+0xc8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f812 	bl	80005a8 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <bmp280_compensate_T_int32+0xcc>)
 800158a:	f005 fbed 	bl	8006d68 <iprintf>
	return final_T;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <bmp280_compensate_T_int32+0xc8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	ee07 3a90 	vmov	s15, r3
}
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	47ae147b 	.word	0x47ae147b
 80015a4:	3f847ae1 	.word	0x3f847ae1
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	2000020e 	.word	0x2000020e
 80015b0:	20000210 	.word	0x20000210
 80015b4:	20000224 	.word	0x20000224
 80015b8:	2000022c 	.word	0x2000022c
 80015bc:	0800a7b0 	.word	0x0800a7b0

080015c0 <bmp280_compensate_P_int64>:

// This function returns pressure in Pa as unsigned 32 bit integer.
uint32_t bmp280_compensate_P_int64() {
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	b0ca      	sub	sp, #296	; 0x128
 80015c6:	af00      	add	r7, sp, #0
	BMP280_S32_t adc_P = BMP280_get_pressure();
 80015c8:	f7ff ff71 	bl	80014ae <BMP280_get_pressure>
 80015cc:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t) t_fine) - 128000;
 80015d0:	4baf      	ldr	r3, [pc, #700]	; (8001890 <bmp280_compensate_P_int64+0x2d0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	17da      	asrs	r2, r3, #31
 80015d6:	461c      	mov	r4, r3
 80015d8:	4615      	mov	r5, r2
 80015da:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015de:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015e2:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
	var2 = var1 * var1 * (BMP280_S64_t) dig_P6;
 80015e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015ee:	fb03 f102 	mul.w	r1, r3, r2
 80015f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	18ca      	adds	r2, r1, r3
 8001600:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001604:	fba3 8903 	umull	r8, r9, r3, r3
 8001608:	eb02 0309 	add.w	r3, r2, r9
 800160c:	4699      	mov	r9, r3
 800160e:	4ba1      	ldr	r3, [pc, #644]	; (8001894 <bmp280_compensate_P_int64+0x2d4>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	b21b      	sxth	r3, r3
 8001616:	17da      	asrs	r2, r3, #31
 8001618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800161c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001620:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001624:	4603      	mov	r3, r0
 8001626:	fb03 f209 	mul.w	r2, r3, r9
 800162a:	460b      	mov	r3, r1
 800162c:	fb08 f303 	mul.w	r3, r8, r3
 8001630:	4413      	add	r3, r2
 8001632:	4602      	mov	r2, r0
 8001634:	fba8 1202 	umull	r1, r2, r8, r2
 8001638:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800163c:	460a      	mov	r2, r1
 800163e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001646:	4413      	add	r3, r2
 8001648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800164c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001650:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8001654:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	var2 = var2 + ((var1 * (BMP280_S64_t) dig_P5) << 17);
 8001658:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <bmp280_compensate_P_int64+0x2d8>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b21b      	sxth	r3, r3
 8001660:	17da      	asrs	r2, r3, #31
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001666:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800166a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800166e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001672:	462a      	mov	r2, r5
 8001674:	fb02 f203 	mul.w	r2, r2, r3
 8001678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800167c:	4621      	mov	r1, r4
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	441a      	add	r2, r3
 8001684:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001688:	4621      	mov	r1, r4
 800168a:	fba3 1301 	umull	r1, r3, r3, r1
 800168e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001692:	460b      	mov	r3, r1
 8001694:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016ae:	462b      	mov	r3, r5
 80016b0:	0459      	lsls	r1, r3, #17
 80016b2:	4623      	mov	r3, r4
 80016b4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80016b8:	4623      	mov	r3, r4
 80016ba:	0458      	lsls	r0, r3, #17
 80016bc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80016c0:	1814      	adds	r4, r2, r0
 80016c2:	643c      	str	r4, [r7, #64]	; 0x40
 80016c4:	414b      	adcs	r3, r1
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
 80016c8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016cc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	var2 = var2 + (((BMP280_S64_t) dig_P4) << 35);
 80016d0:	4b72      	ldr	r3, [pc, #456]	; (800189c <bmp280_compensate_P_int64+0x2dc>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	17da      	asrs	r2, r3, #31
 80016da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016de:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ee:	00d9      	lsls	r1, r3, #3
 80016f0:	2000      	movs	r0, #0
 80016f2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80016f6:	1814      	adds	r4, r2, r0
 80016f8:	63bc      	str	r4, [r7, #56]	; 0x38
 80016fa:	414b      	adcs	r3, r1
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001702:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	var1 = ((var1 * var1 * (BMP280_S64_t) dig_P3) >> 8)
 8001706:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800170a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800170e:	fb03 f102 	mul.w	r1, r3, r2
 8001712:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001716:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	18ca      	adds	r2, r1, r3
 8001720:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001724:	fba3 1303 	umull	r1, r3, r3, r3
 8001728:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800172c:	460b      	mov	r3, r1
 800172e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001736:	18d3      	adds	r3, r2, r3
 8001738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <bmp280_compensate_P_int64+0x2e0>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	b21b      	sxth	r3, r3
 8001744:	17da      	asrs	r2, r3, #31
 8001746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800174a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800174e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001752:	462b      	mov	r3, r5
 8001754:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001758:	4642      	mov	r2, r8
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	464b      	mov	r3, r9
 8001760:	4621      	mov	r1, r4
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	4622      	mov	r2, r4
 800176a:	4641      	mov	r1, r8
 800176c:	fba2 1201 	umull	r1, r2, r2, r1
 8001770:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001774:	460a      	mov	r2, r1
 8001776:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800177a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800177e:	4413      	add	r3, r2
 8001780:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001784:	f04f 0000 	mov.w	r0, #0
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001790:	4623      	mov	r3, r4
 8001792:	0a18      	lsrs	r0, r3, #8
 8001794:	462b      	mov	r3, r5
 8001796:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800179a:	462b      	mov	r3, r5
 800179c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (BMP280_S64_t) dig_P2) << 12);
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <bmp280_compensate_P_int64+0x2e4>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	17da      	asrs	r2, r3, #31
 80017a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017b4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80017b8:	464a      	mov	r2, r9
 80017ba:	fb02 f203 	mul.w	r2, r2, r3
 80017be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80017c2:	4644      	mov	r4, r8
 80017c4:	fb04 f303 	mul.w	r3, r4, r3
 80017c8:	441a      	add	r2, r3
 80017ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017ce:	4644      	mov	r4, r8
 80017d0:	fba3 4304 	umull	r4, r3, r3, r4
 80017d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017d8:	4623      	mov	r3, r4
 80017da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017f4:	464c      	mov	r4, r9
 80017f6:	0323      	lsls	r3, r4, #12
 80017f8:	4644      	mov	r4, r8
 80017fa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017fe:	4644      	mov	r4, r8
 8001800:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (BMP280_S64_t) dig_P3) >> 8)
 8001802:	1884      	adds	r4, r0, r2
 8001804:	633c      	str	r4, [r7, #48]	; 0x30
 8001806:	eb41 0303 	adc.w	r3, r1, r3
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
 800180c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001810:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = (((((BMP280_S64_t) 1) << 47) + var1)) * ((BMP280_S64_t) dig_P1)
 8001814:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001818:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800181c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001820:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <bmp280_compensate_P_int64+0x2e8>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	2200      	movs	r2, #0
 800182c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001830:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001834:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001838:	462b      	mov	r3, r5
 800183a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800183e:	4642      	mov	r2, r8
 8001840:	fb02 f203 	mul.w	r2, r2, r3
 8001844:	464b      	mov	r3, r9
 8001846:	4621      	mov	r1, r4
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	4622      	mov	r2, r4
 8001850:	4641      	mov	r1, r8
 8001852:	fba2 1201 	umull	r1, r2, r2, r1
 8001856:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800185a:	460a      	mov	r2, r1
 800185c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001860:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001864:	4413      	add	r3, r2
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001876:	4629      	mov	r1, r5
 8001878:	104a      	asrs	r2, r1, #1
 800187a:	4629      	mov	r1, r5
 800187c:	17cb      	asrs	r3, r1, #31
 800187e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			>> 33;
	if (var1 == 0) {
 8001882:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001886:	4313      	orrs	r3, r2
 8001888:	d110      	bne.n	80018ac <bmp280_compensate_P_int64+0x2ec>
		return 0; // avoid exception caused by division by zero
 800188a:	2300      	movs	r3, #0
 800188c:	e15f      	b.n	8001b4e <bmp280_compensate_P_int64+0x58e>
 800188e:	bf00      	nop
 8001890:	20000224 	.word	0x20000224
 8001894:	2000021c 	.word	0x2000021c
 8001898:	2000021a 	.word	0x2000021a
 800189c:	20000218 	.word	0x20000218
 80018a0:	20000216 	.word	0x20000216
 80018a4:	20000214 	.word	0x20000214
 80018a8:	20000212 	.word	0x20000212
	}
	p = 1048576 - adc_P;
 80018ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018be:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p = (((p << 31) - var2) * 3125) / var1;
 80018c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018c6:	105b      	asrs	r3, r3, #1
 80018c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018d0:	07db      	lsls	r3, r3, #31
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018d6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018da:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018de:	4621      	mov	r1, r4
 80018e0:	1a89      	subs	r1, r1, r2
 80018e2:	67b9      	str	r1, [r7, #120]	; 0x78
 80018e4:	4629      	mov	r1, r5
 80018e6:	eb61 0303 	sbc.w	r3, r1, r3
 80018ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018ec:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018f0:	4622      	mov	r2, r4
 80018f2:	462b      	mov	r3, r5
 80018f4:	1891      	adds	r1, r2, r2
 80018f6:	6239      	str	r1, [r7, #32]
 80018f8:	415b      	adcs	r3, r3
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001900:	4621      	mov	r1, r4
 8001902:	1851      	adds	r1, r2, r1
 8001904:	61b9      	str	r1, [r7, #24]
 8001906:	4629      	mov	r1, r5
 8001908:	414b      	adcs	r3, r1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001918:	4649      	mov	r1, r9
 800191a:	018b      	lsls	r3, r1, #6
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001922:	4641      	mov	r1, r8
 8001924:	018a      	lsls	r2, r1, #6
 8001926:	4641      	mov	r1, r8
 8001928:	1889      	adds	r1, r1, r2
 800192a:	6139      	str	r1, [r7, #16]
 800192c:	4649      	mov	r1, r9
 800192e:	eb43 0101 	adc.w	r1, r3, r1
 8001932:	6179      	str	r1, [r7, #20]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001940:	4649      	mov	r1, r9
 8001942:	008b      	lsls	r3, r1, #2
 8001944:	4641      	mov	r1, r8
 8001946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800194a:	4641      	mov	r1, r8
 800194c:	008a      	lsls	r2, r1, #2
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	4603      	mov	r3, r0
 8001954:	4622      	mov	r2, r4
 8001956:	189b      	adds	r3, r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	460b      	mov	r3, r1
 800195c:	462a      	mov	r2, r5
 800195e:	eb42 0303 	adc.w	r3, r2, r3
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001970:	4649      	mov	r1, r9
 8001972:	008b      	lsls	r3, r1, #2
 8001974:	4641      	mov	r1, r8
 8001976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800197a:	4641      	mov	r1, r8
 800197c:	008a      	lsls	r2, r1, #2
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	4603      	mov	r3, r0
 8001984:	4622      	mov	r2, r4
 8001986:	189b      	adds	r3, r3, r2
 8001988:	673b      	str	r3, [r7, #112]	; 0x70
 800198a:	462b      	mov	r3, r5
 800198c:	460a      	mov	r2, r1
 800198e:	eb42 0303 	adc.w	r3, r2, r3
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
 8001994:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001998:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800199c:	f7ff f9a4 	bl	8000ce8 <__aeabi_ldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	var1 = (((BMP280_S64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <bmp280_compensate_P_int64+0x59c>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	17da      	asrs	r2, r3, #31
 80019b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80019b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019b6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0b50      	lsrs	r0, r2, #13
 80019c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019c8:	1359      	asrs	r1, r3, #13
 80019ca:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019ce:	462b      	mov	r3, r5
 80019d0:	fb00 f203 	mul.w	r2, r0, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	fb03 f301 	mul.w	r3, r3, r1
 80019da:	4413      	add	r3, r2
 80019dc:	4622      	mov	r2, r4
 80019de:	fba2 1200 	umull	r1, r2, r2, r0
 80019e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019e6:	460a      	mov	r2, r1
 80019e8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019f0:	4413      	add	r3, r2
 80019f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019f6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0b50      	lsrs	r0, r2, #13
 8001a04:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a08:	1359      	asrs	r1, r3, #13
 8001a0a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001a0e:	462b      	mov	r3, r5
 8001a10:	fb00 f203 	mul.w	r2, r0, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	fb03 f301 	mul.w	r3, r3, r1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4622      	mov	r2, r4
 8001a1e:	fba2 1200 	umull	r1, r2, r2, r0
 8001a22:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a26:	460a      	mov	r2, r1
 8001a28:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a30:	4413      	add	r3, r2
 8001a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a42:	4621      	mov	r1, r4
 8001a44:	0e4a      	lsrs	r2, r1, #25
 8001a46:	4629      	mov	r1, r5
 8001a48:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	164b      	asrs	r3, r1, #25
 8001a50:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var2 = (((BMP280_S64_t) dig_P8) * p) >> 19;
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <bmp280_compensate_P_int64+0x5a0>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	17da      	asrs	r2, r3, #31
 8001a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a60:	667a      	str	r2, [r7, #100]	; 0x64
 8001a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a6a:	462a      	mov	r2, r5
 8001a6c:	fb02 f203 	mul.w	r2, r2, r3
 8001a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a74:	4621      	mov	r1, r4
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001a80:	4621      	mov	r1, r4
 8001a82:	fba2 1201 	umull	r1, r2, r2, r1
 8001a86:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a90:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a94:	4413      	add	r3, r2
 8001a96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	0cca      	lsrs	r2, r1, #19
 8001aaa:	4629      	mov	r1, r5
 8001aac:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	14cb      	asrs	r3, r1, #19
 8001ab4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t) dig_P7) << 4);
 8001ab8:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001abc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ac0:	1884      	adds	r4, r0, r2
 8001ac2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ac4:	eb41 0303 	adc.w	r3, r1, r3
 8001ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ace:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	1889      	adds	r1, r1, r2
 8001ad6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ad8:	4629      	mov	r1, r5
 8001ada:	eb43 0101 	adc.w	r1, r3, r1
 8001ade:	6579      	str	r1, [r7, #84]	; 0x54
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001aec:	4623      	mov	r3, r4
 8001aee:	0a18      	lsrs	r0, r3, #8
 8001af0:	462b      	mov	r3, r5
 8001af2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001af6:	462b      	mov	r3, r5
 8001af8:	1219      	asrs	r1, r3, #8
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <bmp280_compensate_P_int64+0x5a4>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b14:	464c      	mov	r4, r9
 8001b16:	0123      	lsls	r3, r4, #4
 8001b18:	4644      	mov	r4, r8
 8001b1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b1e:	4644      	mov	r4, r8
 8001b20:	0122      	lsls	r2, r4, #4
 8001b22:	1884      	adds	r4, r0, r2
 8001b24:	603c      	str	r4, [r7, #0]
 8001b26:	eb41 0303 	adc.w	r3, r1, r3
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b30:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	final_P = (uint32_t) p/256;
 8001b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <bmp280_compensate_P_int64+0x5a8>)
 8001b3c:	6013      	str	r3, [r2, #0]
	printf("P=%ldPa\r\n",final_P);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <bmp280_compensate_P_int64+0x5a8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <bmp280_compensate_P_int64+0x5ac>)
 8001b46:	f005 f90f 	bl	8006d68 <iprintf>
	return final_P;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <bmp280_compensate_P_int64+0x5a8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000222 	.word	0x20000222
 8001b60:	20000220 	.word	0x20000220
 8001b64:	2000021e 	.word	0x2000021e
 8001b68:	20000228 	.word	0x20000228
 8001b6c:	0800a7bc 	.word	0x0800a7bc

08001b70 <interface_stm32_raspberrypi>:

/* This function enables to retrieve the orders of the Raspberry transmitted via the serial port.
 * We call the function HAL_UART_Receive_IT in the HAL_UART_RxCpltCallback to reset the interruption.
 */

void interface_stm32_raspberrypi(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

	if (uartRxReceived) {
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <interface_stm32_raspberrypi+0xd0>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05f      	beq.n	8001c3c <interface_stm32_raspberrypi+0xcc>
		if (strcmp(short_uartRxBuffer, "GET_T") == 0) {
 8001b7c:	4931      	ldr	r1, [pc, #196]	; (8001c44 <interface_stm32_raspberrypi+0xd4>)
 8001b7e:	4832      	ldr	r0, [pc, #200]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001b80:	f7fe fb46 	bl	8000210 <strcmp>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <interface_stm32_raspberrypi+0x1e>
			bmp280_compensate_T_int32();
 8001b8a:	f7ff fcb1 	bl	80014f0 <bmp280_compensate_T_int32>
		}
		if (strcmp(short_uartRxBuffer, "GET_P") == 0) {
 8001b8e:	492f      	ldr	r1, [pc, #188]	; (8001c4c <interface_stm32_raspberrypi+0xdc>)
 8001b90:	482d      	ldr	r0, [pc, #180]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001b92:	f7fe fb3d 	bl	8000210 <strcmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <interface_stm32_raspberrypi+0x30>
			bmp280_compensate_P_int64();
 8001b9c:	f7ff fd10 	bl	80015c0 <bmp280_compensate_P_int64>
		}
		if (strcmp(short_uartRxBuffer, "SET_K") == 0) {
 8001ba0:	492b      	ldr	r1, [pc, #172]	; (8001c50 <interface_stm32_raspberrypi+0xe0>)
 8001ba2:	4829      	ldr	r0, [pc, #164]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001ba4:	f7fe fb34 	bl	8000210 <strcmp>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <interface_stm32_raspberrypi+0x44>
			set_k_command_received = 1;
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <interface_stm32_raspberrypi+0xe4>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(short_uartRxBuffer[0], "=") == 0) {
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4927      	ldr	r1, [pc, #156]	; (8001c58 <interface_stm32_raspberrypi+0xe8>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb28 	bl	8000210 <strcmp>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d117      	bne.n	8001bf6 <interface_stm32_raspberrypi+0x86>
			if (set_k_command_received) {
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <interface_stm32_raspberrypi+0xe4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d013      	beq.n	8001bf6 <interface_stm32_raspberrypi+0x86>
				token = strtok(short_uartRxBuffer, "=");
 8001bce:	4922      	ldr	r1, [pc, #136]	; (8001c58 <interface_stm32_raspberrypi+0xe8>)
 8001bd0:	481d      	ldr	r0, [pc, #116]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001bd2:	f005 fa37 	bl	8007044 <strtok>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <interface_stm32_raspberrypi+0xec>)
 8001bda:	6013      	str	r3, [r2, #0]
				K = *token;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <interface_stm32_raspberrypi+0xec>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <interface_stm32_raspberrypi+0xf0>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]
				printf("SET_K=OK\r\n");
 8001bf0:	481c      	ldr	r0, [pc, #112]	; (8001c64 <interface_stm32_raspberrypi+0xf4>)
 8001bf2:	f005 f91f 	bl	8006e34 <puts>
			}
		}
		if (strcmp(short_uartRxBuffer, "GET_K") == 0) {
 8001bf6:	491c      	ldr	r1, [pc, #112]	; (8001c68 <interface_stm32_raspberrypi+0xf8>)
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001bfa:	f7fe fb09 	bl	8000210 <strcmp>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <interface_stm32_raspberrypi+0xa8>
			printf("K=%.5f\r\n", K);
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <interface_stm32_raspberrypi+0xf0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fccd 	bl	80005a8 <__aeabi_f2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4816      	ldr	r0, [pc, #88]	; (8001c6c <interface_stm32_raspberrypi+0xfc>)
 8001c14:	f005 f8a8 	bl	8006d68 <iprintf>
		}
		if (strcmp(short_uartRxBuffer, "GET_A") == 0) {
 8001c18:	4915      	ldr	r1, [pc, #84]	; (8001c70 <interface_stm32_raspberrypi+0x100>)
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <interface_stm32_raspberrypi+0xd8>)
 8001c1c:	f7fe faf8 	bl	8000210 <strcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <interface_stm32_raspberrypi+0xc2>
			printf("A=%d\r\n", angle);
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <interface_stm32_raspberrypi+0x104>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <interface_stm32_raspberrypi+0x108>)
 8001c2e:	f005 f89b 	bl	8006d68 <iprintf>
		}
		uartRxReceived = 0;
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <interface_stm32_raspberrypi+0xd0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
		act_on_radiator(); // defined in USER CODE # 4 of the main.c file
 8001c38:	f000 fa02 	bl	8002040 <act_on_radiator>
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000230 	.word	0x20000230
 8001c44:	0800a7c8 	.word	0x0800a7c8
 8001c48:	20000234 	.word	0x20000234
 8001c4c:	0800a7d0 	.word	0x0800a7d0
 8001c50:	0800a7d8 	.word	0x0800a7d8
 8001c54:	20000231 	.word	0x20000231
 8001c58:	0800a7e0 	.word	0x0800a7e0
 8001c5c:	20000240 	.word	0x20000240
 8001c60:	2000023c 	.word	0x2000023c
 8001c64:	0800a7e4 	.word	0x0800a7e4
 8001c68:	0800a7f0 	.word	0x0800a7f0
 8001c6c:	0800a7f8 	.word	0x0800a7f8
 8001c70:	0800a804 	.word	0x0800a804
 8001c74:	20000000 	.word	0x20000000
 8001c78:	0800a80c 	.word	0x0800a80c

08001c7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_UART_RxCpltCallback+0x20>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, short_uartRxBuffer, SHORT_UART_RX_BUFFER_SIZE);
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_UART_RxCpltCallback+0x24>)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_RxCpltCallback+0x28>)
 8001c90:	f003 f8dd 	bl	8004e4e <HAL_UART_Receive_IT>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000230 	.word	0x20000230
 8001ca0:	20000234 	.word	0x20000234
 8001ca4:	200002c0 	.word	0x200002c0

08001ca8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	test_frame_forward[0] = 0x54; // 90 degreees angles
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <main+0x60>)
 8001cae:	2254      	movs	r2, #84	; 0x54
 8001cb0:	701a      	strb	r2, [r3, #0]
	test_frame_forward[1] = 0x00; // in the forward direction
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <main+0x60>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
	test_frame_reverse[0] = 0x54;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <main+0x64>)
 8001cba:	2254      	movs	r2, #84	; 0x54
 8001cbc:	701a      	strb	r2, [r3, #0]
	test_frame_reverse[1] = 0x01;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <main+0x64>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001cc4:	f000 fc88 	bl	80025d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cc8:	f000 f828 	bl	8001d1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ccc:	f000 f94a 	bl	8001f64 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001cd0:	f000 f91e 	bl	8001f10 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001cd4:	f000 f8c4 	bl	8001e60 <MX_I2C1_Init>
	MX_CAN1_Init();
 8001cd8:	f000 f88c 	bl	8001df4 <MX_CAN1_Init>
	MX_USART1_UART_Init();
 8001cdc:	f000 f8ee 	bl	8001ebc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <main+0x68>)
 8001ce2:	f000 fde6 	bl	80028b2 <HAL_CAN_Start>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <main+0x48>
		Error_Handler();
 8001cec:	f000 f9ea 	bl	80020c4 <Error_Handler>

	HAL_UART_Receive_IT(&huart1, short_uartRxBuffer, SHORT_UART_RX_BUFFER_SIZE); // authorizes interruptions from the serial port
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <main+0x6c>)
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <main+0x70>)
 8001cf6:	f003 f8aa 	bl	8004e4e <HAL_UART_Receive_IT>
	// which is used to retrieve the orders from the Raspberry (please see the explanation of the interface_stm32_raspberrypi()
	// function.

	BMP280_check();
 8001cfa:	f7ff f9f9 	bl	80010f0 <BMP280_check>
	BMP280_init();
 8001cfe:	f7ff fb0b 	bl	8001318 <BMP280_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		interface_stm32_raspberrypi();
 8001d02:	f7ff ff35 	bl	8001b70 <interface_stm32_raspberrypi>
 8001d06:	e7fc      	b.n	8001d02 <main+0x5a>
 8001d08:	20000348 	.word	0x20000348
 8001d0c:	2000034c 	.word	0x2000034c
 8001d10:	20000244 	.word	0x20000244
 8001d14:	20000234 	.word	0x20000234
 8001d18:	200002c0 	.word	0x200002c0

08001d1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2234      	movs	r2, #52	; 0x34
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 f982 	bl	8007034 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <SystemClock_Config+0xd0>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <SystemClock_Config+0xd0>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <SystemClock_Config+0xd0>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d84:	2310      	movs	r3, #16
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001d90:	2308      	movs	r3, #8
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001d94:	2350      	movs	r3, #80	; 0x50
 8001d96:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fcd3 	bl	8004754 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x9c>
		Error_Handler();
 8001db4:	f000 f986 	bl	80020c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001db8:	230f      	movs	r3, #15
 8001dba:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 f973 	bl	80040c0 <HAL_RCC_ClockConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0xc8>
		Error_Handler();
 8001de0:	f000 f970 	bl	80020c4 <Error_Handler>
	}
}
 8001de4:	bf00      	nop
 8001de6:	3750      	adds	r7, #80	; 0x50
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000

08001df4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <MX_CAN1_Init+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e00:	2210      	movs	r2, #16
 8001e02:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e16:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e1e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_CAN1_Init+0x64>)
 8001e46:	f000 fc39 	bl	80026bc <HAL_CAN_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_CAN1_Init+0x60>
		Error_Handler();
 8001e50:	f000 f938 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000244 	.word	0x20000244
 8001e5c:	40006400 	.word	0x40006400

08001e60 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e66:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <MX_I2C1_Init+0x54>)
 8001e68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <MX_I2C1_Init+0x58>)
 8001e6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e82:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e9c:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <MX_I2C1_Init+0x50>)
 8001e9e:	f001 f979 	bl	8003194 <HAL_I2C_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001ea8:	f000 f90c 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000026c 	.word	0x2000026c
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	000186a0 	.word	0x000186a0

08001ebc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_USART1_UART_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	f002 fecc 	bl	8004c90 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001efe:	f000 f8e1 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200002c0 	.word	0x200002c0
 8001f0c:	40011000 	.word	0x40011000

08001f10 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f48:	f002 fea2 	bl	8004c90 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001f52:	f000 f8b7 	bl	80020c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000304 	.word	0x20000304
 8001f60:	40004400 	.word	0x40004400

08001f64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a25      	ldr	r2, [pc, #148]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_GPIO_Init+0xd0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2120      	movs	r1, #32
 8001fee:	4812      	ldr	r0, [pc, #72]	; (8002038 <MX_GPIO_Init+0xd4>)
 8001ff0:	f001 f8b6 	bl	8003160 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ffe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	480c      	ldr	r0, [pc, #48]	; (800203c <MX_GPIO_Init+0xd8>)
 800200c:	f000 ff14 	bl	8002e38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002010:	2320      	movs	r3, #32
 8002012:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_GPIO_Init+0xd4>)
 8002028:	f000 ff06 	bl	8002e38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020800 	.word	0x40020800

08002040 <act_on_radiator>:

/* USER CODE BEGIN 4 */
int act_on_radiator(void) {
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	if (final_T > 22) { // let's close the hot water arrival
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <act_on_radiator+0x6c>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	dd0d      	ble.n	8002074 <act_on_radiator+0x34>
		if (HAL_CAN_AddTxMessage(&hcan1, &automatic_mode_test,
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <act_on_radiator+0x70>)
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <act_on_radiator+0x74>)
 800205c:	4916      	ldr	r1, [pc, #88]	; (80020b8 <act_on_radiator+0x78>)
 800205e:	4817      	ldr	r0, [pc, #92]	; (80020bc <act_on_radiator+0x7c>)
 8002060:	f000 fc6b 	bl	800293a <HAL_CAN_AddTxMessage>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <act_on_radiator+0x34>
				test_frame_forward, &test_mail_box) != HAL_OK) {
			Error_Handler();
 800206a:	f000 f82b 	bl	80020c4 <Error_Handler>
			return -1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e018      	b.n	80020a6 <act_on_radiator+0x66>
		}
	}
	if (final_T < 16) { // let's open the hot water arrival
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <act_on_radiator+0x6c>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800207e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	d50d      	bpl.n	80020a4 <act_on_radiator+0x64>
		if (HAL_CAN_AddTxMessage(&hcan1, &automatic_mode_test,
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <act_on_radiator+0x70>)
 800208a:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <act_on_radiator+0x80>)
 800208c:	490a      	ldr	r1, [pc, #40]	; (80020b8 <act_on_radiator+0x78>)
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <act_on_radiator+0x7c>)
 8002090:	f000 fc53 	bl	800293a <HAL_CAN_AddTxMessage>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <act_on_radiator+0x64>
				test_frame_reverse, &test_mail_box) != HAL_OK) {
			Error_Handler();
 800209a:	f000 f813 	bl	80020c4 <Error_Handler>
			return -1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e000      	b.n	80020a6 <act_on_radiator+0x66>
		}
	}
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000022c 	.word	0x2000022c
 80020b0:	20000350 	.word	0x20000350
 80020b4:	20000348 	.word	0x20000348
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000244 	.word	0x20000244
 80020c0:	2000034c 	.word	0x2000034c

080020c4 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>
	...

080020d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_MspInit+0x4c>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_MspInit+0x4c>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800210e:	2007      	movs	r0, #7
 8002110:	f000 fdbe 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_CAN_MspInit+0x84>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12c      	bne.n	800219c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_CAN_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800217a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800218c:	2309      	movs	r3, #9
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_CAN_MspInit+0x8c>)
 8002198:	f000 fe4e 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800219c:	bf00      	nop
 800219e:	3728      	adds	r7, #40	; 0x28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40006400 	.word	0x40006400
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020400 	.word	0x40020400

080021b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_I2C_MspInit+0x84>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12b      	bne.n	800222a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_I2C_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_I2C_MspInit+0x88>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_I2C_MspInit+0x88>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021fe:	2304      	movs	r3, #4
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <HAL_I2C_MspInit+0x8c>)
 800220a:	f000 fe15 	bl	8002e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_I2C_MspInit+0x88>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_I2C_MspInit+0x88>)
 8002218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_I2C_MspInit+0x88>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40005400 	.word	0x40005400
 8002238:	40023800 	.word	0x40023800
 800223c:	40020400 	.word	0x40020400

08002240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a36      	ldr	r2, [pc, #216]	; (8002338 <HAL_UART_MspInit+0xf8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d135      	bne.n	80022ce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a34      	ldr	r2, [pc, #208]	; (800233c <HAL_UART_MspInit+0xfc>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800229a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ac:	2307      	movs	r3, #7
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	4822      	ldr	r0, [pc, #136]	; (8002340 <HAL_UART_MspInit+0x100>)
 80022b8:	f000 fdbe 	bl	8002e38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	2025      	movs	r0, #37	; 0x25
 80022c2:	f000 fcf0 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022c6:	2025      	movs	r0, #37	; 0x25
 80022c8:	f000 fd09 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022cc:	e030      	b.n	8002330 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_UART_MspInit+0x104>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d12b      	bne.n	8002330 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_UART_MspInit+0xfc>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <HAL_UART_MspInit+0xfc>)
 80022e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UART_MspInit+0xfc>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_UART_MspInit+0xfc>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_UART_MspInit+0xfc>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_UART_MspInit+0xfc>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002310:	230c      	movs	r3, #12
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002320:	2307      	movs	r3, #7
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_UART_MspInit+0x100>)
 800232c:	f000 fd84 	bl	8002e38 <HAL_GPIO_Init>
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40011000 	.word	0x40011000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40004400 	.word	0x40004400

08002348 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002350:	1d39      	adds	r1, r7, #4
 8002352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002356:	2201      	movs	r2, #1
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <__io_putchar+0x20>)
 800235a:	f002 fce6 	bl	8004d2a <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000304 	.word	0x20000304

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f000 f960 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <USART1_IRQHandler+0x10>)
 80023c6:	f002 fd73 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//  uartRxReceived = 1;
//  printf("Flag changed\r\n");
  /* USER CODE END USART1_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200002c0 	.word	0x200002c0

080023d4 <_getpid>:
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	2301      	movs	r3, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_kill>:
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	f004 fedf 	bl	80071b0 <__errno>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2216      	movs	r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_exit>:
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffe7 	bl	80023e4 <_kill>
 8002416:	e7fe      	b.n	8002416 <_exit+0x12>

08002418 <_read>:
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e00a      	b.n	8002440 <_read+0x28>
 800242a:	f3af 8000 	nop.w
 800242e:	4601      	mov	r1, r0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60ba      	str	r2, [r7, #8]
 8002436:	b2ca      	uxtb	r2, r1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbf0      	blt.n	800242a <_read+0x12>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_write>:
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e009      	b.n	8002478 <_write+0x26>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	60ba      	str	r2, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff6b 	bl	8002348 <__io_putchar>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	dbf1      	blt.n	8002464 <_write+0x12>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_close>:
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_fstat>:
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_isatty>:
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	2301      	movs	r3, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_lseek>:
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	2300      	movs	r3, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <_sbrk>:
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
 8002524:	f004 fe44 	bl	80071b0 <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20020000 	.word	0x20020000
 8002554:	00000400 	.word	0x00000400
 8002558:	20000354 	.word	0x20000354
 800255c:	200004a8 	.word	0x200004a8

08002560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <Reset_Handler>:
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025bc <LoopFillZerobss+0x12>
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <LoopFillZerobss+0x16>)
 800258a:	490e      	ldr	r1, [pc, #56]	; (80025c4 <LoopFillZerobss+0x1a>)
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1e>)
 800258e:	2300      	movs	r3, #0
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:
 8002592:	58d4      	ldr	r4, [r2, r3]
 8002594:	50c4      	str	r4, [r0, r3]
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:
 8002598:	18c4      	adds	r4, r0, r3
 800259a:	428c      	cmp	r4, r1
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <LoopFillZerobss+0x22>)
 80025a0:	4c0b      	ldr	r4, [pc, #44]	; (80025d0 <LoopFillZerobss+0x26>)
 80025a2:	2300      	movs	r3, #0
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:
 80025aa:	42a2      	cmp	r2, r4
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>
 80025ae:	f7ff ffd7 	bl	8002560 <SystemInit>
 80025b2:	f004 fe03 	bl	80071bc <__libc_init_array>
 80025b6:	f7ff fb77 	bl	8001ca8 <main>
 80025ba:	4770      	bx	lr
 80025bc:	20020000 	.word	0x20020000
 80025c0:	20000000 	.word	0x20000000
 80025c4:	200001f0 	.word	0x200001f0
 80025c8:	0800acc4 	.word	0x0800acc4
 80025cc:	200001f0 	.word	0x200001f0
 80025d0:	200004a8 	.word	0x200004a8

080025d4 <ADC_IRQHandler>:
 80025d4:	e7fe      	b.n	80025d4 <ADC_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <HAL_Init+0x40>)
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <HAL_Init+0x40>)
 80025ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_Init+0x40>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002600:	2003      	movs	r0, #3
 8002602:	f000 fb45 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002606:	2000      	movs	r0, #0
 8002608:	f000 f808 	bl	800261c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800260c:	f7ff fd60 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00

0800261c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x54>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x58>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fb5d 	bl	8002cfa <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00e      	b.n	8002668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d80a      	bhi.n	8002666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f000 fb25 	bl	8002ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_InitTick+0x5c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000001c 	.word	0x2000001c
 8002674:	20000024 	.word	0x20000024
 8002678:	20000020 	.word	0x20000020

0800267c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000024 	.word	0x20000024
 80026a0:	20000358 	.word	0x20000358

080026a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000358 	.word	0x20000358

080026bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0ed      	b.n	80028aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fd20 	bl	8002120 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f0:	f7ff ffd8 	bl	80026a4 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026f6:	e012      	b.n	800271e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026f8:	f7ff ffd4 	bl	80026a4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d90b      	bls.n	800271e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2205      	movs	r2, #5
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0c5      	b.n	80028aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0e5      	beq.n	80026f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0202 	bic.w	r2, r2, #2
 800273a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800273c:	f7ff ffb2 	bl	80026a4 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002742:	e012      	b.n	800276a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002744:	f7ff ffae 	bl	80026a4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d90b      	bls.n	800276a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2205      	movs	r2, #5
 8002762:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e09f      	b.n	80028aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7e5b      	ldrb	r3, [r3, #25]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7e9b      	ldrb	r3, [r3, #26]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d108      	bne.n	80027e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e007      	b.n	80027f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0220 	bic.w	r2, r2, #32
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7edb      	ldrb	r3, [r3, #27]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0210 	bic.w	r2, r2, #16
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e007      	b.n	8002820 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0210 	orr.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7f1b      	ldrb	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d108      	bne.n	800283a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e007      	b.n	800284a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0208 	bic.w	r2, r2, #8
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f5b      	ldrb	r3, [r3, #29]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0204 	orr.w	r2, r2, #4
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e007      	b.n	8002874 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d12e      	bne.n	8002924 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7ff fee1 	bl	80026a4 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e4:	e012      	b.n	800290c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e6:	f7ff fedd 	bl	80026a4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b0a      	cmp	r3, #10
 80028f2:	d90b      	bls.n	800290c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2205      	movs	r2, #5
 8002904:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e012      	b.n	8002932 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800293a:	b480      	push	{r7}
 800293c:	b089      	sub	sp, #36	; 0x24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d003      	beq.n	8002966 <HAL_CAN_AddTxMessage+0x2c>
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 80b8 	bne.w	8002ad6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a0 	beq.w	8002ac6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	0e1b      	lsrs	r3, r3, #24
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d907      	bls.n	80029a6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09e      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029a6:	2201      	movs	r2, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	6809      	ldr	r1, [r1, #0]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3318      	adds	r3, #24
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	440b      	add	r3, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00f      	b.n	80029f4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3318      	adds	r3, #24
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3318      	adds	r3, #24
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	440b      	add	r3, r1
 8002a04:	3304      	adds	r3, #4
 8002a06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	7d1b      	ldrb	r3, [r3, #20]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d111      	bne.n	8002a34 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3318      	adds	r3, #24
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	3304      	adds	r3, #4
 8002a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3307      	adds	r3, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	061a      	lsls	r2, r3, #24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3306      	adds	r3, #6
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3305      	adds	r3, #5
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	3204      	adds	r2, #4
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	4610      	mov	r0, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	ea43 0200 	orr.w	r2, r3, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3303      	adds	r3, #3
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	061a      	lsls	r2, r3, #24
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3302      	adds	r3, #2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3301      	adds	r3, #1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	4313      	orrs	r3, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	ea43 0200 	orr.w	r2, r3, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6811      	ldr	r1, [r2, #0]
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3318      	adds	r3, #24
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e00e      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e006      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3724      	adds	r7, #36	; 0x24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff3e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff31 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff fcc0 	bl	80026a4 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d008      	beq.n	8002d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e052      	b.n	8002dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0216 	bic.w	r2, r2, #22
 8002d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_DMA_Abort+0x62>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0208 	bic.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d94:	e013      	b.n	8002dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d96:	f7ff fc85 	bl	80026a4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d90c      	bls.n	8002dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2203      	movs	r2, #3
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e015      	b.n	8002dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e4      	bne.n	8002d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	223f      	movs	r2, #63	; 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e00c      	b.n	8002e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e165      	b.n	8003120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f040 8154 	bne.w	800311a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d005      	beq.n	8002e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d130      	bne.n	8002eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0201 	and.w	r2, r3, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d123      	bne.n	8002f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ae 	beq.w	800311a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fda:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_GPIO_Init+0x304>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x308>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d025      	beq.n	8003052 <HAL_GPIO_Init+0x21a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4e      	ldr	r2, [pc, #312]	; (8003144 <HAL_GPIO_Init+0x30c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01f      	beq.n	800304e <HAL_GPIO_Init+0x216>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <HAL_GPIO_Init+0x310>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0x212>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x314>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_GPIO_Init+0x318>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_GPIO_Init+0x20a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x31c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x206>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_GPIO_Init+0x320>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_GPIO_Init+0x202>
 8003036:	2306      	movs	r3, #6
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303a:	2307      	movs	r3, #7
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x304>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_GPIO_Init+0x324>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <HAL_GPIO_Init+0x324>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_GPIO_Init+0x324>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_GPIO_Init+0x324>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_GPIO_Init+0x324>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_GPIO_Init+0x324>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_GPIO_Init+0x324>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_GPIO_Init+0x324>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae96 	bls.w	8002e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e12b      	b.n	80033fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fff8 	bl	80021b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f8:	f001 f854 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a81      	ldr	r2, [pc, #516]	; (8003408 <HAL_I2C_Init+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d807      	bhi.n	8003218 <HAL_I2C_Init+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a80      	ldr	r2, [pc, #512]	; (800340c <HAL_I2C_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e006      	b.n	8003226 <HAL_I2C_Init+0x92>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a7d      	ldr	r2, [pc, #500]	; (8003410 <HAL_I2C_Init+0x27c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_I2C_Init+0x280>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a6a      	ldr	r2, [pc, #424]	; (8003408 <HAL_I2C_Init+0x274>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <HAL_I2C_Init+0xd4>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	e009      	b.n	800327c <HAL_I2C_Init+0xe8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a69      	ldr	r2, [pc, #420]	; (8003418 <HAL_I2C_Init+0x284>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800328e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	495c      	ldr	r1, [pc, #368]	; (8003408 <HAL_I2C_Init+0x274>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d819      	bhi.n	80032d0 <HAL_I2C_Init+0x13c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e59      	subs	r1, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_I2C_Init+0x138>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	e051      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e04f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_I2C_Init+0x168>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Init+0x18e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e58      	subs	r0, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x196>
 8003326:	2301      	movs	r3, #1
 8003328:	e022      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_I2C_Init+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e58      	subs	r0, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	fbb0 f3f3 	udiv	r3, r0, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6809      	ldr	r1, [r1, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800339e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6911      	ldr	r1, [r2, #16]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	000186a0 	.word	0x000186a0
 800340c:	001e847f 	.word	0x001e847f
 8003410:	003d08ff 	.word	0x003d08ff
 8003414:	431bde83 	.word	0x431bde83
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff f938 	bl	80026a4 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80e0 	bne.w	8003604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4970      	ldr	r1, [pc, #448]	; (8003610 <HAL_I2C_Master_Transmit+0x1f4>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc58 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0d3      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Transmit+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_I2C_Master_Transmit+0x1f8>)
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fac2 	bl	8003a64 <I2C_MasterRequestWrite>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003500:	e066      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fcd2 	bl	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fcc2 	bl	8003f32 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d194      	bne.n	8003502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7ff f83a 	bl	80026a4 <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	f040 820b 	bne.w	8003a56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	497c      	ldr	r1, [pc, #496]	; (800383c <HAL_I2C_Master_Receive+0x224>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fb5a 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	e1fe      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2C_Master_Receive+0x50>
 8003664:	2302      	movs	r3, #2
 8003666:	e1f7      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d007      	beq.n	800368e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2222      	movs	r2, #34	; 0x22
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2210      	movs	r2, #16
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_I2C_Master_Receive+0x228>)
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa46 	bl	8003b68 <I2C_MasterRequestRead>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1b8      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d113      	bne.n	8003716 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e18c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	2b01      	cmp	r3, #1
 800371c:	d11b      	bne.n	8003756 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e16c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	2b02      	cmp	r3, #2
 800375c:	d11b      	bne.n	8003796 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	e14c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037bc:	e138      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	f200 80f1 	bhi.w	80039aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d123      	bne.n	8003818 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fbed 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e139      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003816:	e10b      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b02      	cmp	r3, #2
 800381e:	d14e      	bne.n	80038be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	4906      	ldr	r1, [pc, #24]	; (8003844 <HAL_I2C_Master_Receive+0x22c>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa6a 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e10e      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
 800383a:	bf00      	nop
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000
 8003844:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038bc:	e0b8      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2200      	movs	r2, #0
 80038c6:	4966      	ldr	r1, [pc, #408]	; (8003a60 <HAL_I2C_Master_Receive+0x448>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa1b 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0bf      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	494f      	ldr	r1, [pc, #316]	; (8003a60 <HAL_I2C_Master_Receive+0x448>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f9ed 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e091      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a8:	e042      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fb00 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e04c      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d118      	bne.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f aec2 	bne.w	80037be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	; 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	00010004 	.word	0x00010004

08003a64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	460b      	mov	r3, r1
 8003a72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d006      	beq.n	8003a8e <I2C_MasterRequestWrite+0x2a>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d003      	beq.n	8003a8e <I2C_MasterRequestWrite+0x2a>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a8c:	d108      	bne.n	8003aa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e00b      	b.n	8003ab8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	2b12      	cmp	r3, #18
 8003aa6:	d107      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f91d 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	d103      	bne.n	8003ae8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e035      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af4:	d108      	bne.n	8003b08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e01b      	b.n	8003b40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	11db      	asrs	r3, r3, #7
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f063 030f 	orn	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	490e      	ldr	r1, [pc, #56]	; (8003b60 <I2C_MasterRequestWrite+0xfc>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f943 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e010      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <I2C_MasterRequestWrite+0x100>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f933 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010008 	.word	0x00010008
 8003b64:	00010002 	.word	0x00010002

08003b68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	460b      	mov	r3, r1
 8003b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d006      	beq.n	8003ba2 <I2C_MasterRequestRead+0x3a>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d003      	beq.n	8003ba2 <I2C_MasterRequestRead+0x3a>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba0:	d108      	bne.n	8003bb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00b      	b.n	8003bcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b11      	cmp	r3, #17
 8003bba:	d107      	bne.n	8003bcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f893 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d103      	bne.n	8003bfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e079      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d108      	bne.n	8003c1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	e05f      	b.n	8003cdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	11db      	asrs	r3, r3, #7
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f063 030f 	orn	r3, r3, #15
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4930      	ldr	r1, [pc, #192]	; (8003cfc <I2C_MasterRequestRead+0x194>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8b9 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e054      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4929      	ldr	r1, [pc, #164]	; (8003d00 <I2C_MasterRequestRead+0x198>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8a9 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e044      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f831 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d103      	bne.n	8003cc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e017      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	11db      	asrs	r3, r3, #7
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f063 030e 	orn	r3, r3, #14
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <I2C_MasterRequestRead+0x198>)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f865 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00010008 	.word	0x00010008
 8003d00:	00010002 	.word	0x00010002

08003d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d14:	e025      	b.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d021      	beq.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fcc1 	bl	80026a4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e023      	b.n	8003daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10d      	bne.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	e00c      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0b6      	beq.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc0:	e051      	b.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d123      	bne.n	8003e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e046      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d021      	beq.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fc3f 	bl	80026a4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e020      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d18d      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebc:	e02d      	b.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8ce 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fbe5 	bl	80026a4 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b80      	cmp	r3, #128	; 0x80
 8003f26:	d1ca      	bne.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f3e:	e02d      	b.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f88d 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02d      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d021      	beq.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fe fba4 	bl	80026a4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e007      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d1ca      	bne.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc0:	e042      	b.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d119      	bne.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0210 	mvn.w	r2, #16
 8003fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e029      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe fb4e 	bl	80026a4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d1b5      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d11b      	bne.n	80040b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fe fa78 	bl	80026a4 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fe fa74 	bl	80026a4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f855 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe f9d8 	bl	800261c <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	0800a814 	.word	0x0800a814
 8004284:	2000001c 	.word	0x2000001c
 8004288:	20000020 	.word	0x20000020

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	2000001c 	.word	0x2000001c

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800a824 	.word	0x0800a824

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042d0:	f7ff ffdc 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0b5b      	lsrs	r3, r3, #13
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800a824 	.word	0x0800a824

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0ae      	sub	sp, #184	; 0xb8
 80042fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431a:	4bcb      	ldr	r3, [pc, #812]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b0c      	cmp	r3, #12
 8004324:	f200 8206 	bhi.w	8004734 <HAL_RCC_GetSysClockFreq+0x440>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_RCC_GetSysClockFreq+0x3c>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004365 	.word	0x08004365
 8004334:	08004735 	.word	0x08004735
 8004338:	08004735 	.word	0x08004735
 800433c:	08004735 	.word	0x08004735
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004735 	.word	0x08004735
 8004348:	08004735 	.word	0x08004735
 800434c:	08004735 	.word	0x08004735
 8004350:	08004375 	.word	0x08004375
 8004354:	08004735 	.word	0x08004735
 8004358:	08004735 	.word	0x08004735
 800435c:	08004735 	.word	0x08004735
 8004360:	08004565 	.word	0x08004565
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4bb9      	ldr	r3, [pc, #740]	; (800464c <HAL_RCC_GetSysClockFreq+0x358>)
 8004366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800436a:	e1e7      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4bb8      	ldr	r3, [pc, #736]	; (8004650 <HAL_RCC_GetSysClockFreq+0x35c>)
 800436e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004372:	e1e3      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004374:	4bb4      	ldr	r3, [pc, #720]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004380:	4bb1      	ldr	r3, [pc, #708]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d071      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4bae      	ldr	r3, [pc, #696]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004398:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800439c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4621      	mov	r1, r4
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	6439      	str	r1, [r7, #64]	; 0x40
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80043e4:	4649      	mov	r1, r9
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4641      	mov	r1, r8
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4641      	mov	r1, r8
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4641      	mov	r1, r8
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f8:	4649      	mov	r1, r9
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800440c:	4649      	mov	r1, r9
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4641      	mov	r1, r8
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4622      	mov	r2, r4
 8004422:	189b      	adds	r3, r3, r2
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
 8004426:	462b      	mov	r3, r5
 8004428:	460a      	mov	r2, r1
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800443c:	4629      	mov	r1, r5
 800443e:	024b      	lsls	r3, r1, #9
 8004440:	4621      	mov	r1, r4
 8004442:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004446:	4621      	mov	r1, r4
 8004448:	024a      	lsls	r2, r1, #9
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800445c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004460:	f7fc fc92 	bl	8000d88 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800446e:	e067      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004470:	4b75      	ldr	r3, [pc, #468]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800447c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	67bb      	str	r3, [r7, #120]	; 0x78
 800448a:	2300      	movs	r3, #0
 800448c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800448e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4621      	mov	r1, r4
 80044ac:	1a51      	subs	r1, r2, r1
 80044ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80044b0:	4629      	mov	r1, r5
 80044b2:	eb63 0301 	sbc.w	r3, r3, r1
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80044c4:	4649      	mov	r1, r9
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	4641      	mov	r1, r8
 80044ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ce:	4641      	mov	r1, r8
 80044d0:	018a      	lsls	r2, r1, #6
 80044d2:	4641      	mov	r1, r8
 80044d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d8:	4649      	mov	r1, r9
 80044da:	eb63 0b01 	sbc.w	fp, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f2:	4692      	mov	sl, r2
 80044f4:	469b      	mov	fp, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb1a 0303 	adds.w	r3, sl, r3
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	462b      	mov	r3, r5
 8004500:	eb4b 0303 	adc.w	r3, fp, r3
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004512:	4629      	mov	r1, r5
 8004514:	028b      	lsls	r3, r1, #10
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800451c:	4621      	mov	r1, r4
 800451e:	028a      	lsls	r2, r1, #10
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004528:	2200      	movs	r2, #0
 800452a:	673b      	str	r3, [r7, #112]	; 0x70
 800452c:	677a      	str	r2, [r7, #116]	; 0x74
 800452e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004532:	f7fc fc29 	bl	8000d88 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4613      	mov	r3, r2
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004540:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004562:	e0eb      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004564:	4b38      	ldr	r3, [pc, #224]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d06b      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	2200      	movs	r2, #0
 8004584:	66bb      	str	r3, [r7, #104]	; 0x68
 8004586:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	663b      	str	r3, [r7, #96]	; 0x60
 8004590:	2300      	movs	r3, #0
 8004592:	667b      	str	r3, [r7, #100]	; 0x64
 8004594:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004598:	4622      	mov	r2, r4
 800459a:	462b      	mov	r3, r5
 800459c:	f04f 0000 	mov.w	r0, #0
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	0159      	lsls	r1, r3, #5
 80045a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045aa:	0150      	lsls	r0, r2, #5
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4621      	mov	r1, r4
 80045b2:	1a51      	subs	r1, r2, r1
 80045b4:	61b9      	str	r1, [r7, #24]
 80045b6:	4629      	mov	r1, r5
 80045b8:	eb63 0301 	sbc.w	r3, r3, r1
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045ca:	4659      	mov	r1, fp
 80045cc:	018b      	lsls	r3, r1, #6
 80045ce:	4651      	mov	r1, sl
 80045d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045d4:	4651      	mov	r1, sl
 80045d6:	018a      	lsls	r2, r1, #6
 80045d8:	4651      	mov	r1, sl
 80045da:	ebb2 0801 	subs.w	r8, r2, r1
 80045de:	4659      	mov	r1, fp
 80045e0:	eb63 0901 	sbc.w	r9, r3, r1
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f8:	4690      	mov	r8, r2
 80045fa:	4699      	mov	r9, r3
 80045fc:	4623      	mov	r3, r4
 80045fe:	eb18 0303 	adds.w	r3, r8, r3
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	462b      	mov	r3, r5
 8004606:	eb49 0303 	adc.w	r3, r9, r3
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004618:	4629      	mov	r1, r5
 800461a:	024b      	lsls	r3, r1, #9
 800461c:	4621      	mov	r1, r4
 800461e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004622:	4621      	mov	r1, r4
 8004624:	024a      	lsls	r2, r1, #9
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800462e:	2200      	movs	r2, #0
 8004630:	65bb      	str	r3, [r7, #88]	; 0x58
 8004632:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004638:	f7fc fba6 	bl	8000d88 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004646:	e065      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x420>
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004654:	4b3d      	ldr	r3, [pc, #244]	; (800474c <HAL_RCC_GetSysClockFreq+0x458>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	2200      	movs	r2, #0
 800465c:	4618      	mov	r0, r3
 800465e:	4611      	mov	r1, r2
 8004660:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004664:	653b      	str	r3, [r7, #80]	; 0x50
 8004666:	2300      	movs	r3, #0
 8004668:	657b      	str	r3, [r7, #84]	; 0x54
 800466a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	0159      	lsls	r1, r3, #5
 800467c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004680:	0150      	lsls	r0, r2, #5
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4641      	mov	r1, r8
 8004688:	1a51      	subs	r1, r2, r1
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4649      	mov	r1, r9
 800468e:	eb63 0301 	sbc.w	r3, r3, r1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046a0:	4659      	mov	r1, fp
 80046a2:	018b      	lsls	r3, r1, #6
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046aa:	4651      	mov	r1, sl
 80046ac:	018a      	lsls	r2, r1, #6
 80046ae:	4651      	mov	r1, sl
 80046b0:	1a54      	subs	r4, r2, r1
 80046b2:	4659      	mov	r1, fp
 80046b4:	eb63 0501 	sbc.w	r5, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	00eb      	lsls	r3, r5, #3
 80046c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c6:	00e2      	lsls	r2, r4, #3
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	18e3      	adds	r3, r4, r3
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	464b      	mov	r3, r9
 80046d4:	eb45 0303 	adc.w	r3, r5, r3
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046e6:	4629      	mov	r1, r5
 80046e8:	028b      	lsls	r3, r1, #10
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f0:	4621      	mov	r1, r4
 80046f2:	028a      	lsls	r2, r1, #10
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046fc:	2200      	movs	r2, #0
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004700:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004702:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004706:	f7fc fb3f 	bl	8000d88 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4613      	mov	r3, r2
 8004710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_GetSysClockFreq+0x458>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0f1b      	lsrs	r3, r3, #28
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004732:	e003      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800473a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004740:	4618      	mov	r0, r3
 8004742:	37b8      	adds	r7, #184	; 0xb8
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	00f42400 	.word	0x00f42400

08004754 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e28d      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8083 	beq.w	800487a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004774:	4b94      	ldr	r3, [pc, #592]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b04      	cmp	r3, #4
 800477e:	d019      	beq.n	80047b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004780:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004788:	2b08      	cmp	r3, #8
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800478c:	4b8e      	ldr	r3, [pc, #568]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d00c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d112      	bne.n	80047cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b2:	d10b      	bne.n	80047cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05b      	beq.n	8004878 <HAL_RCC_OscConfig+0x124>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d157      	bne.n	8004878 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e25a      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d106      	bne.n	80047e4 <HAL_RCC_OscConfig+0x90>
 80047d6:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7b      	ldr	r2, [pc, #492]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <HAL_RCC_OscConfig+0xcc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0xb4>
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a75      	ldr	r2, [pc, #468]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a72      	ldr	r2, [pc, #456]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0xcc>
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6b      	ldr	r2, [pc, #428]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd ff3c 	bl	80026a4 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004830:	f7fd ff38 	bl	80026a4 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e21f      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0xdc>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd ff28 	bl	80026a4 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004858:	f7fd ff24 	bl	80026a4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e20b      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x104>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d06f      	beq.n	8004966 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004892:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800489e:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x186>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1d3      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4937      	ldr	r1, [pc, #220]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_RCC_OscConfig+0x278>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fd fed1 	bl	80026a4 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fd fecd 	bl	80026a4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1b4      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4925      	ldr	r1, [pc, #148]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_RCC_OscConfig+0x278>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd feb0 	bl	80026a4 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7fd feac 	bl	80026a4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e193      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d036      	beq.n	80049e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCC_OscConfig+0x27c>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fd fe90 	bl	80026a4 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7fd fe8c 	bl	80026a4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e173      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x234>
 80049a6:	e01b      	b.n	80049e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd fe79 	bl	80026a4 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e00e      	b.n	80049d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fd fe75 	bl	80026a4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d907      	bls.n	80049d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e15c      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ea      	bne.n	80049b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8097 	beq.w	8004b1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b83      	ldr	r3, [pc, #524]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	4b7f      	ldr	r3, [pc, #508]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a7e      	ldr	r2, [pc, #504]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0e:	4b7c      	ldr	r3, [pc, #496]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b79      	ldr	r3, [pc, #484]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2a:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a75      	ldr	r2, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a36:	f7fd fe35 	bl	80026a4 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fd fe31 	bl	80026a4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e118      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x31e>
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	e01c      	b.n	8004aac <HAL_RCC_OscConfig+0x358>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x340>
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a60      	ldr	r2, [pc, #384]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0x358>
 8004a94:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a59      	ldr	r2, [pc, #356]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	4b57      	ldr	r3, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004aa6:	f023 0304 	bic.w	r3, r3, #4
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fdf6 	bl	80026a4 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd fdf2 	bl	80026a4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0d7      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ee      	beq.n	8004abc <HAL_RCC_OscConfig+0x368>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fd fde0 	bl	80026a4 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fddc 	bl	80026a4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0c1      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ee      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80ad 	beq.w	8004c80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d060      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d145      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd fdb0 	bl	80026a4 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fd fdac 	bl	80026a4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e093      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	491b      	ldr	r1, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fd fd81 	bl	80026a4 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fd fd7d 	bl	80026a4 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e064      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x452>
 8004bc4:	e05c      	b.n	8004c80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fd6a 	bl	80026a4 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd fd66 	bl	80026a4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04d      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x480>
 8004bf2:	e045      	b.n	8004c80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e040      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_RCC_OscConfig+0x538>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d030      	beq.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d129      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d122      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d119      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d10f      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e03f      	b.n	8004d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fac2 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fddf 	bl	8005898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b08a      	sub	sp, #40	; 0x28
 8004d2e:	af02      	add	r7, sp, #8
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d17c      	bne.n	8004e44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_UART_Transmit+0x2c>
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e075      	b.n	8004e46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Transmit+0x3e>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e06e      	b.n	8004e46 <HAL_UART_Transmit+0x11c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7e:	f7fd fc91 	bl	80026a4 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d98:	d108      	bne.n	8004dac <HAL_UART_Transmit+0x82>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e003      	b.n	8004db4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dbc:	e02a      	b.n	8004e14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fb1f 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e036      	b.n	8004e46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3302      	adds	r3, #2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e007      	b.n	8004e06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1cf      	bne.n	8004dbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2140      	movs	r1, #64	; 0x40
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 faef 	bl	800540c <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e006      	b.n	8004e46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d11d      	bne.n	8004ea4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_UART_Receive_IT+0x26>
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e016      	b.n	8004ea6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Receive_IT+0x38>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00f      	b.n	8004ea6 <HAL_UART_Receive_IT+0x58>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	461a      	mov	r2, r3
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb24 	bl	80054e8 <UART_Start_Receive_IT>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	e000      	b.n	8004ea6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b0ba      	sub	sp, #232	; 0xe8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_UART_IRQHandler+0x66>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fc07 	bl	8005722 <UART_Receive_IT>
      return;
 8004f14:	e256      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80de 	beq.w	80050dc <HAL_UART_IRQHandler+0x22c>
 8004f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80d1 	beq.w	80050dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xae>
 8004f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_UART_IRQHandler+0xd2>
 8004f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0202 	orr.w	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xf6>
 8004f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x126>
 8004fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 81ed 	beq.w	80053ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_UART_IRQHandler+0x14e>
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb92 	bl	8005722 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <HAL_UART_IRQHandler+0x17a>
 8005022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04f      	beq.n	80050ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa9a 	bl	8005564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d141      	bne.n	80050c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800506a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800506e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1d9      	bne.n	800503e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d013      	beq.n	80050ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	4a7d      	ldr	r2, [pc, #500]	; (800528c <HAL_UART_IRQHandler+0x3dc>)
 8005098:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fea7 	bl	8002df2 <HAL_DMA_Abort_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	e00e      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f990 	bl	80053e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e00a      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f98c 	bl	80053e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e006      	b.n	80050d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f988 	bl	80053e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050d6:	e170      	b.n	80053ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	bf00      	nop
    return;
 80050da:	e16e      	b.n	80053ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 814a 	bne.w	800537a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8143 	beq.w	800537a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 813c 	beq.w	800537a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	f040 80b4 	bne.w	8005290 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8140 	beq.w	80053be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005146:	429a      	cmp	r2, r3
 8005148:	f080 8139 	bcs.w	80053be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005152:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	f000 8088 	beq.w	8005272 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800517c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800518e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800519a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1d9      	bne.n	8005162 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e1      	bne.n	80051ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800520e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800521c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005254:	65ba      	str	r2, [r7, #88]	; 0x58
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800525a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e3      	bne.n	8005230 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd fd50 	bl	8002d12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527a:	b29b      	uxth	r3, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	b29b      	uxth	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8b6 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005288:	e099      	b.n	80053be <HAL_UART_IRQHandler+0x50e>
 800528a:	bf00      	nop
 800528c:	0800562b 	.word	0x0800562b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005298:	b29b      	uxth	r3, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 808b 	beq.w	80053c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8086 	beq.w	80053c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052da:	647a      	str	r2, [r7, #68]	; 0x44
 80052dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	623b      	str	r3, [r7, #32]
   return(result);
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005312:	633a      	str	r2, [r7, #48]	; 0x30
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e3      	bne.n	80052ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60fb      	str	r3, [r7, #12]
   return(result);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005358:	61fa      	str	r2, [r7, #28]
 800535a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	617b      	str	r3, [r7, #20]
   return(result);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e3      	bne.n	8005334 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800536c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f83e 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005378:	e023      	b.n	80053c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_UART_IRQHandler+0x4ea>
 8005386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f95d 	bl	8005652 <UART_Transmit_IT>
    return;
 8005398:	e014      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <HAL_UART_IRQHandler+0x514>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f99d 	bl	80056f2 <UART_EndTransmit_IT>
    return;
 80053b8:	e004      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
    return;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
      return;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_UART_IRQHandler+0x514>
      return;
 80053c2:	bf00      	nop
  }
}
 80053c4:	37e8      	adds	r7, #232	; 0xe8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop

080053cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b090      	sub	sp, #64	; 0x40
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541c:	e050      	b.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d04c      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <UART_WaitOnFlagUntilTimeout+0x30>
 800542c:	f7fd f93a 	bl	80026a4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005438:	429a      	cmp	r2, r3
 800543a:	d241      	bcs.n	80054c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800545c:	637a      	str	r2, [r7, #52]	; 0x34
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3314      	adds	r3, #20
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	63bb      	str	r3, [r7, #56]	; 0x38
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3314      	adds	r3, #20
 800548e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005490:	623a      	str	r2, [r7, #32]
 8005492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	61bb      	str	r3, [r7, #24]
   return(result);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e5      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e00f      	b.n	80054e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d09f      	beq.n	800541e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3740      	adds	r7, #64	; 0x40
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2222      	movs	r2, #34	; 0x22
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005534:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0220 	orr.w	r2, r2, #32
 8005554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b095      	sub	sp, #84	; 0x54
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800558c:	643a      	str	r2, [r7, #64]	; 0x40
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3314      	adds	r3, #20
 80055a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3314      	adds	r3, #20
 80055be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d119      	bne.n	8005610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fc:	61ba      	str	r2, [r7, #24]
 80055fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6979      	ldr	r1, [r7, #20]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	613b      	str	r3, [r7, #16]
   return(result);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800561e:	bf00      	nop
 8005620:	3754      	adds	r7, #84	; 0x54
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fecb 	bl	80053e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b21      	cmp	r3, #33	; 0x21
 8005664:	d13e      	bne.n	80056e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566e:	d114      	bne.n	800569a <UART_Transmit_IT+0x48>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d110      	bne.n	800569a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]
 8005698:	e008      	b.n	80056ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6211      	str	r1, [r2, #32]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4619      	mov	r1, r3
 80056ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10f      	bne.n	80056e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005708:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fe5a 	bl	80053cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b08c      	sub	sp, #48	; 0x30
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b22      	cmp	r3, #34	; 0x22
 8005734:	f040 80ab 	bne.w	800588e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	d117      	bne.n	8005772 <UART_Receive_IT+0x50>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d113      	bne.n	8005772 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005760:	b29a      	uxth	r2, r3
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	1c9a      	adds	r2, r3, #2
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
 8005770:	e026      	b.n	80057c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d007      	beq.n	8005796 <UART_Receive_IT+0x74>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <UART_Receive_IT+0x82>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e008      	b.n	80057b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4619      	mov	r1, r3
 80057ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d15a      	bne.n	800588a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0220 	bic.w	r2, r2, #32
 80057e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	2b01      	cmp	r3, #1
 8005812:	d135      	bne.n	8005880 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	613b      	str	r3, [r7, #16]
   return(result);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f023 0310 	bic.w	r3, r3, #16
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	623a      	str	r2, [r7, #32]
 800583c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	69f9      	ldr	r1, [r7, #28]
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	61bb      	str	r3, [r7, #24]
   return(result);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d10a      	bne.n	8005872 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fdbb 	bl	80053f4 <HAL_UARTEx_RxEventCallback>
 800587e:	e002      	b.n	8005886 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fc f9fb 	bl	8001c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e002      	b.n	8005890 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3730      	adds	r7, #48	; 0x30
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b0c0      	sub	sp, #256	; 0x100
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	68d9      	ldr	r1, [r3, #12]
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	ea40 0301 	orr.w	r3, r0, r1
 80058c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058f0:	f021 010c 	bic.w	r1, r1, #12
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058fe:	430b      	orrs	r3, r1
 8005900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	6999      	ldr	r1, [r3, #24]
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	ea40 0301 	orr.w	r3, r0, r1
 800591e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b8f      	ldr	r3, [pc, #572]	; (8005b64 <UART_SetConfig+0x2cc>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d005      	beq.n	8005938 <UART_SetConfig+0xa0>
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8d      	ldr	r3, [pc, #564]	; (8005b68 <UART_SetConfig+0x2d0>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d104      	bne.n	8005942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fe fcc8 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 800593c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005940:	e003      	b.n	800594a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fe fcaf 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8005946:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005954:	f040 810c 	bne.w	8005b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005962:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	1891      	adds	r1, r2, r2
 8005970:	65b9      	str	r1, [r7, #88]	; 0x58
 8005972:	415b      	adcs	r3, r3
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800597a:	4621      	mov	r1, r4
 800597c:	eb12 0801 	adds.w	r8, r2, r1
 8005980:	4629      	mov	r1, r5
 8005982:	eb43 0901 	adc.w	r9, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb18 0303 	adds.w	r3, r8, r3
 80059a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059a8:	462b      	mov	r3, r5
 80059aa:	eb49 0303 	adc.w	r3, r9, r3
 80059ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059c6:	460b      	mov	r3, r1
 80059c8:	18db      	adds	r3, r3, r3
 80059ca:	653b      	str	r3, [r7, #80]	; 0x50
 80059cc:	4613      	mov	r3, r2
 80059ce:	eb42 0303 	adc.w	r3, r2, r3
 80059d2:	657b      	str	r3, [r7, #84]	; 0x54
 80059d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059dc:	f7fb f9d4 	bl	8000d88 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <UART_SetConfig+0x2d4>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a10:	4641      	mov	r1, r8
 8005a12:	eb12 0a01 	adds.w	sl, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb43 0b01 	adc.w	fp, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a30:	4692      	mov	sl, r2
 8005a32:	469b      	mov	fp, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	eb1a 0303 	adds.w	r3, sl, r3
 8005a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	eb4b 0303 	adc.w	r3, fp, r3
 8005a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	18db      	adds	r3, r3, r3
 8005a60:	643b      	str	r3, [r7, #64]	; 0x40
 8005a62:	4613      	mov	r3, r2
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a72:	f7fb f989 	bl	8000d88 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <UART_SetConfig+0x2d4>)
 8005a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2264      	movs	r2, #100	; 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <UART_SetConfig+0x2d4>)
 8005a94:	fba3 2302 	umull	r2, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aa0:	441c      	add	r4, r3
 8005aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005abc:	415b      	adcs	r3, r3
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	1851      	adds	r1, r2, r1
 8005ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aca:	4649      	mov	r1, r9
 8005acc:	414b      	adcs	r3, r1
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005adc:	4659      	mov	r1, fp
 8005ade:	00cb      	lsls	r3, r1, #3
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	00ca      	lsls	r2, r1, #3
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	4642      	mov	r2, r8
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005af8:	464b      	mov	r3, r9
 8005afa:	460a      	mov	r2, r1
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b18:	460b      	mov	r3, r1
 8005b1a:	18db      	adds	r3, r3, r3
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1e:	4613      	mov	r3, r2
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b2e:	f7fb f92b 	bl	8000d88 <__aeabi_uldivmod>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <UART_SetConfig+0x2d4>)
 8005b38:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	2164      	movs	r1, #100	; 0x64
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3332      	adds	r3, #50	; 0x32
 8005b4a:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <UART_SetConfig+0x2d4>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	f003 0207 	and.w	r2, r3, #7
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4422      	add	r2, r4
 8005b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b60:	e106      	b.n	8005d70 <UART_SetConfig+0x4d8>
 8005b62:	bf00      	nop
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b82:	4642      	mov	r2, r8
 8005b84:	464b      	mov	r3, r9
 8005b86:	1891      	adds	r1, r2, r2
 8005b88:	6239      	str	r1, [r7, #32]
 8005b8a:	415b      	adcs	r3, r3
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b92:	4641      	mov	r1, r8
 8005b94:	1854      	adds	r4, r2, r1
 8005b96:	4649      	mov	r1, r9
 8005b98:	eb43 0501 	adc.w	r5, r3, r1
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	00eb      	lsls	r3, r5, #3
 8005ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005baa:	00e2      	lsls	r2, r4, #3
 8005bac:	4614      	mov	r4, r2
 8005bae:	461d      	mov	r5, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	18e3      	adds	r3, r4, r3
 8005bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bb8:	464b      	mov	r3, r9
 8005bba:	eb45 0303 	adc.w	r3, r5, r3
 8005bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bde:	4629      	mov	r1, r5
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be8:	4621      	mov	r1, r4
 8005bea:	008a      	lsls	r2, r1, #2
 8005bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bf0:	f7fb f8ca 	bl	8000d88 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4b60      	ldr	r3, [pc, #384]	; (8005d7c <UART_SetConfig+0x4e4>)
 8005bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	011c      	lsls	r4, r3, #4
 8005c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	61b9      	str	r1, [r7, #24]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6139      	str	r1, [r7, #16]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c58:	464b      	mov	r3, r9
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	008b      	lsls	r3, r1, #2
 8005c80:	4641      	mov	r1, r8
 8005c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c86:	4641      	mov	r1, r8
 8005c88:	008a      	lsls	r2, r1, #2
 8005c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c8e:	f7fb f87b 	bl	8000d88 <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <UART_SetConfig+0x4e4>)
 8005c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2264      	movs	r2, #100	; 0x64
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	; 0x32
 8005cac:	4a33      	ldr	r2, [pc, #204]	; (8005d7c <UART_SetConfig+0x4e4>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb8:	441c      	add	r4, r3
 8005cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	673b      	str	r3, [r7, #112]	; 0x70
 8005cc2:	677a      	str	r2, [r7, #116]	; 0x74
 8005cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cd8:	4641      	mov	r1, r8
 8005cda:	1851      	adds	r1, r2, r1
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	4649      	mov	r1, r9
 8005ce0:	414b      	adcs	r3, r1
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	00cb      	lsls	r3, r1, #3
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	00ca      	lsls	r2, r1, #3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	4642      	mov	r2, r8
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	eb42 0303 	adc.w	r3, r2, r3
 8005d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1e:	667a      	str	r2, [r7, #100]	; 0x64
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	4641      	mov	r1, r8
 8005d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d36:	4641      	mov	r1, r8
 8005d38:	008a      	lsls	r2, r1, #2
 8005d3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d3e:	f7fb f823 	bl	8000d88 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <UART_SetConfig+0x4e4>)
 8005d48:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	2164      	movs	r1, #100	; 0x64
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	3332      	adds	r3, #50	; 0x32
 8005d5a:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <UART_SetConfig+0x4e4>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4422      	add	r2, r4
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7c:	51eb851f 	.word	0x51eb851f

08005d80 <malloc>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <malloc+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f000 b82b 	b.w	8005de0 <_malloc_r>
 8005d8a:	bf00      	nop
 8005d8c:	20000080 	.word	0x20000080

08005d90 <free>:
 8005d90:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <free+0xc>)
 8005d92:	4601      	mov	r1, r0
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f002 b8d9 	b.w	8007f4c <_free_r>
 8005d9a:	bf00      	nop
 8005d9c:	20000080 	.word	0x20000080

08005da0 <sbrk_aligned>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4e0e      	ldr	r6, [pc, #56]	; (8005ddc <sbrk_aligned+0x3c>)
 8005da4:	460c      	mov	r4, r1
 8005da6:	6831      	ldr	r1, [r6, #0]
 8005da8:	4605      	mov	r5, r0
 8005daa:	b911      	cbnz	r1, 8005db2 <sbrk_aligned+0x12>
 8005dac:	f001 f9de 	bl	800716c <_sbrk_r>
 8005db0:	6030      	str	r0, [r6, #0]
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f001 f9d9 	bl	800716c <_sbrk_r>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d00a      	beq.n	8005dd4 <sbrk_aligned+0x34>
 8005dbe:	1cc4      	adds	r4, r0, #3
 8005dc0:	f024 0403 	bic.w	r4, r4, #3
 8005dc4:	42a0      	cmp	r0, r4
 8005dc6:	d007      	beq.n	8005dd8 <sbrk_aligned+0x38>
 8005dc8:	1a21      	subs	r1, r4, r0
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f001 f9ce 	bl	800716c <_sbrk_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d101      	bne.n	8005dd8 <sbrk_aligned+0x38>
 8005dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd8:	4620      	mov	r0, r4
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	20000360 	.word	0x20000360

08005de0 <_malloc_r>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	1ccd      	adds	r5, r1, #3
 8005de6:	f025 0503 	bic.w	r5, r5, #3
 8005dea:	3508      	adds	r5, #8
 8005dec:	2d0c      	cmp	r5, #12
 8005dee:	bf38      	it	cc
 8005df0:	250c      	movcc	r5, #12
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	4607      	mov	r7, r0
 8005df6:	db01      	blt.n	8005dfc <_malloc_r+0x1c>
 8005df8:	42a9      	cmp	r1, r5
 8005dfa:	d905      	bls.n	8005e08 <_malloc_r+0x28>
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	2600      	movs	r6, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005edc <_malloc_r+0xfc>
 8005e0c:	f000 f868 	bl	8005ee0 <__malloc_lock>
 8005e10:	f8d8 3000 	ldr.w	r3, [r8]
 8005e14:	461c      	mov	r4, r3
 8005e16:	bb5c      	cbnz	r4, 8005e70 <_malloc_r+0x90>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7ff ffc0 	bl	8005da0 <sbrk_aligned>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	4604      	mov	r4, r0
 8005e24:	d155      	bne.n	8005ed2 <_malloc_r+0xf2>
 8005e26:	f8d8 4000 	ldr.w	r4, [r8]
 8005e2a:	4626      	mov	r6, r4
 8005e2c:	2e00      	cmp	r6, #0
 8005e2e:	d145      	bne.n	8005ebc <_malloc_r+0xdc>
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	d048      	beq.n	8005ec6 <_malloc_r+0xe6>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	4631      	mov	r1, r6
 8005e38:	4638      	mov	r0, r7
 8005e3a:	eb04 0903 	add.w	r9, r4, r3
 8005e3e:	f001 f995 	bl	800716c <_sbrk_r>
 8005e42:	4581      	cmp	r9, r0
 8005e44:	d13f      	bne.n	8005ec6 <_malloc_r+0xe6>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	1a6d      	subs	r5, r5, r1
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff ffa7 	bl	8005da0 <sbrk_aligned>
 8005e52:	3001      	adds	r0, #1
 8005e54:	d037      	beq.n	8005ec6 <_malloc_r+0xe6>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	442b      	add	r3, r5
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d038      	beq.n	8005ed6 <_malloc_r+0xf6>
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	42a2      	cmp	r2, r4
 8005e68:	d12b      	bne.n	8005ec2 <_malloc_r+0xe2>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	e00f      	b.n	8005e90 <_malloc_r+0xb0>
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	1b52      	subs	r2, r2, r5
 8005e74:	d41f      	bmi.n	8005eb6 <_malloc_r+0xd6>
 8005e76:	2a0b      	cmp	r2, #11
 8005e78:	d917      	bls.n	8005eaa <_malloc_r+0xca>
 8005e7a:	1961      	adds	r1, r4, r5
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	6025      	str	r5, [r4, #0]
 8005e80:	bf18      	it	ne
 8005e82:	6059      	strne	r1, [r3, #4]
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	bf08      	it	eq
 8005e88:	f8c8 1000 	streq.w	r1, [r8]
 8005e8c:	5162      	str	r2, [r4, r5]
 8005e8e:	604b      	str	r3, [r1, #4]
 8005e90:	4638      	mov	r0, r7
 8005e92:	f104 060b 	add.w	r6, r4, #11
 8005e96:	f000 f829 	bl	8005eec <__malloc_unlock>
 8005e9a:	f026 0607 	bic.w	r6, r6, #7
 8005e9e:	1d23      	adds	r3, r4, #4
 8005ea0:	1af2      	subs	r2, r6, r3
 8005ea2:	d0ae      	beq.n	8005e02 <_malloc_r+0x22>
 8005ea4:	1b9b      	subs	r3, r3, r6
 8005ea6:	50a3      	str	r3, [r4, r2]
 8005ea8:	e7ab      	b.n	8005e02 <_malloc_r+0x22>
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	6862      	ldr	r2, [r4, #4]
 8005eae:	d1dd      	bne.n	8005e6c <_malloc_r+0x8c>
 8005eb0:	f8c8 2000 	str.w	r2, [r8]
 8005eb4:	e7ec      	b.n	8005e90 <_malloc_r+0xb0>
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	6864      	ldr	r4, [r4, #4]
 8005eba:	e7ac      	b.n	8005e16 <_malloc_r+0x36>
 8005ebc:	4634      	mov	r4, r6
 8005ebe:	6876      	ldr	r6, [r6, #4]
 8005ec0:	e7b4      	b.n	8005e2c <_malloc_r+0x4c>
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	e7cc      	b.n	8005e60 <_malloc_r+0x80>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f000 f80e 	bl	8005eec <__malloc_unlock>
 8005ed0:	e797      	b.n	8005e02 <_malloc_r+0x22>
 8005ed2:	6025      	str	r5, [r4, #0]
 8005ed4:	e7dc      	b.n	8005e90 <_malloc_r+0xb0>
 8005ed6:	605b      	str	r3, [r3, #4]
 8005ed8:	deff      	udf	#255	; 0xff
 8005eda:	bf00      	nop
 8005edc:	2000035c 	.word	0x2000035c

08005ee0 <__malloc_lock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__malloc_lock+0x8>)
 8005ee2:	f001 b990 	b.w	8007206 <__retarget_lock_acquire_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200004a4 	.word	0x200004a4

08005eec <__malloc_unlock>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__malloc_unlock+0x8>)
 8005eee:	f001 b98b 	b.w	8007208 <__retarget_lock_release_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200004a4 	.word	0x200004a4

08005ef8 <__cvt>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	ec55 4b10 	vmov	r4, r5, d0
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	460e      	mov	r6, r1
 8005f04:	4619      	mov	r1, r3
 8005f06:	462b      	mov	r3, r5
 8005f08:	bfbb      	ittet	lt
 8005f0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f0e:	461d      	movlt	r5, r3
 8005f10:	2300      	movge	r3, #0
 8005f12:	232d      	movlt	r3, #45	; 0x2d
 8005f14:	700b      	strb	r3, [r1, #0]
 8005f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	f023 0820 	bic.w	r8, r3, #32
 8005f22:	bfbc      	itt	lt
 8005f24:	4622      	movlt	r2, r4
 8005f26:	4614      	movlt	r4, r2
 8005f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f2c:	d005      	beq.n	8005f3a <__cvt+0x42>
 8005f2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f32:	d100      	bne.n	8005f36 <__cvt+0x3e>
 8005f34:	3601      	adds	r6, #1
 8005f36:	2102      	movs	r1, #2
 8005f38:	e000      	b.n	8005f3c <__cvt+0x44>
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	ab02      	add	r3, sp, #8
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	ec45 4b10 	vmov	d0, r4, r5
 8005f48:	4653      	mov	r3, sl
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	f001 fa0c 	bl	8007368 <_dtoa_r>
 8005f50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f54:	4607      	mov	r7, r0
 8005f56:	d102      	bne.n	8005f5e <__cvt+0x66>
 8005f58:	f019 0f01 	tst.w	r9, #1
 8005f5c:	d022      	beq.n	8005fa4 <__cvt+0xac>
 8005f5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f62:	eb07 0906 	add.w	r9, r7, r6
 8005f66:	d110      	bne.n	8005f8a <__cvt+0x92>
 8005f68:	783b      	ldrb	r3, [r7, #0]
 8005f6a:	2b30      	cmp	r3, #48	; 0x30
 8005f6c:	d10a      	bne.n	8005f84 <__cvt+0x8c>
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2300      	movs	r3, #0
 8005f72:	4620      	mov	r0, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa fdd7 	bl	8000b28 <__aeabi_dcmpeq>
 8005f7a:	b918      	cbnz	r0, 8005f84 <__cvt+0x8c>
 8005f7c:	f1c6 0601 	rsb	r6, r6, #1
 8005f80:	f8ca 6000 	str.w	r6, [sl]
 8005f84:	f8da 3000 	ldr.w	r3, [sl]
 8005f88:	4499      	add	r9, r3
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	f7fa fdc9 	bl	8000b28 <__aeabi_dcmpeq>
 8005f96:	b108      	cbz	r0, 8005f9c <__cvt+0xa4>
 8005f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f9c:	2230      	movs	r2, #48	; 0x30
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	454b      	cmp	r3, r9
 8005fa2:	d307      	bcc.n	8005fb4 <__cvt+0xbc>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa8:	1bdb      	subs	r3, r3, r7
 8005faa:	4638      	mov	r0, r7
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	b004      	add	sp, #16
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	9103      	str	r1, [sp, #12]
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e7f0      	b.n	8005f9e <__cvt+0xa6>

08005fbc <__exponent>:
 8005fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	bfb8      	it	lt
 8005fc4:	4249      	neglt	r1, r1
 8005fc6:	f803 2b02 	strb.w	r2, [r3], #2
 8005fca:	bfb4      	ite	lt
 8005fcc:	222d      	movlt	r2, #45	; 0x2d
 8005fce:	222b      	movge	r2, #43	; 0x2b
 8005fd0:	2909      	cmp	r1, #9
 8005fd2:	7042      	strb	r2, [r0, #1]
 8005fd4:	dd2a      	ble.n	800602c <__exponent+0x70>
 8005fd6:	f10d 0207 	add.w	r2, sp, #7
 8005fda:	4617      	mov	r7, r2
 8005fdc:	260a      	movs	r6, #10
 8005fde:	4694      	mov	ip, r2
 8005fe0:	fb91 f5f6 	sdiv	r5, r1, r6
 8005fe4:	fb06 1415 	mls	r4, r6, r5, r1
 8005fe8:	3430      	adds	r4, #48	; 0x30
 8005fea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005fee:	460c      	mov	r4, r1
 8005ff0:	2c63      	cmp	r4, #99	; 0x63
 8005ff2:	f102 32ff 	add.w	r2, r2, #4294967295
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	dcf1      	bgt.n	8005fde <__exponent+0x22>
 8005ffa:	3130      	adds	r1, #48	; 0x30
 8005ffc:	f1ac 0402 	sub.w	r4, ip, #2
 8006000:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006004:	1c41      	adds	r1, r0, #1
 8006006:	4622      	mov	r2, r4
 8006008:	42ba      	cmp	r2, r7
 800600a:	d30a      	bcc.n	8006022 <__exponent+0x66>
 800600c:	f10d 0209 	add.w	r2, sp, #9
 8006010:	eba2 020c 	sub.w	r2, r2, ip
 8006014:	42bc      	cmp	r4, r7
 8006016:	bf88      	it	hi
 8006018:	2200      	movhi	r2, #0
 800601a:	4413      	add	r3, r2
 800601c:	1a18      	subs	r0, r3, r0
 800601e:	b003      	add	sp, #12
 8006020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006022:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006026:	f801 5f01 	strb.w	r5, [r1, #1]!
 800602a:	e7ed      	b.n	8006008 <__exponent+0x4c>
 800602c:	2330      	movs	r3, #48	; 0x30
 800602e:	3130      	adds	r1, #48	; 0x30
 8006030:	7083      	strb	r3, [r0, #2]
 8006032:	70c1      	strb	r1, [r0, #3]
 8006034:	1d03      	adds	r3, r0, #4
 8006036:	e7f1      	b.n	800601c <__exponent+0x60>

08006038 <_printf_float>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	ed2d 8b02 	vpush	{d8}
 8006040:	b08d      	sub	sp, #52	; 0x34
 8006042:	460c      	mov	r4, r1
 8006044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006048:	4616      	mov	r6, r2
 800604a:	461f      	mov	r7, r3
 800604c:	4605      	mov	r5, r0
 800604e:	f001 f855 	bl	80070fc <_localeconv_r>
 8006052:	f8d0 a000 	ldr.w	sl, [r0]
 8006056:	4650      	mov	r0, sl
 8006058:	f7fa f93a 	bl	80002d0 <strlen>
 800605c:	2300      	movs	r3, #0
 800605e:	930a      	str	r3, [sp, #40]	; 0x28
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	f894 b018 	ldrb.w	fp, [r4, #24]
 800606c:	3307      	adds	r3, #7
 800606e:	f023 0307 	bic.w	r3, r3, #7
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	f8c8 2000 	str.w	r2, [r8]
 800607a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800607e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f8cd 8018 	str.w	r8, [sp, #24]
 8006088:	ee08 0a10 	vmov	s16, r0
 800608c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006094:	4b9e      	ldr	r3, [pc, #632]	; (8006310 <_printf_float+0x2d8>)
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	f7fa fd77 	bl	8000b8c <__aeabi_dcmpun>
 800609e:	bb88      	cbnz	r0, 8006104 <_printf_float+0xcc>
 80060a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060a4:	4b9a      	ldr	r3, [pc, #616]	; (8006310 <_printf_float+0x2d8>)
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	f7fa fd51 	bl	8000b50 <__aeabi_dcmple>
 80060ae:	bb48      	cbnz	r0, 8006104 <_printf_float+0xcc>
 80060b0:	2200      	movs	r2, #0
 80060b2:	2300      	movs	r3, #0
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa fd40 	bl	8000b3c <__aeabi_dcmplt>
 80060bc:	b110      	cbz	r0, 80060c4 <_printf_float+0x8c>
 80060be:	232d      	movs	r3, #45	; 0x2d
 80060c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c4:	4a93      	ldr	r2, [pc, #588]	; (8006314 <_printf_float+0x2dc>)
 80060c6:	4b94      	ldr	r3, [pc, #592]	; (8006318 <_printf_float+0x2e0>)
 80060c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060cc:	bf94      	ite	ls
 80060ce:	4690      	movls	r8, r2
 80060d0:	4698      	movhi	r8, r3
 80060d2:	2303      	movs	r3, #3
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	9b05      	ldr	r3, [sp, #20]
 80060d8:	f023 0304 	bic.w	r3, r3, #4
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	f04f 0900 	mov.w	r9, #0
 80060e2:	9700      	str	r7, [sp, #0]
 80060e4:	4633      	mov	r3, r6
 80060e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f9da 	bl	80064a4 <_printf_common>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f040 8090 	bne.w	8006216 <_printf_float+0x1de>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	b00d      	add	sp, #52	; 0x34
 80060fc:	ecbd 8b02 	vpop	{d8}
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa fd3e 	bl	8000b8c <__aeabi_dcmpun>
 8006110:	b140      	cbz	r0, 8006124 <_printf_float+0xec>
 8006112:	464b      	mov	r3, r9
 8006114:	2b00      	cmp	r3, #0
 8006116:	bfbc      	itt	lt
 8006118:	232d      	movlt	r3, #45	; 0x2d
 800611a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800611e:	4a7f      	ldr	r2, [pc, #508]	; (800631c <_printf_float+0x2e4>)
 8006120:	4b7f      	ldr	r3, [pc, #508]	; (8006320 <_printf_float+0x2e8>)
 8006122:	e7d1      	b.n	80060c8 <_printf_float+0x90>
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800612a:	9206      	str	r2, [sp, #24]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	d13f      	bne.n	80061b0 <_printf_float+0x178>
 8006130:	2306      	movs	r3, #6
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	9b05      	ldr	r3, [sp, #20]
 8006136:	6861      	ldr	r1, [r4, #4]
 8006138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800613c:	2300      	movs	r3, #0
 800613e:	9303      	str	r3, [sp, #12]
 8006140:	ab0a      	add	r3, sp, #40	; 0x28
 8006142:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006146:	ab09      	add	r3, sp, #36	; 0x24
 8006148:	ec49 8b10 	vmov	d0, r8, r9
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006154:	4628      	mov	r0, r5
 8006156:	f7ff fecf 	bl	8005ef8 <__cvt>
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800615e:	2b47      	cmp	r3, #71	; 0x47
 8006160:	4680      	mov	r8, r0
 8006162:	d108      	bne.n	8006176 <_printf_float+0x13e>
 8006164:	1cc8      	adds	r0, r1, #3
 8006166:	db02      	blt.n	800616e <_printf_float+0x136>
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	4299      	cmp	r1, r3
 800616c:	dd41      	ble.n	80061f2 <_printf_float+0x1ba>
 800616e:	f1ab 0302 	sub.w	r3, fp, #2
 8006172:	fa5f fb83 	uxtb.w	fp, r3
 8006176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800617a:	d820      	bhi.n	80061be <_printf_float+0x186>
 800617c:	3901      	subs	r1, #1
 800617e:	465a      	mov	r2, fp
 8006180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006184:	9109      	str	r1, [sp, #36]	; 0x24
 8006186:	f7ff ff19 	bl	8005fbc <__exponent>
 800618a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618c:	1813      	adds	r3, r2, r0
 800618e:	2a01      	cmp	r2, #1
 8006190:	4681      	mov	r9, r0
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	dc02      	bgt.n	800619c <_printf_float+0x164>
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	07d2      	lsls	r2, r2, #31
 800619a:	d501      	bpl.n	80061a0 <_printf_float+0x168>
 800619c:	3301      	adds	r3, #1
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d09c      	beq.n	80060e2 <_printf_float+0xaa>
 80061a8:	232d      	movs	r3, #45	; 0x2d
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	e798      	b.n	80060e2 <_printf_float+0xaa>
 80061b0:	9a06      	ldr	r2, [sp, #24]
 80061b2:	2a47      	cmp	r2, #71	; 0x47
 80061b4:	d1be      	bne.n	8006134 <_printf_float+0xfc>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1bc      	bne.n	8006134 <_printf_float+0xfc>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7b9      	b.n	8006132 <_printf_float+0xfa>
 80061be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061c2:	d118      	bne.n	80061f6 <_printf_float+0x1be>
 80061c4:	2900      	cmp	r1, #0
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	dd0b      	ble.n	80061e2 <_printf_float+0x1aa>
 80061ca:	6121      	str	r1, [r4, #16]
 80061cc:	b913      	cbnz	r3, 80061d4 <_printf_float+0x19c>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	07d0      	lsls	r0, r2, #31
 80061d2:	d502      	bpl.n	80061da <_printf_float+0x1a2>
 80061d4:	3301      	adds	r3, #1
 80061d6:	440b      	add	r3, r1
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	65a1      	str	r1, [r4, #88]	; 0x58
 80061dc:	f04f 0900 	mov.w	r9, #0
 80061e0:	e7de      	b.n	80061a0 <_printf_float+0x168>
 80061e2:	b913      	cbnz	r3, 80061ea <_printf_float+0x1b2>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	07d2      	lsls	r2, r2, #31
 80061e8:	d501      	bpl.n	80061ee <_printf_float+0x1b6>
 80061ea:	3302      	adds	r3, #2
 80061ec:	e7f4      	b.n	80061d8 <_printf_float+0x1a0>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7f2      	b.n	80061d8 <_printf_float+0x1a0>
 80061f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	4299      	cmp	r1, r3
 80061fa:	db05      	blt.n	8006208 <_printf_float+0x1d0>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6121      	str	r1, [r4, #16]
 8006200:	07d8      	lsls	r0, r3, #31
 8006202:	d5ea      	bpl.n	80061da <_printf_float+0x1a2>
 8006204:	1c4b      	adds	r3, r1, #1
 8006206:	e7e7      	b.n	80061d8 <_printf_float+0x1a0>
 8006208:	2900      	cmp	r1, #0
 800620a:	bfd4      	ite	le
 800620c:	f1c1 0202 	rsble	r2, r1, #2
 8006210:	2201      	movgt	r2, #1
 8006212:	4413      	add	r3, r2
 8006214:	e7e0      	b.n	80061d8 <_printf_float+0x1a0>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	055a      	lsls	r2, r3, #21
 800621a:	d407      	bmi.n	800622c <_printf_float+0x1f4>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	4642      	mov	r2, r8
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	d12c      	bne.n	8006284 <_printf_float+0x24c>
 800622a:	e764      	b.n	80060f6 <_printf_float+0xbe>
 800622c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006230:	f240 80e0 	bls.w	80063f4 <_printf_float+0x3bc>
 8006234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fc74 	bl	8000b28 <__aeabi_dcmpeq>
 8006240:	2800      	cmp	r0, #0
 8006242:	d034      	beq.n	80062ae <_printf_float+0x276>
 8006244:	4a37      	ldr	r2, [pc, #220]	; (8006324 <_printf_float+0x2ec>)
 8006246:	2301      	movs	r3, #1
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af51 	beq.w	80060f6 <_printf_float+0xbe>
 8006254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006258:	429a      	cmp	r2, r3
 800625a:	db02      	blt.n	8006262 <_printf_float+0x22a>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07d8      	lsls	r0, r3, #31
 8006260:	d510      	bpl.n	8006284 <_printf_float+0x24c>
 8006262:	ee18 3a10 	vmov	r3, s16
 8006266:	4652      	mov	r2, sl
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f af41 	beq.w	80060f6 <_printf_float+0xbe>
 8006274:	f04f 0800 	mov.w	r8, #0
 8006278:	f104 091a 	add.w	r9, r4, #26
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	3b01      	subs	r3, #1
 8006280:	4543      	cmp	r3, r8
 8006282:	dc09      	bgt.n	8006298 <_printf_float+0x260>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	079b      	lsls	r3, r3, #30
 8006288:	f100 8107 	bmi.w	800649a <_printf_float+0x462>
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006290:	4298      	cmp	r0, r3
 8006292:	bfb8      	it	lt
 8006294:	4618      	movlt	r0, r3
 8006296:	e730      	b.n	80060fa <_printf_float+0xc2>
 8006298:	2301      	movs	r3, #1
 800629a:	464a      	mov	r2, r9
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f af27 	beq.w	80060f6 <_printf_float+0xbe>
 80062a8:	f108 0801 	add.w	r8, r8, #1
 80062ac:	e7e6      	b.n	800627c <_printf_float+0x244>
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dc39      	bgt.n	8006328 <_printf_float+0x2f0>
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <_printf_float+0x2ec>)
 80062b6:	2301      	movs	r3, #1
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	f43f af19 	beq.w	80060f6 <_printf_float+0xbe>
 80062c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d102      	bne.n	80062d2 <_printf_float+0x29a>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	07d9      	lsls	r1, r3, #31
 80062d0:	d5d8      	bpl.n	8006284 <_printf_float+0x24c>
 80062d2:	ee18 3a10 	vmov	r3, s16
 80062d6:	4652      	mov	r2, sl
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f af09 	beq.w	80060f6 <_printf_float+0xbe>
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	f104 0a1a 	add.w	sl, r4, #26
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	425b      	negs	r3, r3
 80062f0:	454b      	cmp	r3, r9
 80062f2:	dc01      	bgt.n	80062f8 <_printf_float+0x2c0>
 80062f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f6:	e792      	b.n	800621e <_printf_float+0x1e6>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4652      	mov	r2, sl
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f aef7 	beq.w	80060f6 <_printf_float+0xbe>
 8006308:	f109 0901 	add.w	r9, r9, #1
 800630c:	e7ee      	b.n	80062ec <_printf_float+0x2b4>
 800630e:	bf00      	nop
 8006310:	7fefffff 	.word	0x7fefffff
 8006314:	0800a82c 	.word	0x0800a82c
 8006318:	0800a830 	.word	0x0800a830
 800631c:	0800a834 	.word	0x0800a834
 8006320:	0800a838 	.word	0x0800a838
 8006324:	0800a83c 	.word	0x0800a83c
 8006328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800632a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800632c:	429a      	cmp	r2, r3
 800632e:	bfa8      	it	ge
 8006330:	461a      	movge	r2, r3
 8006332:	2a00      	cmp	r2, #0
 8006334:	4691      	mov	r9, r2
 8006336:	dc37      	bgt.n	80063a8 <_printf_float+0x370>
 8006338:	f04f 0b00 	mov.w	fp, #0
 800633c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006340:	f104 021a 	add.w	r2, r4, #26
 8006344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	eba3 0309 	sub.w	r3, r3, r9
 800634c:	455b      	cmp	r3, fp
 800634e:	dc33      	bgt.n	80063b8 <_printf_float+0x380>
 8006350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006354:	429a      	cmp	r2, r3
 8006356:	db3b      	blt.n	80063d0 <_printf_float+0x398>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	07da      	lsls	r2, r3, #31
 800635c:	d438      	bmi.n	80063d0 <_printf_float+0x398>
 800635e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006362:	eba2 0903 	sub.w	r9, r2, r3
 8006366:	9b05      	ldr	r3, [sp, #20]
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	4591      	cmp	r9, r2
 800636c:	bfa8      	it	ge
 800636e:	4691      	movge	r9, r2
 8006370:	f1b9 0f00 	cmp.w	r9, #0
 8006374:	dc35      	bgt.n	80063e2 <_printf_float+0x3aa>
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637e:	f104 0a1a 	add.w	sl, r4, #26
 8006382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	eba3 0309 	sub.w	r3, r3, r9
 800638c:	4543      	cmp	r3, r8
 800638e:	f77f af79 	ble.w	8006284 <_printf_float+0x24c>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f aeaa 	beq.w	80060f6 <_printf_float+0xbe>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	e7ec      	b.n	8006382 <_printf_float+0x34a>
 80063a8:	4613      	mov	r3, r2
 80063aa:	4631      	mov	r1, r6
 80063ac:	4642      	mov	r2, r8
 80063ae:	4628      	mov	r0, r5
 80063b0:	47b8      	blx	r7
 80063b2:	3001      	adds	r0, #1
 80063b4:	d1c0      	bne.n	8006338 <_printf_float+0x300>
 80063b6:	e69e      	b.n	80060f6 <_printf_float+0xbe>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	9205      	str	r2, [sp, #20]
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f ae97 	beq.w	80060f6 <_printf_float+0xbe>
 80063c8:	9a05      	ldr	r2, [sp, #20]
 80063ca:	f10b 0b01 	add.w	fp, fp, #1
 80063ce:	e7b9      	b.n	8006344 <_printf_float+0x30c>
 80063d0:	ee18 3a10 	vmov	r3, s16
 80063d4:	4652      	mov	r2, sl
 80063d6:	4631      	mov	r1, r6
 80063d8:	4628      	mov	r0, r5
 80063da:	47b8      	blx	r7
 80063dc:	3001      	adds	r0, #1
 80063de:	d1be      	bne.n	800635e <_printf_float+0x326>
 80063e0:	e689      	b.n	80060f6 <_printf_float+0xbe>
 80063e2:	9a05      	ldr	r2, [sp, #20]
 80063e4:	464b      	mov	r3, r9
 80063e6:	4442      	add	r2, r8
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	d1c1      	bne.n	8006376 <_printf_float+0x33e>
 80063f2:	e680      	b.n	80060f6 <_printf_float+0xbe>
 80063f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063f6:	2a01      	cmp	r2, #1
 80063f8:	dc01      	bgt.n	80063fe <_printf_float+0x3c6>
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d53a      	bpl.n	8006474 <_printf_float+0x43c>
 80063fe:	2301      	movs	r3, #1
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f ae74 	beq.w	80060f6 <_printf_float+0xbe>
 800640e:	ee18 3a10 	vmov	r3, s16
 8006412:	4652      	mov	r2, sl
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f ae6b 	beq.w	80060f6 <_printf_float+0xbe>
 8006420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800642c:	f7fa fb7c 	bl	8000b28 <__aeabi_dcmpeq>
 8006430:	b9d8      	cbnz	r0, 800646a <_printf_float+0x432>
 8006432:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006436:	f108 0201 	add.w	r2, r8, #1
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	d10e      	bne.n	8006462 <_printf_float+0x42a>
 8006444:	e657      	b.n	80060f6 <_printf_float+0xbe>
 8006446:	2301      	movs	r3, #1
 8006448:	4652      	mov	r2, sl
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f ae50 	beq.w	80060f6 <_printf_float+0xbe>
 8006456:	f108 0801 	add.w	r8, r8, #1
 800645a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	4543      	cmp	r3, r8
 8006460:	dcf1      	bgt.n	8006446 <_printf_float+0x40e>
 8006462:	464b      	mov	r3, r9
 8006464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006468:	e6da      	b.n	8006220 <_printf_float+0x1e8>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	f104 0a1a 	add.w	sl, r4, #26
 8006472:	e7f2      	b.n	800645a <_printf_float+0x422>
 8006474:	2301      	movs	r3, #1
 8006476:	4642      	mov	r2, r8
 8006478:	e7df      	b.n	800643a <_printf_float+0x402>
 800647a:	2301      	movs	r3, #1
 800647c:	464a      	mov	r2, r9
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f ae36 	beq.w	80060f6 <_printf_float+0xbe>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	68e3      	ldr	r3, [r4, #12]
 8006490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006492:	1a5b      	subs	r3, r3, r1
 8006494:	4543      	cmp	r3, r8
 8006496:	dcf0      	bgt.n	800647a <_printf_float+0x442>
 8006498:	e6f8      	b.n	800628c <_printf_float+0x254>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	f104 0919 	add.w	r9, r4, #25
 80064a2:	e7f4      	b.n	800648e <_printf_float+0x456>

080064a4 <_printf_common>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	4616      	mov	r6, r2
 80064aa:	4699      	mov	r9, r3
 80064ac:	688a      	ldr	r2, [r1, #8]
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bfb8      	it	lt
 80064b8:	4613      	movlt	r3, r2
 80064ba:	6033      	str	r3, [r6, #0]
 80064bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c0:	4607      	mov	r7, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	b10a      	cbz	r2, 80064ca <_printf_common+0x26>
 80064c6:	3301      	adds	r3, #1
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	0699      	lsls	r1, r3, #26
 80064ce:	bf42      	ittt	mi
 80064d0:	6833      	ldrmi	r3, [r6, #0]
 80064d2:	3302      	addmi	r3, #2
 80064d4:	6033      	strmi	r3, [r6, #0]
 80064d6:	6825      	ldr	r5, [r4, #0]
 80064d8:	f015 0506 	ands.w	r5, r5, #6
 80064dc:	d106      	bne.n	80064ec <_printf_common+0x48>
 80064de:	f104 0a19 	add.w	sl, r4, #25
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	6832      	ldr	r2, [r6, #0]
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dc26      	bgt.n	800653a <_printf_common+0x96>
 80064ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064f0:	1e13      	subs	r3, r2, #0
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	bf18      	it	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	0692      	lsls	r2, r2, #26
 80064fa:	d42b      	bmi.n	8006554 <_printf_common+0xb0>
 80064fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d01e      	beq.n	8006548 <_printf_common+0xa4>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	f003 0306 	and.w	r3, r3, #6
 8006512:	2b04      	cmp	r3, #4
 8006514:	bf02      	ittt	eq
 8006516:	68e5      	ldreq	r5, [r4, #12]
 8006518:	6833      	ldreq	r3, [r6, #0]
 800651a:	1aed      	subeq	r5, r5, r3
 800651c:	68a3      	ldr	r3, [r4, #8]
 800651e:	bf0c      	ite	eq
 8006520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006524:	2500      	movne	r5, #0
 8006526:	4293      	cmp	r3, r2
 8006528:	bfc4      	itt	gt
 800652a:	1a9b      	subgt	r3, r3, r2
 800652c:	18ed      	addgt	r5, r5, r3
 800652e:	2600      	movs	r6, #0
 8006530:	341a      	adds	r4, #26
 8006532:	42b5      	cmp	r5, r6
 8006534:	d11a      	bne.n	800656c <_printf_common+0xc8>
 8006536:	2000      	movs	r0, #0
 8006538:	e008      	b.n	800654c <_printf_common+0xa8>
 800653a:	2301      	movs	r3, #1
 800653c:	4652      	mov	r2, sl
 800653e:	4649      	mov	r1, r9
 8006540:	4638      	mov	r0, r7
 8006542:	47c0      	blx	r8
 8006544:	3001      	adds	r0, #1
 8006546:	d103      	bne.n	8006550 <_printf_common+0xac>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	3501      	adds	r5, #1
 8006552:	e7c6      	b.n	80064e2 <_printf_common+0x3e>
 8006554:	18e1      	adds	r1, r4, r3
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	2030      	movs	r0, #48	; 0x30
 800655a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800655e:	4422      	add	r2, r4
 8006560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006568:	3302      	adds	r3, #2
 800656a:	e7c7      	b.n	80064fc <_printf_common+0x58>
 800656c:	2301      	movs	r3, #1
 800656e:	4622      	mov	r2, r4
 8006570:	4649      	mov	r1, r9
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	3001      	adds	r0, #1
 8006578:	d0e6      	beq.n	8006548 <_printf_common+0xa4>
 800657a:	3601      	adds	r6, #1
 800657c:	e7d9      	b.n	8006532 <_printf_common+0x8e>
	...

08006580 <_printf_i>:
 8006580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	7e0f      	ldrb	r7, [r1, #24]
 8006586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006588:	2f78      	cmp	r7, #120	; 0x78
 800658a:	4691      	mov	r9, r2
 800658c:	4680      	mov	r8, r0
 800658e:	460c      	mov	r4, r1
 8006590:	469a      	mov	sl, r3
 8006592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006596:	d807      	bhi.n	80065a8 <_printf_i+0x28>
 8006598:	2f62      	cmp	r7, #98	; 0x62
 800659a:	d80a      	bhi.n	80065b2 <_printf_i+0x32>
 800659c:	2f00      	cmp	r7, #0
 800659e:	f000 80d4 	beq.w	800674a <_printf_i+0x1ca>
 80065a2:	2f58      	cmp	r7, #88	; 0x58
 80065a4:	f000 80c0 	beq.w	8006728 <_printf_i+0x1a8>
 80065a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b0:	e03a      	b.n	8006628 <_printf_i+0xa8>
 80065b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065b6:	2b15      	cmp	r3, #21
 80065b8:	d8f6      	bhi.n	80065a8 <_printf_i+0x28>
 80065ba:	a101      	add	r1, pc, #4	; (adr r1, 80065c0 <_printf_i+0x40>)
 80065bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c0:	08006619 	.word	0x08006619
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	080065a9 	.word	0x080065a9
 80065cc:	080065a9 	.word	0x080065a9
 80065d0:	080065a9 	.word	0x080065a9
 80065d4:	080065a9 	.word	0x080065a9
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080065a9 	.word	0x080065a9
 80065e0:	080065a9 	.word	0x080065a9
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	08006731 	.word	0x08006731
 80065f0:	08006659 	.word	0x08006659
 80065f4:	080066eb 	.word	0x080066eb
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	08006753 	.word	0x08006753
 8006604:	080065a9 	.word	0x080065a9
 8006608:	08006659 	.word	0x08006659
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	080066f3 	.word	0x080066f3
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	602a      	str	r2, [r5, #0]
 8006620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006628:	2301      	movs	r3, #1
 800662a:	e09f      	b.n	800676c <_printf_i+0x1ec>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	0607      	lsls	r7, r0, #24
 8006632:	f103 0104 	add.w	r1, r3, #4
 8006636:	6029      	str	r1, [r5, #0]
 8006638:	d501      	bpl.n	800663e <_printf_i+0xbe>
 800663a:	681e      	ldr	r6, [r3, #0]
 800663c:	e003      	b.n	8006646 <_printf_i+0xc6>
 800663e:	0646      	lsls	r6, r0, #25
 8006640:	d5fb      	bpl.n	800663a <_printf_i+0xba>
 8006642:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006646:	2e00      	cmp	r6, #0
 8006648:	da03      	bge.n	8006652 <_printf_i+0xd2>
 800664a:	232d      	movs	r3, #45	; 0x2d
 800664c:	4276      	negs	r6, r6
 800664e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006652:	485a      	ldr	r0, [pc, #360]	; (80067bc <_printf_i+0x23c>)
 8006654:	230a      	movs	r3, #10
 8006656:	e012      	b.n	800667e <_printf_i+0xfe>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	6029      	str	r1, [r5, #0]
 8006660:	0605      	lsls	r5, r0, #24
 8006662:	d501      	bpl.n	8006668 <_printf_i+0xe8>
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	e002      	b.n	800666e <_printf_i+0xee>
 8006668:	0641      	lsls	r1, r0, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0xe4>
 800666c:	881e      	ldrh	r6, [r3, #0]
 800666e:	4853      	ldr	r0, [pc, #332]	; (80067bc <_printf_i+0x23c>)
 8006670:	2f6f      	cmp	r7, #111	; 0x6f
 8006672:	bf0c      	ite	eq
 8006674:	2308      	moveq	r3, #8
 8006676:	230a      	movne	r3, #10
 8006678:	2100      	movs	r1, #0
 800667a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667e:	6865      	ldr	r5, [r4, #4]
 8006680:	60a5      	str	r5, [r4, #8]
 8006682:	2d00      	cmp	r5, #0
 8006684:	bfa2      	ittt	ge
 8006686:	6821      	ldrge	r1, [r4, #0]
 8006688:	f021 0104 	bicge.w	r1, r1, #4
 800668c:	6021      	strge	r1, [r4, #0]
 800668e:	b90e      	cbnz	r6, 8006694 <_printf_i+0x114>
 8006690:	2d00      	cmp	r5, #0
 8006692:	d04b      	beq.n	800672c <_printf_i+0x1ac>
 8006694:	4615      	mov	r5, r2
 8006696:	fbb6 f1f3 	udiv	r1, r6, r3
 800669a:	fb03 6711 	mls	r7, r3, r1, r6
 800669e:	5dc7      	ldrb	r7, [r0, r7]
 80066a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a4:	4637      	mov	r7, r6
 80066a6:	42bb      	cmp	r3, r7
 80066a8:	460e      	mov	r6, r1
 80066aa:	d9f4      	bls.n	8006696 <_printf_i+0x116>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d10b      	bne.n	80066c8 <_printf_i+0x148>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	07de      	lsls	r6, r3, #31
 80066b4:	d508      	bpl.n	80066c8 <_printf_i+0x148>
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	6861      	ldr	r1, [r4, #4]
 80066ba:	4299      	cmp	r1, r3
 80066bc:	bfde      	ittt	le
 80066be:	2330      	movle	r3, #48	; 0x30
 80066c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066c8:	1b52      	subs	r2, r2, r5
 80066ca:	6122      	str	r2, [r4, #16]
 80066cc:	f8cd a000 	str.w	sl, [sp]
 80066d0:	464b      	mov	r3, r9
 80066d2:	aa03      	add	r2, sp, #12
 80066d4:	4621      	mov	r1, r4
 80066d6:	4640      	mov	r0, r8
 80066d8:	f7ff fee4 	bl	80064a4 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	d14a      	bne.n	8006776 <_printf_i+0x1f6>
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	b004      	add	sp, #16
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	f043 0320 	orr.w	r3, r3, #32
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	4833      	ldr	r0, [pc, #204]	; (80067c0 <_printf_i+0x240>)
 80066f4:	2778      	movs	r7, #120	; 0x78
 80066f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	6829      	ldr	r1, [r5, #0]
 80066fe:	061f      	lsls	r7, r3, #24
 8006700:	f851 6b04 	ldr.w	r6, [r1], #4
 8006704:	d402      	bmi.n	800670c <_printf_i+0x18c>
 8006706:	065f      	lsls	r7, r3, #25
 8006708:	bf48      	it	mi
 800670a:	b2b6      	uxthmi	r6, r6
 800670c:	07df      	lsls	r7, r3, #31
 800670e:	bf48      	it	mi
 8006710:	f043 0320 	orrmi.w	r3, r3, #32
 8006714:	6029      	str	r1, [r5, #0]
 8006716:	bf48      	it	mi
 8006718:	6023      	strmi	r3, [r4, #0]
 800671a:	b91e      	cbnz	r6, 8006724 <_printf_i+0x1a4>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f023 0320 	bic.w	r3, r3, #32
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	2310      	movs	r3, #16
 8006726:	e7a7      	b.n	8006678 <_printf_i+0xf8>
 8006728:	4824      	ldr	r0, [pc, #144]	; (80067bc <_printf_i+0x23c>)
 800672a:	e7e4      	b.n	80066f6 <_printf_i+0x176>
 800672c:	4615      	mov	r5, r2
 800672e:	e7bd      	b.n	80066ac <_printf_i+0x12c>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	6826      	ldr	r6, [r4, #0]
 8006734:	6961      	ldr	r1, [r4, #20]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6028      	str	r0, [r5, #0]
 800673a:	0635      	lsls	r5, r6, #24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	d501      	bpl.n	8006744 <_printf_i+0x1c4>
 8006740:	6019      	str	r1, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0x1ca>
 8006744:	0670      	lsls	r0, r6, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0x1c0>
 8006748:	8019      	strh	r1, [r3, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	4615      	mov	r5, r2
 8006750:	e7bc      	b.n	80066cc <_printf_i+0x14c>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	4628      	mov	r0, r5
 8006760:	f7f9 fd66 	bl	8000230 <memchr>
 8006764:	b108      	cbz	r0, 800676a <_printf_i+0x1ea>
 8006766:	1b40      	subs	r0, r0, r5
 8006768:	6060      	str	r0, [r4, #4]
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	e7aa      	b.n	80066cc <_printf_i+0x14c>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	462a      	mov	r2, r5
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d0ad      	beq.n	80066e0 <_printf_i+0x160>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	d413      	bmi.n	80067b2 <_printf_i+0x232>
 800678a:	68e0      	ldr	r0, [r4, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	4298      	cmp	r0, r3
 8006790:	bfb8      	it	lt
 8006792:	4618      	movlt	r0, r3
 8006794:	e7a6      	b.n	80066e4 <_printf_i+0x164>
 8006796:	2301      	movs	r3, #1
 8006798:	4632      	mov	r2, r6
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	47d0      	blx	sl
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09d      	beq.n	80066e0 <_printf_i+0x160>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9903      	ldr	r1, [sp, #12]
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf2      	bgt.n	8006796 <_printf_i+0x216>
 80067b0:	e7eb      	b.n	800678a <_printf_i+0x20a>
 80067b2:	2500      	movs	r5, #0
 80067b4:	f104 0619 	add.w	r6, r4, #25
 80067b8:	e7f5      	b.n	80067a6 <_printf_i+0x226>
 80067ba:	bf00      	nop
 80067bc:	0800a83e 	.word	0x0800a83e
 80067c0:	0800a84f 	.word	0x0800a84f

080067c4 <_scanf_float>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	b087      	sub	sp, #28
 80067ca:	4617      	mov	r7, r2
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	688b      	ldr	r3, [r1, #8]
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067d6:	bf83      	ittte	hi
 80067d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80067dc:	195b      	addhi	r3, r3, r5
 80067de:	9302      	strhi	r3, [sp, #8]
 80067e0:	2300      	movls	r3, #0
 80067e2:	bf86      	itte	hi
 80067e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067e8:	608b      	strhi	r3, [r1, #8]
 80067ea:	9302      	strls	r3, [sp, #8]
 80067ec:	680b      	ldr	r3, [r1, #0]
 80067ee:	468b      	mov	fp, r1
 80067f0:	2500      	movs	r5, #0
 80067f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80067fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067fe:	4680      	mov	r8, r0
 8006800:	460c      	mov	r4, r1
 8006802:	465e      	mov	r6, fp
 8006804:	46aa      	mov	sl, r5
 8006806:	46a9      	mov	r9, r5
 8006808:	9501      	str	r5, [sp, #4]
 800680a:	68a2      	ldr	r2, [r4, #8]
 800680c:	b152      	cbz	r2, 8006824 <_scanf_float+0x60>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b4e      	cmp	r3, #78	; 0x4e
 8006814:	d864      	bhi.n	80068e0 <_scanf_float+0x11c>
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d83c      	bhi.n	8006894 <_scanf_float+0xd0>
 800681a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800681e:	b2c8      	uxtb	r0, r1
 8006820:	280e      	cmp	r0, #14
 8006822:	d93a      	bls.n	800689a <_scanf_float+0xd6>
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	d003      	beq.n	8006832 <_scanf_float+0x6e>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006836:	f1ba 0f01 	cmp.w	sl, #1
 800683a:	f200 8113 	bhi.w	8006a64 <_scanf_float+0x2a0>
 800683e:	455e      	cmp	r6, fp
 8006840:	f200 8105 	bhi.w	8006a4e <_scanf_float+0x28a>
 8006844:	2501      	movs	r5, #1
 8006846:	4628      	mov	r0, r5
 8006848:	b007      	add	sp, #28
 800684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006852:	2a0d      	cmp	r2, #13
 8006854:	d8e6      	bhi.n	8006824 <_scanf_float+0x60>
 8006856:	a101      	add	r1, pc, #4	; (adr r1, 800685c <_scanf_float+0x98>)
 8006858:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800685c:	0800699b 	.word	0x0800699b
 8006860:	08006825 	.word	0x08006825
 8006864:	08006825 	.word	0x08006825
 8006868:	08006825 	.word	0x08006825
 800686c:	080069fb 	.word	0x080069fb
 8006870:	080069d3 	.word	0x080069d3
 8006874:	08006825 	.word	0x08006825
 8006878:	08006825 	.word	0x08006825
 800687c:	080069a9 	.word	0x080069a9
 8006880:	08006825 	.word	0x08006825
 8006884:	08006825 	.word	0x08006825
 8006888:	08006825 	.word	0x08006825
 800688c:	08006825 	.word	0x08006825
 8006890:	08006961 	.word	0x08006961
 8006894:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006898:	e7db      	b.n	8006852 <_scanf_float+0x8e>
 800689a:	290e      	cmp	r1, #14
 800689c:	d8c2      	bhi.n	8006824 <_scanf_float+0x60>
 800689e:	a001      	add	r0, pc, #4	; (adr r0, 80068a4 <_scanf_float+0xe0>)
 80068a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068a4:	08006953 	.word	0x08006953
 80068a8:	08006825 	.word	0x08006825
 80068ac:	08006953 	.word	0x08006953
 80068b0:	080069e7 	.word	0x080069e7
 80068b4:	08006825 	.word	0x08006825
 80068b8:	08006901 	.word	0x08006901
 80068bc:	0800693d 	.word	0x0800693d
 80068c0:	0800693d 	.word	0x0800693d
 80068c4:	0800693d 	.word	0x0800693d
 80068c8:	0800693d 	.word	0x0800693d
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	0800693d 	.word	0x0800693d
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	2b6e      	cmp	r3, #110	; 0x6e
 80068e2:	d809      	bhi.n	80068f8 <_scanf_float+0x134>
 80068e4:	2b60      	cmp	r3, #96	; 0x60
 80068e6:	d8b2      	bhi.n	800684e <_scanf_float+0x8a>
 80068e8:	2b54      	cmp	r3, #84	; 0x54
 80068ea:	d077      	beq.n	80069dc <_scanf_float+0x218>
 80068ec:	2b59      	cmp	r3, #89	; 0x59
 80068ee:	d199      	bne.n	8006824 <_scanf_float+0x60>
 80068f0:	2d07      	cmp	r5, #7
 80068f2:	d197      	bne.n	8006824 <_scanf_float+0x60>
 80068f4:	2508      	movs	r5, #8
 80068f6:	e029      	b.n	800694c <_scanf_float+0x188>
 80068f8:	2b74      	cmp	r3, #116	; 0x74
 80068fa:	d06f      	beq.n	80069dc <_scanf_float+0x218>
 80068fc:	2b79      	cmp	r3, #121	; 0x79
 80068fe:	e7f6      	b.n	80068ee <_scanf_float+0x12a>
 8006900:	6821      	ldr	r1, [r4, #0]
 8006902:	05c8      	lsls	r0, r1, #23
 8006904:	d51a      	bpl.n	800693c <_scanf_float+0x178>
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800690c:	6021      	str	r1, [r4, #0]
 800690e:	f109 0901 	add.w	r9, r9, #1
 8006912:	b11b      	cbz	r3, 800691c <_scanf_float+0x158>
 8006914:	3b01      	subs	r3, #1
 8006916:	3201      	adds	r2, #1
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	60a2      	str	r2, [r4, #8]
 800691c:	68a3      	ldr	r3, [r4, #8]
 800691e:	3b01      	subs	r3, #1
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	3301      	adds	r3, #1
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3b01      	subs	r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	f340 8084 	ble.w	8006a3c <_scanf_float+0x278>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	3301      	adds	r3, #1
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	e766      	b.n	800680a <_scanf_float+0x46>
 800693c:	eb1a 0f05 	cmn.w	sl, r5
 8006940:	f47f af70 	bne.w	8006824 <_scanf_float+0x60>
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	f806 3b01 	strb.w	r3, [r6], #1
 8006950:	e7e4      	b.n	800691c <_scanf_float+0x158>
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	0610      	lsls	r0, r2, #24
 8006956:	f57f af65 	bpl.w	8006824 <_scanf_float+0x60>
 800695a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800695e:	e7f4      	b.n	800694a <_scanf_float+0x186>
 8006960:	f1ba 0f00 	cmp.w	sl, #0
 8006964:	d10e      	bne.n	8006984 <_scanf_float+0x1c0>
 8006966:	f1b9 0f00 	cmp.w	r9, #0
 800696a:	d10e      	bne.n	800698a <_scanf_float+0x1c6>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006972:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006976:	d108      	bne.n	800698a <_scanf_float+0x1c6>
 8006978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	f04f 0a01 	mov.w	sl, #1
 8006982:	e7e3      	b.n	800694c <_scanf_float+0x188>
 8006984:	f1ba 0f02 	cmp.w	sl, #2
 8006988:	d055      	beq.n	8006a36 <_scanf_float+0x272>
 800698a:	2d01      	cmp	r5, #1
 800698c:	d002      	beq.n	8006994 <_scanf_float+0x1d0>
 800698e:	2d04      	cmp	r5, #4
 8006990:	f47f af48 	bne.w	8006824 <_scanf_float+0x60>
 8006994:	3501      	adds	r5, #1
 8006996:	b2ed      	uxtb	r5, r5
 8006998:	e7d8      	b.n	800694c <_scanf_float+0x188>
 800699a:	f1ba 0f01 	cmp.w	sl, #1
 800699e:	f47f af41 	bne.w	8006824 <_scanf_float+0x60>
 80069a2:	f04f 0a02 	mov.w	sl, #2
 80069a6:	e7d1      	b.n	800694c <_scanf_float+0x188>
 80069a8:	b97d      	cbnz	r5, 80069ca <_scanf_float+0x206>
 80069aa:	f1b9 0f00 	cmp.w	r9, #0
 80069ae:	f47f af3c 	bne.w	800682a <_scanf_float+0x66>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069bc:	f47f af39 	bne.w	8006832 <_scanf_float+0x6e>
 80069c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	2501      	movs	r5, #1
 80069c8:	e7c0      	b.n	800694c <_scanf_float+0x188>
 80069ca:	2d03      	cmp	r5, #3
 80069cc:	d0e2      	beq.n	8006994 <_scanf_float+0x1d0>
 80069ce:	2d05      	cmp	r5, #5
 80069d0:	e7de      	b.n	8006990 <_scanf_float+0x1cc>
 80069d2:	2d02      	cmp	r5, #2
 80069d4:	f47f af26 	bne.w	8006824 <_scanf_float+0x60>
 80069d8:	2503      	movs	r5, #3
 80069da:	e7b7      	b.n	800694c <_scanf_float+0x188>
 80069dc:	2d06      	cmp	r5, #6
 80069de:	f47f af21 	bne.w	8006824 <_scanf_float+0x60>
 80069e2:	2507      	movs	r5, #7
 80069e4:	e7b2      	b.n	800694c <_scanf_float+0x188>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	0591      	lsls	r1, r2, #22
 80069ea:	f57f af1b 	bpl.w	8006824 <_scanf_float+0x60>
 80069ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80069f2:	6022      	str	r2, [r4, #0]
 80069f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80069f8:	e7a8      	b.n	800694c <_scanf_float+0x188>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a04:	d006      	beq.n	8006a14 <_scanf_float+0x250>
 8006a06:	0550      	lsls	r0, r2, #21
 8006a08:	f57f af0c 	bpl.w	8006824 <_scanf_float+0x60>
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	f43f af0f 	beq.w	8006832 <_scanf_float+0x6e>
 8006a14:	0591      	lsls	r1, r2, #22
 8006a16:	bf58      	it	pl
 8006a18:	9901      	ldrpl	r1, [sp, #4]
 8006a1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a1e:	bf58      	it	pl
 8006a20:	eba9 0101 	subpl.w	r1, r9, r1
 8006a24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a28:	bf58      	it	pl
 8006a2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	f04f 0900 	mov.w	r9, #0
 8006a34:	e78a      	b.n	800694c <_scanf_float+0x188>
 8006a36:	f04f 0a03 	mov.w	sl, #3
 8006a3a:	e787      	b.n	800694c <_scanf_float+0x188>
 8006a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a40:	4639      	mov	r1, r7
 8006a42:	4640      	mov	r0, r8
 8006a44:	4798      	blx	r3
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f43f aedf 	beq.w	800680a <_scanf_float+0x46>
 8006a4c:	e6ea      	b.n	8006824 <_scanf_float+0x60>
 8006a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a56:	463a      	mov	r2, r7
 8006a58:	4640      	mov	r0, r8
 8006a5a:	4798      	blx	r3
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	e6ec      	b.n	800683e <_scanf_float+0x7a>
 8006a64:	1e6b      	subs	r3, r5, #1
 8006a66:	2b06      	cmp	r3, #6
 8006a68:	d825      	bhi.n	8006ab6 <_scanf_float+0x2f2>
 8006a6a:	2d02      	cmp	r5, #2
 8006a6c:	d836      	bhi.n	8006adc <_scanf_float+0x318>
 8006a6e:	455e      	cmp	r6, fp
 8006a70:	f67f aee8 	bls.w	8006844 <_scanf_float+0x80>
 8006a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a7c:	463a      	mov	r2, r7
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4798      	blx	r3
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	e7f1      	b.n	8006a6e <_scanf_float+0x2aa>
 8006a8a:	9802      	ldr	r0, [sp, #8]
 8006a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	463a      	mov	r2, r7
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4798      	blx	r3
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	fa5f fa8a 	uxtb.w	sl, sl
 8006aaa:	f1ba 0f02 	cmp.w	sl, #2
 8006aae:	d1ec      	bne.n	8006a8a <_scanf_float+0x2c6>
 8006ab0:	3d03      	subs	r5, #3
 8006ab2:	b2ed      	uxtb	r5, r5
 8006ab4:	1b76      	subs	r6, r6, r5
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	05da      	lsls	r2, r3, #23
 8006aba:	d52f      	bpl.n	8006b1c <_scanf_float+0x358>
 8006abc:	055b      	lsls	r3, r3, #21
 8006abe:	d510      	bpl.n	8006ae2 <_scanf_float+0x31e>
 8006ac0:	455e      	cmp	r6, fp
 8006ac2:	f67f aebf 	bls.w	8006844 <_scanf_float+0x80>
 8006ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ace:	463a      	mov	r2, r7
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4798      	blx	r3
 8006ad4:	6923      	ldr	r3, [r4, #16]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	e7f1      	b.n	8006ac0 <_scanf_float+0x2fc>
 8006adc:	46aa      	mov	sl, r5
 8006ade:	9602      	str	r6, [sp, #8]
 8006ae0:	e7df      	b.n	8006aa2 <_scanf_float+0x2de>
 8006ae2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	2965      	cmp	r1, #101	; 0x65
 8006aea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006aee:	f106 35ff 	add.w	r5, r6, #4294967295
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	d00c      	beq.n	8006b10 <_scanf_float+0x34c>
 8006af6:	2945      	cmp	r1, #69	; 0x45
 8006af8:	d00a      	beq.n	8006b10 <_scanf_float+0x34c>
 8006afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006afe:	463a      	mov	r2, r7
 8006b00:	4640      	mov	r0, r8
 8006b02:	4798      	blx	r3
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	1eb5      	subs	r5, r6, #2
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b14:	463a      	mov	r2, r7
 8006b16:	4640      	mov	r0, r8
 8006b18:	4798      	blx	r3
 8006b1a:	462e      	mov	r6, r5
 8006b1c:	6825      	ldr	r5, [r4, #0]
 8006b1e:	f015 0510 	ands.w	r5, r5, #16
 8006b22:	d158      	bne.n	8006bd6 <_scanf_float+0x412>
 8006b24:	7035      	strb	r5, [r6, #0]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b30:	d11c      	bne.n	8006b6c <_scanf_float+0x3a8>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	454b      	cmp	r3, r9
 8006b36:	eba3 0209 	sub.w	r2, r3, r9
 8006b3a:	d124      	bne.n	8006b86 <_scanf_float+0x3c2>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4659      	mov	r1, fp
 8006b40:	4640      	mov	r0, r8
 8006b42:	f002 fd09 	bl	8009558 <_strtod_r>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	6821      	ldr	r1, [r4, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f011 0f02 	tst.w	r1, #2
 8006b50:	ec57 6b10 	vmov	r6, r7, d0
 8006b54:	f103 0204 	add.w	r2, r3, #4
 8006b58:	d020      	beq.n	8006b9c <_scanf_float+0x3d8>
 8006b5a:	9903      	ldr	r1, [sp, #12]
 8006b5c:	600a      	str	r2, [r1, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	e9c3 6700 	strd	r6, r7, [r3]
 8006b64:	68e3      	ldr	r3, [r4, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60e3      	str	r3, [r4, #12]
 8006b6a:	e66c      	b.n	8006846 <_scanf_float+0x82>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0e4      	beq.n	8006b3c <_scanf_float+0x378>
 8006b72:	9905      	ldr	r1, [sp, #20]
 8006b74:	230a      	movs	r3, #10
 8006b76:	462a      	mov	r2, r5
 8006b78:	3101      	adds	r1, #1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f002 fd74 	bl	8009668 <_strtol_r>
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	9e05      	ldr	r6, [sp, #20]
 8006b84:	1ac2      	subs	r2, r0, r3
 8006b86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	bf28      	it	cs
 8006b8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b92:	4912      	ldr	r1, [pc, #72]	; (8006bdc <_scanf_float+0x418>)
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 f955 	bl	8006e44 <siprintf>
 8006b9a:	e7cf      	b.n	8006b3c <_scanf_float+0x378>
 8006b9c:	f011 0f04 	tst.w	r1, #4
 8006ba0:	9903      	ldr	r1, [sp, #12]
 8006ba2:	600a      	str	r2, [r1, #0]
 8006ba4:	d1db      	bne.n	8006b5e <_scanf_float+0x39a>
 8006ba6:	f8d3 8000 	ldr.w	r8, [r3]
 8006baa:	ee10 2a10 	vmov	r2, s0
 8006bae:	ee10 0a10 	vmov	r0, s0
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	f7f9 ffe9 	bl	8000b8c <__aeabi_dcmpun>
 8006bba:	b128      	cbz	r0, 8006bc8 <_scanf_float+0x404>
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <_scanf_float+0x41c>)
 8006bbe:	f000 fb25 	bl	800720c <nanf>
 8006bc2:	ed88 0a00 	vstr	s0, [r8]
 8006bc6:	e7cd      	b.n	8006b64 <_scanf_float+0x3a0>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	4639      	mov	r1, r7
 8006bcc:	f7fa f83c 	bl	8000c48 <__aeabi_d2f>
 8006bd0:	f8c8 0000 	str.w	r0, [r8]
 8006bd4:	e7c6      	b.n	8006b64 <_scanf_float+0x3a0>
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	e635      	b.n	8006846 <_scanf_float+0x82>
 8006bda:	bf00      	nop
 8006bdc:	0800a860 	.word	0x0800a860
 8006be0:	0800a911 	.word	0x0800a911

08006be4 <std>:
 8006be4:	2300      	movs	r3, #0
 8006be6:	b510      	push	{r4, lr}
 8006be8:	4604      	mov	r4, r0
 8006bea:	e9c0 3300 	strd	r3, r3, [r0]
 8006bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf2:	6083      	str	r3, [r0, #8]
 8006bf4:	8181      	strh	r1, [r0, #12]
 8006bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf8:	81c2      	strh	r2, [r0, #14]
 8006bfa:	6183      	str	r3, [r0, #24]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	2208      	movs	r2, #8
 8006c00:	305c      	adds	r0, #92	; 0x5c
 8006c02:	f000 fa17 	bl	8007034 <memset>
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <std+0x58>)
 8006c08:	6263      	str	r3, [r4, #36]	; 0x24
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <std+0x5c>)
 8006c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <std+0x60>)
 8006c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <std+0x64>)
 8006c14:	6323      	str	r3, [r4, #48]	; 0x30
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <std+0x68>)
 8006c18:	6224      	str	r4, [r4, #32]
 8006c1a:	429c      	cmp	r4, r3
 8006c1c:	d006      	beq.n	8006c2c <std+0x48>
 8006c1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c22:	4294      	cmp	r4, r2
 8006c24:	d002      	beq.n	8006c2c <std+0x48>
 8006c26:	33d0      	adds	r3, #208	; 0xd0
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	d105      	bne.n	8006c38 <std+0x54>
 8006c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c34:	f000 bae6 	b.w	8007204 <__retarget_lock_init_recursive>
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08006e85 	.word	0x08006e85
 8006c40:	08006ea7 	.word	0x08006ea7
 8006c44:	08006edf 	.word	0x08006edf
 8006c48:	08006f03 	.word	0x08006f03
 8006c4c:	20000364 	.word	0x20000364

08006c50 <stdio_exit_handler>:
 8006c50:	4a02      	ldr	r2, [pc, #8]	; (8006c5c <stdio_exit_handler+0xc>)
 8006c52:	4903      	ldr	r1, [pc, #12]	; (8006c60 <stdio_exit_handler+0x10>)
 8006c54:	4803      	ldr	r0, [pc, #12]	; (8006c64 <stdio_exit_handler+0x14>)
 8006c56:	f000 b869 	b.w	8006d2c <_fwalk_sglue>
 8006c5a:	bf00      	nop
 8006c5c:	20000028 	.word	0x20000028
 8006c60:	08009cb1 	.word	0x08009cb1
 8006c64:	20000034 	.word	0x20000034

08006c68 <cleanup_stdio>:
 8006c68:	6841      	ldr	r1, [r0, #4]
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <cleanup_stdio+0x34>)
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	d001      	beq.n	8006c78 <cleanup_stdio+0x10>
 8006c74:	f003 f81c 	bl	8009cb0 <_fflush_r>
 8006c78:	68a1      	ldr	r1, [r4, #8]
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <cleanup_stdio+0x38>)
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d002      	beq.n	8006c86 <cleanup_stdio+0x1e>
 8006c80:	4620      	mov	r0, r4
 8006c82:	f003 f815 	bl	8009cb0 <_fflush_r>
 8006c86:	68e1      	ldr	r1, [r4, #12]
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <cleanup_stdio+0x3c>)
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	d004      	beq.n	8006c98 <cleanup_stdio+0x30>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	f003 b80c 	b.w	8009cb0 <_fflush_r>
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000364 	.word	0x20000364
 8006ca0:	200003cc 	.word	0x200003cc
 8006ca4:	20000434 	.word	0x20000434

08006ca8 <global_stdio_init.part.0>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <global_stdio_init.part.0+0x30>)
 8006cac:	4c0b      	ldr	r4, [pc, #44]	; (8006cdc <global_stdio_init.part.0+0x34>)
 8006cae:	4a0c      	ldr	r2, [pc, #48]	; (8006ce0 <global_stdio_init.part.0+0x38>)
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	f7ff ff94 	bl	8006be4 <std>
 8006cbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	2109      	movs	r1, #9
 8006cc4:	f7ff ff8e 	bl	8006be4 <std>
 8006cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ccc:	2202      	movs	r2, #2
 8006cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd2:	2112      	movs	r1, #18
 8006cd4:	f7ff bf86 	b.w	8006be4 <std>
 8006cd8:	2000049c 	.word	0x2000049c
 8006cdc:	20000364 	.word	0x20000364
 8006ce0:	08006c51 	.word	0x08006c51

08006ce4 <__sfp_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sfp_lock_acquire+0x8>)
 8006ce6:	f000 ba8e 	b.w	8007206 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	200004a5 	.word	0x200004a5

08006cf0 <__sfp_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sfp_lock_release+0x8>)
 8006cf2:	f000 ba89 	b.w	8007208 <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	200004a5 	.word	0x200004a5

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sfp_lock_acquire>
 8006d04:	6a23      	ldr	r3, [r4, #32]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sfp_lock_release>
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <__sinit+0x28>)
 8006d12:	6223      	str	r3, [r4, #32]
 8006d14:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <__sinit+0x2c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f5      	bne.n	8006d08 <__sinit+0xc>
 8006d1c:	f7ff ffc4 	bl	8006ca8 <global_stdio_init.part.0>
 8006d20:	e7f2      	b.n	8006d08 <__sinit+0xc>
 8006d22:	bf00      	nop
 8006d24:	08006c69 	.word	0x08006c69
 8006d28:	2000049c 	.word	0x2000049c

08006d2c <_fwalk_sglue>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	4607      	mov	r7, r0
 8006d32:	4688      	mov	r8, r1
 8006d34:	4614      	mov	r4, r2
 8006d36:	2600      	movs	r6, #0
 8006d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006d40:	d505      	bpl.n	8006d4e <_fwalk_sglue+0x22>
 8006d42:	6824      	ldr	r4, [r4, #0]
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	d1f7      	bne.n	8006d38 <_fwalk_sglue+0xc>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d907      	bls.n	8006d64 <_fwalk_sglue+0x38>
 8006d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	d003      	beq.n	8006d64 <_fwalk_sglue+0x38>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c0      	blx	r8
 8006d62:	4306      	orrs	r6, r0
 8006d64:	3568      	adds	r5, #104	; 0x68
 8006d66:	e7e9      	b.n	8006d3c <_fwalk_sglue+0x10>

08006d68 <iprintf>:
 8006d68:	b40f      	push	{r0, r1, r2, r3}
 8006d6a:	b507      	push	{r0, r1, r2, lr}
 8006d6c:	4906      	ldr	r1, [pc, #24]	; (8006d88 <iprintf+0x20>)
 8006d6e:	ab04      	add	r3, sp, #16
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d76:	6881      	ldr	r1, [r0, #8]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	f002 fdf9 	bl	8009970 <_vfiprintf_r>
 8006d7e:	b003      	add	sp, #12
 8006d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d84:	b004      	add	sp, #16
 8006d86:	4770      	bx	lr
 8006d88:	20000080 	.word	0x20000080

08006d8c <_puts_r>:
 8006d8c:	6a03      	ldr	r3, [r0, #32]
 8006d8e:	b570      	push	{r4, r5, r6, lr}
 8006d90:	6884      	ldr	r4, [r0, #8]
 8006d92:	4605      	mov	r5, r0
 8006d94:	460e      	mov	r6, r1
 8006d96:	b90b      	cbnz	r3, 8006d9c <_puts_r+0x10>
 8006d98:	f7ff ffb0 	bl	8006cfc <__sinit>
 8006d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d9e:	07db      	lsls	r3, r3, #31
 8006da0:	d405      	bmi.n	8006dae <_puts_r+0x22>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	0598      	lsls	r0, r3, #22
 8006da6:	d402      	bmi.n	8006dae <_puts_r+0x22>
 8006da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006daa:	f000 fa2c 	bl	8007206 <__retarget_lock_acquire_recursive>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	0719      	lsls	r1, r3, #28
 8006db2:	d513      	bpl.n	8006ddc <_puts_r+0x50>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b18b      	cbz	r3, 8006ddc <_puts_r+0x50>
 8006db8:	3e01      	subs	r6, #1
 8006dba:	68a3      	ldr	r3, [r4, #8]
 8006dbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	60a3      	str	r3, [r4, #8]
 8006dc4:	b9e9      	cbnz	r1, 8006e02 <_puts_r+0x76>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da2e      	bge.n	8006e28 <_puts_r+0x9c>
 8006dca:	4622      	mov	r2, r4
 8006dcc:	210a      	movs	r1, #10
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f89b 	bl	8006f0a <__swbuf_r>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d007      	beq.n	8006de8 <_puts_r+0x5c>
 8006dd8:	250a      	movs	r5, #10
 8006dda:	e007      	b.n	8006dec <_puts_r+0x60>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f8d0 	bl	8006f84 <__swsetup_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d0e7      	beq.n	8006db8 <_puts_r+0x2c>
 8006de8:	f04f 35ff 	mov.w	r5, #4294967295
 8006dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dee:	07da      	lsls	r2, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_puts_r+0x72>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_puts_r+0x72>
 8006df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfa:	f000 fa05 	bl	8007208 <__retarget_lock_release_recursive>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da04      	bge.n	8006e10 <_puts_r+0x84>
 8006e06:	69a2      	ldr	r2, [r4, #24]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	dc06      	bgt.n	8006e1a <_puts_r+0x8e>
 8006e0c:	290a      	cmp	r1, #10
 8006e0e:	d004      	beq.n	8006e1a <_puts_r+0x8e>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	7019      	strb	r1, [r3, #0]
 8006e18:	e7cf      	b.n	8006dba <_puts_r+0x2e>
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f874 	bl	8006f0a <__swbuf_r>
 8006e22:	3001      	adds	r0, #1
 8006e24:	d1c9      	bne.n	8006dba <_puts_r+0x2e>
 8006e26:	e7df      	b.n	8006de8 <_puts_r+0x5c>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	250a      	movs	r5, #10
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	701d      	strb	r5, [r3, #0]
 8006e32:	e7db      	b.n	8006dec <_puts_r+0x60>

08006e34 <puts>:
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <puts+0xc>)
 8006e36:	4601      	mov	r1, r0
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f7ff bfa7 	b.w	8006d8c <_puts_r>
 8006e3e:	bf00      	nop
 8006e40:	20000080 	.word	0x20000080

08006e44 <siprintf>:
 8006e44:	b40e      	push	{r1, r2, r3}
 8006e46:	b500      	push	{lr}
 8006e48:	b09c      	sub	sp, #112	; 0x70
 8006e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	9006      	str	r0, [sp, #24]
 8006e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <siprintf+0x38>)
 8006e56:	9107      	str	r1, [sp, #28]
 8006e58:	9104      	str	r1, [sp, #16]
 8006e5a:	4909      	ldr	r1, [pc, #36]	; (8006e80 <siprintf+0x3c>)
 8006e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	a902      	add	r1, sp, #8
 8006e68:	f002 fc5a 	bl	8009720 <_svfiprintf_r>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	b01c      	add	sp, #112	; 0x70
 8006e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e78:	b003      	add	sp, #12
 8006e7a:	4770      	bx	lr
 8006e7c:	20000080 	.word	0x20000080
 8006e80:	ffff0208 	.word	0xffff0208

08006e84 <__sread>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	460c      	mov	r4, r1
 8006e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8c:	f000 f95c 	bl	8007148 <_read_r>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	bfab      	itete	ge
 8006e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e96:	89a3      	ldrhlt	r3, [r4, #12]
 8006e98:	181b      	addge	r3, r3, r0
 8006e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e9e:	bfac      	ite	ge
 8006ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ea2:	81a3      	strhlt	r3, [r4, #12]
 8006ea4:	bd10      	pop	{r4, pc}

08006ea6 <__swrite>:
 8006ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eaa:	461f      	mov	r7, r3
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	05db      	lsls	r3, r3, #23
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	d505      	bpl.n	8006ec4 <__swrite+0x1e>
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f000 f930 	bl	8007124 <_lseek_r>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	f000 b957 	b.w	800718c <_write_r>

08006ede <__sseek>:
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee6:	f000 f91d 	bl	8007124 <_lseek_r>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	bf15      	itete	ne
 8006ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006efa:	81a3      	strheq	r3, [r4, #12]
 8006efc:	bf18      	it	ne
 8006efe:	81a3      	strhne	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__sclose>:
 8006f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f06:	f000 b8fd 	b.w	8007104 <_close_r>

08006f0a <__swbuf_r>:
 8006f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	4614      	mov	r4, r2
 8006f10:	4605      	mov	r5, r0
 8006f12:	b118      	cbz	r0, 8006f1c <__swbuf_r+0x12>
 8006f14:	6a03      	ldr	r3, [r0, #32]
 8006f16:	b90b      	cbnz	r3, 8006f1c <__swbuf_r+0x12>
 8006f18:	f7ff fef0 	bl	8006cfc <__sinit>
 8006f1c:	69a3      	ldr	r3, [r4, #24]
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	071a      	lsls	r2, r3, #28
 8006f24:	d525      	bpl.n	8006f72 <__swbuf_r+0x68>
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	b31b      	cbz	r3, 8006f72 <__swbuf_r+0x68>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	6922      	ldr	r2, [r4, #16]
 8006f2e:	1a98      	subs	r0, r3, r2
 8006f30:	6963      	ldr	r3, [r4, #20]
 8006f32:	b2f6      	uxtb	r6, r6
 8006f34:	4283      	cmp	r3, r0
 8006f36:	4637      	mov	r7, r6
 8006f38:	dc04      	bgt.n	8006f44 <__swbuf_r+0x3a>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f002 feb7 	bl	8009cb0 <_fflush_r>
 8006f42:	b9e0      	cbnz	r0, 8006f7e <__swbuf_r+0x74>
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	60a3      	str	r3, [r4, #8]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	701e      	strb	r6, [r3, #0]
 8006f52:	6962      	ldr	r2, [r4, #20]
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d004      	beq.n	8006f64 <__swbuf_r+0x5a>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	07db      	lsls	r3, r3, #31
 8006f5e:	d506      	bpl.n	8006f6e <__swbuf_r+0x64>
 8006f60:	2e0a      	cmp	r6, #10
 8006f62:	d104      	bne.n	8006f6e <__swbuf_r+0x64>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	f002 fea2 	bl	8009cb0 <_fflush_r>
 8006f6c:	b938      	cbnz	r0, 8006f7e <__swbuf_r+0x74>
 8006f6e:	4638      	mov	r0, r7
 8006f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f72:	4621      	mov	r1, r4
 8006f74:	4628      	mov	r0, r5
 8006f76:	f000 f805 	bl	8006f84 <__swsetup_r>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0d5      	beq.n	8006f2a <__swbuf_r+0x20>
 8006f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8006f82:	e7f4      	b.n	8006f6e <__swbuf_r+0x64>

08006f84 <__swsetup_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4b2a      	ldr	r3, [pc, #168]	; (8007030 <__swsetup_r+0xac>)
 8006f88:	4605      	mov	r5, r0
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b118      	cbz	r0, 8006f98 <__swsetup_r+0x14>
 8006f90:	6a03      	ldr	r3, [r0, #32]
 8006f92:	b90b      	cbnz	r3, 8006f98 <__swsetup_r+0x14>
 8006f94:	f7ff feb2 	bl	8006cfc <__sinit>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9e:	0718      	lsls	r0, r3, #28
 8006fa0:	d422      	bmi.n	8006fe8 <__swsetup_r+0x64>
 8006fa2:	06d9      	lsls	r1, r3, #27
 8006fa4:	d407      	bmi.n	8006fb6 <__swsetup_r+0x32>
 8006fa6:	2309      	movs	r3, #9
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e034      	b.n	8007020 <__swsetup_r+0x9c>
 8006fb6:	0758      	lsls	r0, r3, #29
 8006fb8:	d512      	bpl.n	8006fe0 <__swsetup_r+0x5c>
 8006fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fbc:	b141      	cbz	r1, 8006fd0 <__swsetup_r+0x4c>
 8006fbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	d002      	beq.n	8006fcc <__swsetup_r+0x48>
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 ffc0 	bl	8007f4c <_free_r>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6363      	str	r3, [r4, #52]	; 0x34
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f043 0308 	orr.w	r3, r3, #8
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	b94b      	cbnz	r3, 8007000 <__swsetup_r+0x7c>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff6:	d003      	beq.n	8007000 <__swsetup_r+0x7c>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f002 feb8 	bl	8009d70 <__smakebuf_r>
 8007000:	89a0      	ldrh	r0, [r4, #12]
 8007002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007006:	f010 0301 	ands.w	r3, r0, #1
 800700a:	d00a      	beq.n	8007022 <__swsetup_r+0x9e>
 800700c:	2300      	movs	r3, #0
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	6963      	ldr	r3, [r4, #20]
 8007012:	425b      	negs	r3, r3
 8007014:	61a3      	str	r3, [r4, #24]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	b943      	cbnz	r3, 800702c <__swsetup_r+0xa8>
 800701a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800701e:	d1c4      	bne.n	8006faa <__swsetup_r+0x26>
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	0781      	lsls	r1, r0, #30
 8007024:	bf58      	it	pl
 8007026:	6963      	ldrpl	r3, [r4, #20]
 8007028:	60a3      	str	r3, [r4, #8]
 800702a:	e7f4      	b.n	8007016 <__swsetup_r+0x92>
 800702c:	2000      	movs	r0, #0
 800702e:	e7f7      	b.n	8007020 <__swsetup_r+0x9c>
 8007030:	20000080 	.word	0x20000080

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <strtok>:
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <strtok+0x5c>)
 8007046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007048:	681e      	ldr	r6, [r3, #0]
 800704a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800704c:	4605      	mov	r5, r0
 800704e:	b9fc      	cbnz	r4, 8007090 <strtok+0x4c>
 8007050:	2050      	movs	r0, #80	; 0x50
 8007052:	9101      	str	r1, [sp, #4]
 8007054:	f7fe fe94 	bl	8005d80 <malloc>
 8007058:	9901      	ldr	r1, [sp, #4]
 800705a:	6470      	str	r0, [r6, #68]	; 0x44
 800705c:	4602      	mov	r2, r0
 800705e:	b920      	cbnz	r0, 800706a <strtok+0x26>
 8007060:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <strtok+0x60>)
 8007062:	4811      	ldr	r0, [pc, #68]	; (80070a8 <strtok+0x64>)
 8007064:	215b      	movs	r1, #91	; 0x5b
 8007066:	f000 f8d7 	bl	8007218 <__assert_func>
 800706a:	e9c0 4400 	strd	r4, r4, [r0]
 800706e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007072:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007076:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800707a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800707e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007082:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007086:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800708a:	6184      	str	r4, [r0, #24]
 800708c:	7704      	strb	r4, [r0, #28]
 800708e:	6244      	str	r4, [r0, #36]	; 0x24
 8007090:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007092:	2301      	movs	r3, #1
 8007094:	4628      	mov	r0, r5
 8007096:	b002      	add	sp, #8
 8007098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800709c:	f000 b806 	b.w	80070ac <__strtok_r>
 80070a0:	20000080 	.word	0x20000080
 80070a4:	0800a865 	.word	0x0800a865
 80070a8:	0800a87c 	.word	0x0800a87c

080070ac <__strtok_r>:
 80070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ae:	b908      	cbnz	r0, 80070b4 <__strtok_r+0x8>
 80070b0:	6810      	ldr	r0, [r2, #0]
 80070b2:	b188      	cbz	r0, 80070d8 <__strtok_r+0x2c>
 80070b4:	4604      	mov	r4, r0
 80070b6:	4620      	mov	r0, r4
 80070b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80070bc:	460f      	mov	r7, r1
 80070be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80070c2:	b91e      	cbnz	r6, 80070cc <__strtok_r+0x20>
 80070c4:	b965      	cbnz	r5, 80070e0 <__strtok_r+0x34>
 80070c6:	6015      	str	r5, [r2, #0]
 80070c8:	4628      	mov	r0, r5
 80070ca:	e005      	b.n	80070d8 <__strtok_r+0x2c>
 80070cc:	42b5      	cmp	r5, r6
 80070ce:	d1f6      	bne.n	80070be <__strtok_r+0x12>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <__strtok_r+0xa>
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	7003      	strb	r3, [r0, #0]
 80070d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070da:	461c      	mov	r4, r3
 80070dc:	e00c      	b.n	80070f8 <__strtok_r+0x4c>
 80070de:	b915      	cbnz	r5, 80070e6 <__strtok_r+0x3a>
 80070e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070e4:	460e      	mov	r6, r1
 80070e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80070ea:	42ab      	cmp	r3, r5
 80070ec:	d1f7      	bne.n	80070de <__strtok_r+0x32>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f3      	beq.n	80070da <__strtok_r+0x2e>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80070f8:	6014      	str	r4, [r2, #0]
 80070fa:	e7ed      	b.n	80070d8 <__strtok_r+0x2c>

080070fc <_localeconv_r>:
 80070fc:	4800      	ldr	r0, [pc, #0]	; (8007100 <_localeconv_r+0x4>)
 80070fe:	4770      	bx	lr
 8007100:	20000174 	.word	0x20000174

08007104 <_close_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d06      	ldr	r5, [pc, #24]	; (8007120 <_close_r+0x1c>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	f7fb f9bb 	bl	800248a <_close>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_close_r+0x1a>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_close_r+0x1a>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	200004a0 	.word	0x200004a0

08007124 <_lseek_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d07      	ldr	r5, [pc, #28]	; (8007144 <_lseek_r+0x20>)
 8007128:	4604      	mov	r4, r0
 800712a:	4608      	mov	r0, r1
 800712c:	4611      	mov	r1, r2
 800712e:	2200      	movs	r2, #0
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f7fb f9d0 	bl	80024d8 <_lseek>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_lseek_r+0x1e>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_lseek_r+0x1e>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200004a0 	.word	0x200004a0

08007148 <_read_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_read_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fb f95e 	bl	8002418 <_read>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_read_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_read_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	200004a0 	.word	0x200004a0

0800716c <_sbrk_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d06      	ldr	r5, [pc, #24]	; (8007188 <_sbrk_r+0x1c>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fb f9bc 	bl	80024f4 <_sbrk>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_sbrk_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_sbrk_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	200004a0 	.word	0x200004a0

0800718c <_write_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d07      	ldr	r5, [pc, #28]	; (80071ac <_write_r+0x20>)
 8007190:	4604      	mov	r4, r0
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	2200      	movs	r2, #0
 8007198:	602a      	str	r2, [r5, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f7fb f959 	bl	8002452 <_write>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_write_r+0x1e>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_write_r+0x1e>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	200004a0 	.word	0x200004a0

080071b0 <__errno>:
 80071b0:	4b01      	ldr	r3, [pc, #4]	; (80071b8 <__errno+0x8>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000080 	.word	0x20000080

080071bc <__libc_init_array>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4d0d      	ldr	r5, [pc, #52]	; (80071f4 <__libc_init_array+0x38>)
 80071c0:	4c0d      	ldr	r4, [pc, #52]	; (80071f8 <__libc_init_array+0x3c>)
 80071c2:	1b64      	subs	r4, r4, r5
 80071c4:	10a4      	asrs	r4, r4, #2
 80071c6:	2600      	movs	r6, #0
 80071c8:	42a6      	cmp	r6, r4
 80071ca:	d109      	bne.n	80071e0 <__libc_init_array+0x24>
 80071cc:	4d0b      	ldr	r5, [pc, #44]	; (80071fc <__libc_init_array+0x40>)
 80071ce:	4c0c      	ldr	r4, [pc, #48]	; (8007200 <__libc_init_array+0x44>)
 80071d0:	f003 fa7c 	bl	800a6cc <_init>
 80071d4:	1b64      	subs	r4, r4, r5
 80071d6:	10a4      	asrs	r4, r4, #2
 80071d8:	2600      	movs	r6, #0
 80071da:	42a6      	cmp	r6, r4
 80071dc:	d105      	bne.n	80071ea <__libc_init_array+0x2e>
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e4:	4798      	blx	r3
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7ee      	b.n	80071c8 <__libc_init_array+0xc>
 80071ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ee:	4798      	blx	r3
 80071f0:	3601      	adds	r6, #1
 80071f2:	e7f2      	b.n	80071da <__libc_init_array+0x1e>
 80071f4:	0800acbc 	.word	0x0800acbc
 80071f8:	0800acbc 	.word	0x0800acbc
 80071fc:	0800acbc 	.word	0x0800acbc
 8007200:	0800acc0 	.word	0x0800acc0

08007204 <__retarget_lock_init_recursive>:
 8007204:	4770      	bx	lr

08007206 <__retarget_lock_acquire_recursive>:
 8007206:	4770      	bx	lr

08007208 <__retarget_lock_release_recursive>:
 8007208:	4770      	bx	lr
	...

0800720c <nanf>:
 800720c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007214 <nanf+0x8>
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	7fc00000 	.word	0x7fc00000

08007218 <__assert_func>:
 8007218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800721a:	4614      	mov	r4, r2
 800721c:	461a      	mov	r2, r3
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <__assert_func+0x2c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4605      	mov	r5, r0
 8007224:	68d8      	ldr	r0, [r3, #12]
 8007226:	b14c      	cbz	r4, 800723c <__assert_func+0x24>
 8007228:	4b07      	ldr	r3, [pc, #28]	; (8007248 <__assert_func+0x30>)
 800722a:	9100      	str	r1, [sp, #0]
 800722c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007230:	4906      	ldr	r1, [pc, #24]	; (800724c <__assert_func+0x34>)
 8007232:	462b      	mov	r3, r5
 8007234:	f002 fd64 	bl	8009d00 <fiprintf>
 8007238:	f002 fe3a 	bl	8009eb0 <abort>
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <__assert_func+0x38>)
 800723e:	461c      	mov	r4, r3
 8007240:	e7f3      	b.n	800722a <__assert_func+0x12>
 8007242:	bf00      	nop
 8007244:	20000080 	.word	0x20000080
 8007248:	0800a8d6 	.word	0x0800a8d6
 800724c:	0800a8e3 	.word	0x0800a8e3
 8007250:	0800a911 	.word	0x0800a911

08007254 <quorem>:
 8007254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	6903      	ldr	r3, [r0, #16]
 800725a:	690c      	ldr	r4, [r1, #16]
 800725c:	42a3      	cmp	r3, r4
 800725e:	4607      	mov	r7, r0
 8007260:	db7e      	blt.n	8007360 <quorem+0x10c>
 8007262:	3c01      	subs	r4, #1
 8007264:	f101 0814 	add.w	r8, r1, #20
 8007268:	f100 0514 	add.w	r5, r0, #20
 800726c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800727a:	3301      	adds	r3, #1
 800727c:	429a      	cmp	r2, r3
 800727e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007286:	fbb2 f6f3 	udiv	r6, r2, r3
 800728a:	d331      	bcc.n	80072f0 <quorem+0x9c>
 800728c:	f04f 0e00 	mov.w	lr, #0
 8007290:	4640      	mov	r0, r8
 8007292:	46ac      	mov	ip, r5
 8007294:	46f2      	mov	sl, lr
 8007296:	f850 2b04 	ldr.w	r2, [r0], #4
 800729a:	b293      	uxth	r3, r2
 800729c:	fb06 e303 	mla	r3, r6, r3, lr
 80072a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072a4:	0c1a      	lsrs	r2, r3, #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ebaa 0303 	sub.w	r3, sl, r3
 80072ac:	f8dc a000 	ldr.w	sl, [ip]
 80072b0:	fa13 f38a 	uxtah	r3, r3, sl
 80072b4:	fb06 220e 	mla	r2, r6, lr, r2
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072c0:	b292      	uxth	r2, r2
 80072c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80072ce:	4581      	cmp	r9, r0
 80072d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d4:	f84c 3b04 	str.w	r3, [ip], #4
 80072d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072dc:	d2db      	bcs.n	8007296 <quorem+0x42>
 80072de:	f855 300b 	ldr.w	r3, [r5, fp]
 80072e2:	b92b      	cbnz	r3, 80072f0 <quorem+0x9c>
 80072e4:	9b01      	ldr	r3, [sp, #4]
 80072e6:	3b04      	subs	r3, #4
 80072e8:	429d      	cmp	r5, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	d32c      	bcc.n	8007348 <quorem+0xf4>
 80072ee:	613c      	str	r4, [r7, #16]
 80072f0:	4638      	mov	r0, r7
 80072f2:	f001 f93d 	bl	8008570 <__mcmp>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	db22      	blt.n	8007340 <quorem+0xec>
 80072fa:	3601      	adds	r6, #1
 80072fc:	4629      	mov	r1, r5
 80072fe:	2000      	movs	r0, #0
 8007300:	f858 2b04 	ldr.w	r2, [r8], #4
 8007304:	f8d1 c000 	ldr.w	ip, [r1]
 8007308:	b293      	uxth	r3, r2
 800730a:	1ac3      	subs	r3, r0, r3
 800730c:	0c12      	lsrs	r2, r2, #16
 800730e:	fa13 f38c 	uxtah	r3, r3, ip
 8007312:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007316:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800731a:	b29b      	uxth	r3, r3
 800731c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007320:	45c1      	cmp	r9, r8
 8007322:	f841 3b04 	str.w	r3, [r1], #4
 8007326:	ea4f 4022 	mov.w	r0, r2, asr #16
 800732a:	d2e9      	bcs.n	8007300 <quorem+0xac>
 800732c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007334:	b922      	cbnz	r2, 8007340 <quorem+0xec>
 8007336:	3b04      	subs	r3, #4
 8007338:	429d      	cmp	r5, r3
 800733a:	461a      	mov	r2, r3
 800733c:	d30a      	bcc.n	8007354 <quorem+0x100>
 800733e:	613c      	str	r4, [r7, #16]
 8007340:	4630      	mov	r0, r6
 8007342:	b003      	add	sp, #12
 8007344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	3b04      	subs	r3, #4
 800734c:	2a00      	cmp	r2, #0
 800734e:	d1ce      	bne.n	80072ee <quorem+0x9a>
 8007350:	3c01      	subs	r4, #1
 8007352:	e7c9      	b.n	80072e8 <quorem+0x94>
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	3b04      	subs	r3, #4
 8007358:	2a00      	cmp	r2, #0
 800735a:	d1f0      	bne.n	800733e <quorem+0xea>
 800735c:	3c01      	subs	r4, #1
 800735e:	e7eb      	b.n	8007338 <quorem+0xe4>
 8007360:	2000      	movs	r0, #0
 8007362:	e7ee      	b.n	8007342 <quorem+0xee>
 8007364:	0000      	movs	r0, r0
	...

08007368 <_dtoa_r>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	ed2d 8b04 	vpush	{d8-d9}
 8007370:	69c5      	ldr	r5, [r0, #28]
 8007372:	b093      	sub	sp, #76	; 0x4c
 8007374:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007378:	ec57 6b10 	vmov	r6, r7, d0
 800737c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007380:	9107      	str	r1, [sp, #28]
 8007382:	4604      	mov	r4, r0
 8007384:	920a      	str	r2, [sp, #40]	; 0x28
 8007386:	930d      	str	r3, [sp, #52]	; 0x34
 8007388:	b975      	cbnz	r5, 80073a8 <_dtoa_r+0x40>
 800738a:	2010      	movs	r0, #16
 800738c:	f7fe fcf8 	bl	8005d80 <malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	61e0      	str	r0, [r4, #28]
 8007394:	b920      	cbnz	r0, 80073a0 <_dtoa_r+0x38>
 8007396:	4bae      	ldr	r3, [pc, #696]	; (8007650 <_dtoa_r+0x2e8>)
 8007398:	21ef      	movs	r1, #239	; 0xef
 800739a:	48ae      	ldr	r0, [pc, #696]	; (8007654 <_dtoa_r+0x2ec>)
 800739c:	f7ff ff3c 	bl	8007218 <__assert_func>
 80073a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073a4:	6005      	str	r5, [r0, #0]
 80073a6:	60c5      	str	r5, [r0, #12]
 80073a8:	69e3      	ldr	r3, [r4, #28]
 80073aa:	6819      	ldr	r1, [r3, #0]
 80073ac:	b151      	cbz	r1, 80073c4 <_dtoa_r+0x5c>
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	604a      	str	r2, [r1, #4]
 80073b2:	2301      	movs	r3, #1
 80073b4:	4093      	lsls	r3, r2
 80073b6:	608b      	str	r3, [r1, #8]
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 fe53 	bl	8008064 <_Bfree>
 80073be:	69e3      	ldr	r3, [r4, #28]
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	1e3b      	subs	r3, r7, #0
 80073c6:	bfbb      	ittet	lt
 80073c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	9303      	strlt	r3, [sp, #12]
 80073ce:	2300      	movge	r3, #0
 80073d0:	2201      	movlt	r2, #1
 80073d2:	bfac      	ite	ge
 80073d4:	f8c8 3000 	strge.w	r3, [r8]
 80073d8:	f8c8 2000 	strlt.w	r2, [r8]
 80073dc:	4b9e      	ldr	r3, [pc, #632]	; (8007658 <_dtoa_r+0x2f0>)
 80073de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073e2:	ea33 0308 	bics.w	r3, r3, r8
 80073e6:	d11b      	bne.n	8007420 <_dtoa_r+0xb8>
 80073e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073f4:	4333      	orrs	r3, r6
 80073f6:	f000 8593 	beq.w	8007f20 <_dtoa_r+0xbb8>
 80073fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073fc:	b963      	cbnz	r3, 8007418 <_dtoa_r+0xb0>
 80073fe:	4b97      	ldr	r3, [pc, #604]	; (800765c <_dtoa_r+0x2f4>)
 8007400:	e027      	b.n	8007452 <_dtoa_r+0xea>
 8007402:	4b97      	ldr	r3, [pc, #604]	; (8007660 <_dtoa_r+0x2f8>)
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	9800      	ldr	r0, [sp, #0]
 800740e:	b013      	add	sp, #76	; 0x4c
 8007410:	ecbd 8b04 	vpop	{d8-d9}
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	4b90      	ldr	r3, [pc, #576]	; (800765c <_dtoa_r+0x2f4>)
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	3303      	adds	r3, #3
 800741e:	e7f3      	b.n	8007408 <_dtoa_r+0xa0>
 8007420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007424:	2200      	movs	r2, #0
 8007426:	ec51 0b17 	vmov	r0, r1, d7
 800742a:	eeb0 8a47 	vmov.f32	s16, s14
 800742e:	eef0 8a67 	vmov.f32	s17, s15
 8007432:	2300      	movs	r3, #0
 8007434:	f7f9 fb78 	bl	8000b28 <__aeabi_dcmpeq>
 8007438:	4681      	mov	r9, r0
 800743a:	b160      	cbz	r0, 8007456 <_dtoa_r+0xee>
 800743c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800743e:	2301      	movs	r3, #1
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8568 	beq.w	8007f1a <_dtoa_r+0xbb2>
 800744a:	4b86      	ldr	r3, [pc, #536]	; (8007664 <_dtoa_r+0x2fc>)
 800744c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	e7da      	b.n	800740c <_dtoa_r+0xa4>
 8007456:	aa10      	add	r2, sp, #64	; 0x40
 8007458:	a911      	add	r1, sp, #68	; 0x44
 800745a:	4620      	mov	r0, r4
 800745c:	eeb0 0a48 	vmov.f32	s0, s16
 8007460:	eef0 0a68 	vmov.f32	s1, s17
 8007464:	f001 f99a 	bl	800879c <__d2b>
 8007468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800746c:	4682      	mov	sl, r0
 800746e:	2d00      	cmp	r5, #0
 8007470:	d07f      	beq.n	8007572 <_dtoa_r+0x20a>
 8007472:	ee18 3a90 	vmov	r3, s17
 8007476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800747a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800747e:	ec51 0b18 	vmov	r0, r1, d8
 8007482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800748a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800748e:	4619      	mov	r1, r3
 8007490:	2200      	movs	r2, #0
 8007492:	4b75      	ldr	r3, [pc, #468]	; (8007668 <_dtoa_r+0x300>)
 8007494:	f7f8 ff28 	bl	80002e8 <__aeabi_dsub>
 8007498:	a367      	add	r3, pc, #412	; (adr r3, 8007638 <_dtoa_r+0x2d0>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f8db 	bl	8000658 <__aeabi_dmul>
 80074a2:	a367      	add	r3, pc, #412	; (adr r3, 8007640 <_dtoa_r+0x2d8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f8 ff20 	bl	80002ec <__adddf3>
 80074ac:	4606      	mov	r6, r0
 80074ae:	4628      	mov	r0, r5
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f9 f867 	bl	8000584 <__aeabi_i2d>
 80074b6:	a364      	add	r3, pc, #400	; (adr r3, 8007648 <_dtoa_r+0x2e0>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f9 f8cc 	bl	8000658 <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f8 ff10 	bl	80002ec <__adddf3>
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	f7f9 fb72 	bl	8000bb8 <__aeabi_d2iz>
 80074d4:	2200      	movs	r2, #0
 80074d6:	4683      	mov	fp, r0
 80074d8:	2300      	movs	r3, #0
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f9 fb2d 	bl	8000b3c <__aeabi_dcmplt>
 80074e2:	b148      	cbz	r0, 80074f8 <_dtoa_r+0x190>
 80074e4:	4658      	mov	r0, fp
 80074e6:	f7f9 f84d 	bl	8000584 <__aeabi_i2d>
 80074ea:	4632      	mov	r2, r6
 80074ec:	463b      	mov	r3, r7
 80074ee:	f7f9 fb1b 	bl	8000b28 <__aeabi_dcmpeq>
 80074f2:	b908      	cbnz	r0, 80074f8 <_dtoa_r+0x190>
 80074f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074f8:	f1bb 0f16 	cmp.w	fp, #22
 80074fc:	d857      	bhi.n	80075ae <_dtoa_r+0x246>
 80074fe:	4b5b      	ldr	r3, [pc, #364]	; (800766c <_dtoa_r+0x304>)
 8007500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	ec51 0b18 	vmov	r0, r1, d8
 800750c:	f7f9 fb16 	bl	8000b3c <__aeabi_dcmplt>
 8007510:	2800      	cmp	r0, #0
 8007512:	d04e      	beq.n	80075b2 <_dtoa_r+0x24a>
 8007514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007518:	2300      	movs	r3, #0
 800751a:	930c      	str	r3, [sp, #48]	; 0x30
 800751c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800751e:	1b5b      	subs	r3, r3, r5
 8007520:	1e5a      	subs	r2, r3, #1
 8007522:	bf45      	ittet	mi
 8007524:	f1c3 0301 	rsbmi	r3, r3, #1
 8007528:	9305      	strmi	r3, [sp, #20]
 800752a:	2300      	movpl	r3, #0
 800752c:	2300      	movmi	r3, #0
 800752e:	9206      	str	r2, [sp, #24]
 8007530:	bf54      	ite	pl
 8007532:	9305      	strpl	r3, [sp, #20]
 8007534:	9306      	strmi	r3, [sp, #24]
 8007536:	f1bb 0f00 	cmp.w	fp, #0
 800753a:	db3c      	blt.n	80075b6 <_dtoa_r+0x24e>
 800753c:	9b06      	ldr	r3, [sp, #24]
 800753e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007542:	445b      	add	r3, fp
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	2300      	movs	r3, #0
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b07      	ldr	r3, [sp, #28]
 800754c:	2b09      	cmp	r3, #9
 800754e:	d868      	bhi.n	8007622 <_dtoa_r+0x2ba>
 8007550:	2b05      	cmp	r3, #5
 8007552:	bfc4      	itt	gt
 8007554:	3b04      	subgt	r3, #4
 8007556:	9307      	strgt	r3, [sp, #28]
 8007558:	9b07      	ldr	r3, [sp, #28]
 800755a:	f1a3 0302 	sub.w	r3, r3, #2
 800755e:	bfcc      	ite	gt
 8007560:	2500      	movgt	r5, #0
 8007562:	2501      	movle	r5, #1
 8007564:	2b03      	cmp	r3, #3
 8007566:	f200 8085 	bhi.w	8007674 <_dtoa_r+0x30c>
 800756a:	e8df f003 	tbb	[pc, r3]
 800756e:	3b2e      	.short	0x3b2e
 8007570:	5839      	.short	0x5839
 8007572:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007576:	441d      	add	r5, r3
 8007578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800757c:	2b20      	cmp	r3, #32
 800757e:	bfc1      	itttt	gt
 8007580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007584:	fa08 f803 	lslgt.w	r8, r8, r3
 8007588:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800758c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007590:	bfd6      	itet	le
 8007592:	f1c3 0320 	rsble	r3, r3, #32
 8007596:	ea48 0003 	orrgt.w	r0, r8, r3
 800759a:	fa06 f003 	lslle.w	r0, r6, r3
 800759e:	f7f8 ffe1 	bl	8000564 <__aeabi_ui2d>
 80075a2:	2201      	movs	r2, #1
 80075a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80075a8:	3d01      	subs	r5, #1
 80075aa:	920e      	str	r2, [sp, #56]	; 0x38
 80075ac:	e76f      	b.n	800748e <_dtoa_r+0x126>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7b3      	b.n	800751a <_dtoa_r+0x1b2>
 80075b2:	900c      	str	r0, [sp, #48]	; 0x30
 80075b4:	e7b2      	b.n	800751c <_dtoa_r+0x1b4>
 80075b6:	9b05      	ldr	r3, [sp, #20]
 80075b8:	eba3 030b 	sub.w	r3, r3, fp
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	f1cb 0300 	rsb	r3, fp, #0
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	2300      	movs	r3, #0
 80075c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c8:	e7bf      	b.n	800754a <_dtoa_r+0x1e2>
 80075ca:	2300      	movs	r3, #0
 80075cc:	9309      	str	r3, [sp, #36]	; 0x24
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc52      	bgt.n	800767a <_dtoa_r+0x312>
 80075d4:	2301      	movs	r3, #1
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	461a      	mov	r2, r3
 80075dc:	920a      	str	r2, [sp, #40]	; 0x28
 80075de:	e00b      	b.n	80075f8 <_dtoa_r+0x290>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e7f3      	b.n	80075cc <_dtoa_r+0x264>
 80075e4:	2300      	movs	r3, #0
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
 80075e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ea:	445b      	add	r3, fp
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	3301      	adds	r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	bfb8      	it	lt
 80075f6:	2301      	movlt	r3, #1
 80075f8:	69e0      	ldr	r0, [r4, #28]
 80075fa:	2100      	movs	r1, #0
 80075fc:	2204      	movs	r2, #4
 80075fe:	f102 0614 	add.w	r6, r2, #20
 8007602:	429e      	cmp	r6, r3
 8007604:	d93d      	bls.n	8007682 <_dtoa_r+0x31a>
 8007606:	6041      	str	r1, [r0, #4]
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fceb 	bl	8007fe4 <_Balloc>
 800760e:	9000      	str	r0, [sp, #0]
 8007610:	2800      	cmp	r0, #0
 8007612:	d139      	bne.n	8007688 <_dtoa_r+0x320>
 8007614:	4b16      	ldr	r3, [pc, #88]	; (8007670 <_dtoa_r+0x308>)
 8007616:	4602      	mov	r2, r0
 8007618:	f240 11af 	movw	r1, #431	; 0x1af
 800761c:	e6bd      	b.n	800739a <_dtoa_r+0x32>
 800761e:	2301      	movs	r3, #1
 8007620:	e7e1      	b.n	80075e6 <_dtoa_r+0x27e>
 8007622:	2501      	movs	r5, #1
 8007624:	2300      	movs	r3, #0
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	9509      	str	r5, [sp, #36]	; 0x24
 800762a:	f04f 33ff 	mov.w	r3, #4294967295
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	2200      	movs	r2, #0
 8007634:	2312      	movs	r3, #18
 8007636:	e7d1      	b.n	80075dc <_dtoa_r+0x274>
 8007638:	636f4361 	.word	0x636f4361
 800763c:	3fd287a7 	.word	0x3fd287a7
 8007640:	8b60c8b3 	.word	0x8b60c8b3
 8007644:	3fc68a28 	.word	0x3fc68a28
 8007648:	509f79fb 	.word	0x509f79fb
 800764c:	3fd34413 	.word	0x3fd34413
 8007650:	0800a865 	.word	0x0800a865
 8007654:	0800a91f 	.word	0x0800a91f
 8007658:	7ff00000 	.word	0x7ff00000
 800765c:	0800a91b 	.word	0x0800a91b
 8007660:	0800a912 	.word	0x0800a912
 8007664:	0800a83d 	.word	0x0800a83d
 8007668:	3ff80000 	.word	0x3ff80000
 800766c:	0800aa10 	.word	0x0800aa10
 8007670:	0800a977 	.word	0x0800a977
 8007674:	2301      	movs	r3, #1
 8007676:	9309      	str	r3, [sp, #36]	; 0x24
 8007678:	e7d7      	b.n	800762a <_dtoa_r+0x2c2>
 800767a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	e7ba      	b.n	80075f8 <_dtoa_r+0x290>
 8007682:	3101      	adds	r1, #1
 8007684:	0052      	lsls	r2, r2, #1
 8007686:	e7ba      	b.n	80075fe <_dtoa_r+0x296>
 8007688:	69e3      	ldr	r3, [r4, #28]
 800768a:	9a00      	ldr	r2, [sp, #0]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	2b0e      	cmp	r3, #14
 8007692:	f200 80a8 	bhi.w	80077e6 <_dtoa_r+0x47e>
 8007696:	2d00      	cmp	r5, #0
 8007698:	f000 80a5 	beq.w	80077e6 <_dtoa_r+0x47e>
 800769c:	f1bb 0f00 	cmp.w	fp, #0
 80076a0:	dd38      	ble.n	8007714 <_dtoa_r+0x3ac>
 80076a2:	4bc0      	ldr	r3, [pc, #768]	; (80079a4 <_dtoa_r+0x63c>)
 80076a4:	f00b 020f 	and.w	r2, fp, #15
 80076a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80076b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80076b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80076b8:	d019      	beq.n	80076ee <_dtoa_r+0x386>
 80076ba:	4bbb      	ldr	r3, [pc, #748]	; (80079a8 <_dtoa_r+0x640>)
 80076bc:	ec51 0b18 	vmov	r0, r1, d8
 80076c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076c4:	f7f9 f8f2 	bl	80008ac <__aeabi_ddiv>
 80076c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076cc:	f008 080f 	and.w	r8, r8, #15
 80076d0:	2503      	movs	r5, #3
 80076d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80079a8 <_dtoa_r+0x640>
 80076d6:	f1b8 0f00 	cmp.w	r8, #0
 80076da:	d10a      	bne.n	80076f2 <_dtoa_r+0x38a>
 80076dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e0:	4632      	mov	r2, r6
 80076e2:	463b      	mov	r3, r7
 80076e4:	f7f9 f8e2 	bl	80008ac <__aeabi_ddiv>
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	e02b      	b.n	8007746 <_dtoa_r+0x3de>
 80076ee:	2502      	movs	r5, #2
 80076f0:	e7ef      	b.n	80076d2 <_dtoa_r+0x36a>
 80076f2:	f018 0f01 	tst.w	r8, #1
 80076f6:	d008      	beq.n	800770a <_dtoa_r+0x3a2>
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007700:	f7f8 ffaa 	bl	8000658 <__aeabi_dmul>
 8007704:	3501      	adds	r5, #1
 8007706:	4606      	mov	r6, r0
 8007708:	460f      	mov	r7, r1
 800770a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800770e:	f109 0908 	add.w	r9, r9, #8
 8007712:	e7e0      	b.n	80076d6 <_dtoa_r+0x36e>
 8007714:	f000 809f 	beq.w	8007856 <_dtoa_r+0x4ee>
 8007718:	f1cb 0600 	rsb	r6, fp, #0
 800771c:	4ba1      	ldr	r3, [pc, #644]	; (80079a4 <_dtoa_r+0x63c>)
 800771e:	4fa2      	ldr	r7, [pc, #648]	; (80079a8 <_dtoa_r+0x640>)
 8007720:	f006 020f 	and.w	r2, r6, #15
 8007724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	ec51 0b18 	vmov	r0, r1, d8
 8007730:	f7f8 ff92 	bl	8000658 <__aeabi_dmul>
 8007734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007738:	1136      	asrs	r6, r6, #4
 800773a:	2300      	movs	r3, #0
 800773c:	2502      	movs	r5, #2
 800773e:	2e00      	cmp	r6, #0
 8007740:	d17e      	bne.n	8007840 <_dtoa_r+0x4d8>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1d0      	bne.n	80076e8 <_dtoa_r+0x380>
 8007746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8084 	beq.w	800785a <_dtoa_r+0x4f2>
 8007752:	4b96      	ldr	r3, [pc, #600]	; (80079ac <_dtoa_r+0x644>)
 8007754:	2200      	movs	r2, #0
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f9 f9ef 	bl	8000b3c <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	d07b      	beq.n	800785a <_dtoa_r+0x4f2>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d078      	beq.n	800785a <_dtoa_r+0x4f2>
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dd39      	ble.n	80077e2 <_dtoa_r+0x47a>
 800776e:	4b90      	ldr	r3, [pc, #576]	; (80079b0 <_dtoa_r+0x648>)
 8007770:	2200      	movs	r2, #0
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	f7f8 ff6f 	bl	8000658 <__aeabi_dmul>
 800777a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800777e:	9e01      	ldr	r6, [sp, #4]
 8007780:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007784:	3501      	adds	r5, #1
 8007786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800778a:	4628      	mov	r0, r5
 800778c:	f7f8 fefa 	bl	8000584 <__aeabi_i2d>
 8007790:	4642      	mov	r2, r8
 8007792:	464b      	mov	r3, r9
 8007794:	f7f8 ff60 	bl	8000658 <__aeabi_dmul>
 8007798:	4b86      	ldr	r3, [pc, #536]	; (80079b4 <_dtoa_r+0x64c>)
 800779a:	2200      	movs	r2, #0
 800779c:	f7f8 fda6 	bl	80002ec <__adddf3>
 80077a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	d158      	bne.n	8007860 <_dtoa_r+0x4f8>
 80077ae:	4b82      	ldr	r3, [pc, #520]	; (80079b8 <_dtoa_r+0x650>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 fd97 	bl	80002e8 <__aeabi_dsub>
 80077ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077be:	4680      	mov	r8, r0
 80077c0:	4689      	mov	r9, r1
 80077c2:	f7f9 f9d9 	bl	8000b78 <__aeabi_dcmpgt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f040 8296 	bne.w	8007cf8 <_dtoa_r+0x990>
 80077cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077d0:	4640      	mov	r0, r8
 80077d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f9 f9b0 	bl	8000b3c <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f040 8289 	bne.w	8007cf4 <_dtoa_r+0x98c>
 80077e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f2c0 814e 	blt.w	8007a8a <_dtoa_r+0x722>
 80077ee:	f1bb 0f0e 	cmp.w	fp, #14
 80077f2:	f300 814a 	bgt.w	8007a8a <_dtoa_r+0x722>
 80077f6:	4b6b      	ldr	r3, [pc, #428]	; (80079a4 <_dtoa_r+0x63c>)
 80077f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	f280 80dc 	bge.w	80079c0 <_dtoa_r+0x658>
 8007808:	9b04      	ldr	r3, [sp, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f300 80d8 	bgt.w	80079c0 <_dtoa_r+0x658>
 8007810:	f040 826f 	bne.w	8007cf2 <_dtoa_r+0x98a>
 8007814:	4b68      	ldr	r3, [pc, #416]	; (80079b8 <_dtoa_r+0x650>)
 8007816:	2200      	movs	r2, #0
 8007818:	4640      	mov	r0, r8
 800781a:	4649      	mov	r1, r9
 800781c:	f7f8 ff1c 	bl	8000658 <__aeabi_dmul>
 8007820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007824:	f7f9 f99e 	bl	8000b64 <__aeabi_dcmpge>
 8007828:	9e04      	ldr	r6, [sp, #16]
 800782a:	4637      	mov	r7, r6
 800782c:	2800      	cmp	r0, #0
 800782e:	f040 8245 	bne.w	8007cbc <_dtoa_r+0x954>
 8007832:	9d00      	ldr	r5, [sp, #0]
 8007834:	2331      	movs	r3, #49	; 0x31
 8007836:	f805 3b01 	strb.w	r3, [r5], #1
 800783a:	f10b 0b01 	add.w	fp, fp, #1
 800783e:	e241      	b.n	8007cc4 <_dtoa_r+0x95c>
 8007840:	07f2      	lsls	r2, r6, #31
 8007842:	d505      	bpl.n	8007850 <_dtoa_r+0x4e8>
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	f7f8 ff06 	bl	8000658 <__aeabi_dmul>
 800784c:	3501      	adds	r5, #1
 800784e:	2301      	movs	r3, #1
 8007850:	1076      	asrs	r6, r6, #1
 8007852:	3708      	adds	r7, #8
 8007854:	e773      	b.n	800773e <_dtoa_r+0x3d6>
 8007856:	2502      	movs	r5, #2
 8007858:	e775      	b.n	8007746 <_dtoa_r+0x3de>
 800785a:	9e04      	ldr	r6, [sp, #16]
 800785c:	465f      	mov	r7, fp
 800785e:	e792      	b.n	8007786 <_dtoa_r+0x41e>
 8007860:	9900      	ldr	r1, [sp, #0]
 8007862:	4b50      	ldr	r3, [pc, #320]	; (80079a4 <_dtoa_r+0x63c>)
 8007864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007868:	4431      	add	r1, r6
 800786a:	9102      	str	r1, [sp, #8]
 800786c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800786e:	eeb0 9a47 	vmov.f32	s18, s14
 8007872:	eef0 9a67 	vmov.f32	s19, s15
 8007876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800787a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800787e:	2900      	cmp	r1, #0
 8007880:	d044      	beq.n	800790c <_dtoa_r+0x5a4>
 8007882:	494e      	ldr	r1, [pc, #312]	; (80079bc <_dtoa_r+0x654>)
 8007884:	2000      	movs	r0, #0
 8007886:	f7f9 f811 	bl	80008ac <__aeabi_ddiv>
 800788a:	ec53 2b19 	vmov	r2, r3, d9
 800788e:	f7f8 fd2b 	bl	80002e8 <__aeabi_dsub>
 8007892:	9d00      	ldr	r5, [sp, #0]
 8007894:	ec41 0b19 	vmov	d9, r0, r1
 8007898:	4649      	mov	r1, r9
 800789a:	4640      	mov	r0, r8
 800789c:	f7f9 f98c 	bl	8000bb8 <__aeabi_d2iz>
 80078a0:	4606      	mov	r6, r0
 80078a2:	f7f8 fe6f 	bl	8000584 <__aeabi_i2d>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f7f8 fd1b 	bl	80002e8 <__aeabi_dsub>
 80078b2:	3630      	adds	r6, #48	; 0x30
 80078b4:	f805 6b01 	strb.w	r6, [r5], #1
 80078b8:	ec53 2b19 	vmov	r2, r3, d9
 80078bc:	4680      	mov	r8, r0
 80078be:	4689      	mov	r9, r1
 80078c0:	f7f9 f93c 	bl	8000b3c <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d164      	bne.n	8007992 <_dtoa_r+0x62a>
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	4937      	ldr	r1, [pc, #220]	; (80079ac <_dtoa_r+0x644>)
 80078ce:	2000      	movs	r0, #0
 80078d0:	f7f8 fd0a 	bl	80002e8 <__aeabi_dsub>
 80078d4:	ec53 2b19 	vmov	r2, r3, d9
 80078d8:	f7f9 f930 	bl	8000b3c <__aeabi_dcmplt>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f040 80b6 	bne.w	8007a4e <_dtoa_r+0x6e6>
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	429d      	cmp	r5, r3
 80078e6:	f43f af7c 	beq.w	80077e2 <_dtoa_r+0x47a>
 80078ea:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <_dtoa_r+0x648>)
 80078ec:	ec51 0b19 	vmov	r0, r1, d9
 80078f0:	2200      	movs	r2, #0
 80078f2:	f7f8 feb1 	bl	8000658 <__aeabi_dmul>
 80078f6:	4b2e      	ldr	r3, [pc, #184]	; (80079b0 <_dtoa_r+0x648>)
 80078f8:	ec41 0b19 	vmov	d9, r0, r1
 80078fc:	2200      	movs	r2, #0
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fea9 	bl	8000658 <__aeabi_dmul>
 8007906:	4680      	mov	r8, r0
 8007908:	4689      	mov	r9, r1
 800790a:	e7c5      	b.n	8007898 <_dtoa_r+0x530>
 800790c:	ec51 0b17 	vmov	r0, r1, d7
 8007910:	f7f8 fea2 	bl	8000658 <__aeabi_dmul>
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	9d00      	ldr	r5, [sp, #0]
 8007918:	930f      	str	r3, [sp, #60]	; 0x3c
 800791a:	ec41 0b19 	vmov	d9, r0, r1
 800791e:	4649      	mov	r1, r9
 8007920:	4640      	mov	r0, r8
 8007922:	f7f9 f949 	bl	8000bb8 <__aeabi_d2iz>
 8007926:	4606      	mov	r6, r0
 8007928:	f7f8 fe2c 	bl	8000584 <__aeabi_i2d>
 800792c:	3630      	adds	r6, #48	; 0x30
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4640      	mov	r0, r8
 8007934:	4649      	mov	r1, r9
 8007936:	f7f8 fcd7 	bl	80002e8 <__aeabi_dsub>
 800793a:	f805 6b01 	strb.w	r6, [r5], #1
 800793e:	9b02      	ldr	r3, [sp, #8]
 8007940:	429d      	cmp	r5, r3
 8007942:	4680      	mov	r8, r0
 8007944:	4689      	mov	r9, r1
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	d124      	bne.n	8007996 <_dtoa_r+0x62e>
 800794c:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <_dtoa_r+0x654>)
 800794e:	ec51 0b19 	vmov	r0, r1, d9
 8007952:	f7f8 fccb 	bl	80002ec <__adddf3>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f9 f90b 	bl	8000b78 <__aeabi_dcmpgt>
 8007962:	2800      	cmp	r0, #0
 8007964:	d173      	bne.n	8007a4e <_dtoa_r+0x6e6>
 8007966:	ec53 2b19 	vmov	r2, r3, d9
 800796a:	4914      	ldr	r1, [pc, #80]	; (80079bc <_dtoa_r+0x654>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f8 fcbb 	bl	80002e8 <__aeabi_dsub>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	f7f9 f8df 	bl	8000b3c <__aeabi_dcmplt>
 800797e:	2800      	cmp	r0, #0
 8007980:	f43f af2f 	beq.w	80077e2 <_dtoa_r+0x47a>
 8007984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007986:	1e6b      	subs	r3, r5, #1
 8007988:	930f      	str	r3, [sp, #60]	; 0x3c
 800798a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800798e:	2b30      	cmp	r3, #48	; 0x30
 8007990:	d0f8      	beq.n	8007984 <_dtoa_r+0x61c>
 8007992:	46bb      	mov	fp, r7
 8007994:	e04a      	b.n	8007a2c <_dtoa_r+0x6c4>
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <_dtoa_r+0x648>)
 8007998:	f7f8 fe5e 	bl	8000658 <__aeabi_dmul>
 800799c:	4680      	mov	r8, r0
 800799e:	4689      	mov	r9, r1
 80079a0:	e7bd      	b.n	800791e <_dtoa_r+0x5b6>
 80079a2:	bf00      	nop
 80079a4:	0800aa10 	.word	0x0800aa10
 80079a8:	0800a9e8 	.word	0x0800a9e8
 80079ac:	3ff00000 	.word	0x3ff00000
 80079b0:	40240000 	.word	0x40240000
 80079b4:	401c0000 	.word	0x401c0000
 80079b8:	40140000 	.word	0x40140000
 80079bc:	3fe00000 	.word	0x3fe00000
 80079c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079c4:	9d00      	ldr	r5, [sp, #0]
 80079c6:	4642      	mov	r2, r8
 80079c8:	464b      	mov	r3, r9
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 ff6d 	bl	80008ac <__aeabi_ddiv>
 80079d2:	f7f9 f8f1 	bl	8000bb8 <__aeabi_d2iz>
 80079d6:	9001      	str	r0, [sp, #4]
 80079d8:	f7f8 fdd4 	bl	8000584 <__aeabi_i2d>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	f7f8 fe3a 	bl	8000658 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f8 fc7c 	bl	80002e8 <__aeabi_dsub>
 80079f0:	9e01      	ldr	r6, [sp, #4]
 80079f2:	9f04      	ldr	r7, [sp, #16]
 80079f4:	3630      	adds	r6, #48	; 0x30
 80079f6:	f805 6b01 	strb.w	r6, [r5], #1
 80079fa:	9e00      	ldr	r6, [sp, #0]
 80079fc:	1bae      	subs	r6, r5, r6
 80079fe:	42b7      	cmp	r7, r6
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	d134      	bne.n	8007a70 <_dtoa_r+0x708>
 8007a06:	f7f8 fc71 	bl	80002ec <__adddf3>
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	f7f9 f8b1 	bl	8000b78 <__aeabi_dcmpgt>
 8007a16:	b9c8      	cbnz	r0, 8007a4c <_dtoa_r+0x6e4>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f9 f882 	bl	8000b28 <__aeabi_dcmpeq>
 8007a24:	b110      	cbz	r0, 8007a2c <_dtoa_r+0x6c4>
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	07db      	lsls	r3, r3, #31
 8007a2a:	d40f      	bmi.n	8007a4c <_dtoa_r+0x6e4>
 8007a2c:	4651      	mov	r1, sl
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fb18 	bl	8008064 <_Bfree>
 8007a34:	2300      	movs	r3, #0
 8007a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a38:	702b      	strb	r3, [r5, #0]
 8007a3a:	f10b 0301 	add.w	r3, fp, #1
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f43f ace2 	beq.w	800740c <_dtoa_r+0xa4>
 8007a48:	601d      	str	r5, [r3, #0]
 8007a4a:	e4df      	b.n	800740c <_dtoa_r+0xa4>
 8007a4c:	465f      	mov	r7, fp
 8007a4e:	462b      	mov	r3, r5
 8007a50:	461d      	mov	r5, r3
 8007a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a56:	2a39      	cmp	r2, #57	; 0x39
 8007a58:	d106      	bne.n	8007a68 <_dtoa_r+0x700>
 8007a5a:	9a00      	ldr	r2, [sp, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d1f7      	bne.n	8007a50 <_dtoa_r+0x6e8>
 8007a60:	9900      	ldr	r1, [sp, #0]
 8007a62:	2230      	movs	r2, #48	; 0x30
 8007a64:	3701      	adds	r7, #1
 8007a66:	700a      	strb	r2, [r1, #0]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	3201      	adds	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e790      	b.n	8007992 <_dtoa_r+0x62a>
 8007a70:	4ba3      	ldr	r3, [pc, #652]	; (8007d00 <_dtoa_r+0x998>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	f7f8 fdf0 	bl	8000658 <__aeabi_dmul>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460f      	mov	r7, r1
 8007a80:	f7f9 f852 	bl	8000b28 <__aeabi_dcmpeq>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d09e      	beq.n	80079c6 <_dtoa_r+0x65e>
 8007a88:	e7d0      	b.n	8007a2c <_dtoa_r+0x6c4>
 8007a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	f000 80ca 	beq.w	8007c26 <_dtoa_r+0x8be>
 8007a92:	9a07      	ldr	r2, [sp, #28]
 8007a94:	2a01      	cmp	r2, #1
 8007a96:	f300 80ad 	bgt.w	8007bf4 <_dtoa_r+0x88c>
 8007a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	f000 80a5 	beq.w	8007bec <_dtoa_r+0x884>
 8007aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aa6:	9e08      	ldr	r6, [sp, #32]
 8007aa8:	9d05      	ldr	r5, [sp, #20]
 8007aaa:	9a05      	ldr	r2, [sp, #20]
 8007aac:	441a      	add	r2, r3
 8007aae:	9205      	str	r2, [sp, #20]
 8007ab0:	9a06      	ldr	r2, [sp, #24]
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	441a      	add	r2, r3
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	9206      	str	r2, [sp, #24]
 8007aba:	f000 fbd3 	bl	8008264 <__i2b>
 8007abe:	4607      	mov	r7, r0
 8007ac0:	b165      	cbz	r5, 8007adc <_dtoa_r+0x774>
 8007ac2:	9b06      	ldr	r3, [sp, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dd09      	ble.n	8007adc <_dtoa_r+0x774>
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	9a05      	ldr	r2, [sp, #20]
 8007acc:	bfa8      	it	ge
 8007ace:	462b      	movge	r3, r5
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	9205      	str	r2, [sp, #20]
 8007ad4:	9a06      	ldr	r2, [sp, #24]
 8007ad6:	1aed      	subs	r5, r5, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	b1f3      	cbz	r3, 8007b1e <_dtoa_r+0x7b6>
 8007ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80a3 	beq.w	8007c2e <_dtoa_r+0x8c6>
 8007ae8:	2e00      	cmp	r6, #0
 8007aea:	dd10      	ble.n	8007b0e <_dtoa_r+0x7a6>
 8007aec:	4639      	mov	r1, r7
 8007aee:	4632      	mov	r2, r6
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fc77 	bl	80083e4 <__pow5mult>
 8007af6:	4652      	mov	r2, sl
 8007af8:	4601      	mov	r1, r0
 8007afa:	4607      	mov	r7, r0
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fbc7 	bl	8008290 <__multiply>
 8007b02:	4651      	mov	r1, sl
 8007b04:	4680      	mov	r8, r0
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 faac 	bl	8008064 <_Bfree>
 8007b0c:	46c2      	mov	sl, r8
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	1b9a      	subs	r2, r3, r6
 8007b12:	d004      	beq.n	8007b1e <_dtoa_r+0x7b6>
 8007b14:	4651      	mov	r1, sl
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fc64 	bl	80083e4 <__pow5mult>
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	2101      	movs	r1, #1
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fb9f 	bl	8008264 <__i2b>
 8007b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	f340 8081 	ble.w	8007c32 <_dtoa_r+0x8ca>
 8007b30:	461a      	mov	r2, r3
 8007b32:	4601      	mov	r1, r0
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fc55 	bl	80083e4 <__pow5mult>
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	4606      	mov	r6, r0
 8007b40:	dd7a      	ble.n	8007c38 <_dtoa_r+0x8d0>
 8007b42:	f04f 0800 	mov.w	r8, #0
 8007b46:	6933      	ldr	r3, [r6, #16]
 8007b48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b4c:	6918      	ldr	r0, [r3, #16]
 8007b4e:	f000 fb3b 	bl	80081c8 <__hi0bits>
 8007b52:	f1c0 0020 	rsb	r0, r0, #32
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	4418      	add	r0, r3
 8007b5a:	f010 001f 	ands.w	r0, r0, #31
 8007b5e:	f000 8094 	beq.w	8007c8a <_dtoa_r+0x922>
 8007b62:	f1c0 0320 	rsb	r3, r0, #32
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	f340 8085 	ble.w	8007c76 <_dtoa_r+0x90e>
 8007b6c:	9b05      	ldr	r3, [sp, #20]
 8007b6e:	f1c0 001c 	rsb	r0, r0, #28
 8007b72:	4403      	add	r3, r0
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	4403      	add	r3, r0
 8007b7a:	4405      	add	r5, r0
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dd05      	ble.n	8007b90 <_dtoa_r+0x828>
 8007b84:	4651      	mov	r1, sl
 8007b86:	461a      	mov	r2, r3
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fc85 	bl	8008498 <__lshift>
 8007b8e:	4682      	mov	sl, r0
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dd05      	ble.n	8007ba2 <_dtoa_r+0x83a>
 8007b96:	4631      	mov	r1, r6
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fc7c 	bl	8008498 <__lshift>
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d072      	beq.n	8007c8e <_dtoa_r+0x926>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4650      	mov	r0, sl
 8007bac:	f000 fce0 	bl	8008570 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	da6c      	bge.n	8007c8e <_dtoa_r+0x926>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fa74 	bl	80080a8 <__multadd>
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 81b0 	beq.w	8007f2e <_dtoa_r+0xbc6>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	220a      	movs	r2, #10
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fa67 	bl	80080a8 <__multadd>
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	4607      	mov	r7, r0
 8007be0:	f300 8096 	bgt.w	8007d10 <_dtoa_r+0x9a8>
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dc59      	bgt.n	8007c9e <_dtoa_r+0x936>
 8007bea:	e091      	b.n	8007d10 <_dtoa_r+0x9a8>
 8007bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bf2:	e758      	b.n	8007aa6 <_dtoa_r+0x73e>
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	1e5e      	subs	r6, r3, #1
 8007bf8:	9b08      	ldr	r3, [sp, #32]
 8007bfa:	42b3      	cmp	r3, r6
 8007bfc:	bfbf      	itttt	lt
 8007bfe:	9b08      	ldrlt	r3, [sp, #32]
 8007c00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007c02:	9608      	strlt	r6, [sp, #32]
 8007c04:	1af3      	sublt	r3, r6, r3
 8007c06:	bfb4      	ite	lt
 8007c08:	18d2      	addlt	r2, r2, r3
 8007c0a:	1b9e      	subge	r6, r3, r6
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	bfbc      	itt	lt
 8007c10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007c12:	2600      	movlt	r6, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bfb7      	itett	lt
 8007c18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007c1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007c20:	1a9d      	sublt	r5, r3, r2
 8007c22:	2300      	movlt	r3, #0
 8007c24:	e741      	b.n	8007aaa <_dtoa_r+0x742>
 8007c26:	9e08      	ldr	r6, [sp, #32]
 8007c28:	9d05      	ldr	r5, [sp, #20]
 8007c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c2c:	e748      	b.n	8007ac0 <_dtoa_r+0x758>
 8007c2e:	9a08      	ldr	r2, [sp, #32]
 8007c30:	e770      	b.n	8007b14 <_dtoa_r+0x7ac>
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	dc19      	bgt.n	8007c6c <_dtoa_r+0x904>
 8007c38:	9b02      	ldr	r3, [sp, #8]
 8007c3a:	b9bb      	cbnz	r3, 8007c6c <_dtoa_r+0x904>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c42:	b99b      	cbnz	r3, 8007c6c <_dtoa_r+0x904>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c4a:	0d1b      	lsrs	r3, r3, #20
 8007c4c:	051b      	lsls	r3, r3, #20
 8007c4e:	b183      	cbz	r3, 8007c72 <_dtoa_r+0x90a>
 8007c50:	9b05      	ldr	r3, [sp, #20]
 8007c52:	3301      	adds	r3, #1
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	9306      	str	r3, [sp, #24]
 8007c5c:	f04f 0801 	mov.w	r8, #1
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f47f af6f 	bne.w	8007b46 <_dtoa_r+0x7de>
 8007c68:	2001      	movs	r0, #1
 8007c6a:	e774      	b.n	8007b56 <_dtoa_r+0x7ee>
 8007c6c:	f04f 0800 	mov.w	r8, #0
 8007c70:	e7f6      	b.n	8007c60 <_dtoa_r+0x8f8>
 8007c72:	4698      	mov	r8, r3
 8007c74:	e7f4      	b.n	8007c60 <_dtoa_r+0x8f8>
 8007c76:	d082      	beq.n	8007b7e <_dtoa_r+0x816>
 8007c78:	9a05      	ldr	r2, [sp, #20]
 8007c7a:	331c      	adds	r3, #28
 8007c7c:	441a      	add	r2, r3
 8007c7e:	9205      	str	r2, [sp, #20]
 8007c80:	9a06      	ldr	r2, [sp, #24]
 8007c82:	441a      	add	r2, r3
 8007c84:	441d      	add	r5, r3
 8007c86:	9206      	str	r2, [sp, #24]
 8007c88:	e779      	b.n	8007b7e <_dtoa_r+0x816>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e7f4      	b.n	8007c78 <_dtoa_r+0x910>
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc37      	bgt.n	8007d04 <_dtoa_r+0x99c>
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	dd34      	ble.n	8007d04 <_dtoa_r+0x99c>
 8007c9a:	9b04      	ldr	r3, [sp, #16]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	b963      	cbnz	r3, 8007cbc <_dtoa_r+0x954>
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f000 f9fe 	bl	80080a8 <__multadd>
 8007cac:	4601      	mov	r1, r0
 8007cae:	4606      	mov	r6, r0
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	f000 fc5d 	bl	8008570 <__mcmp>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f73f adbb 	bgt.w	8007832 <_dtoa_r+0x4ca>
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbe:	9d00      	ldr	r5, [sp, #0]
 8007cc0:	ea6f 0b03 	mvn.w	fp, r3
 8007cc4:	f04f 0800 	mov.w	r8, #0
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f9ca 	bl	8008064 <_Bfree>
 8007cd0:	2f00      	cmp	r7, #0
 8007cd2:	f43f aeab 	beq.w	8007a2c <_dtoa_r+0x6c4>
 8007cd6:	f1b8 0f00 	cmp.w	r8, #0
 8007cda:	d005      	beq.n	8007ce8 <_dtoa_r+0x980>
 8007cdc:	45b8      	cmp	r8, r7
 8007cde:	d003      	beq.n	8007ce8 <_dtoa_r+0x980>
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 f9be 	bl	8008064 <_Bfree>
 8007ce8:	4639      	mov	r1, r7
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f9ba 	bl	8008064 <_Bfree>
 8007cf0:	e69c      	b.n	8007a2c <_dtoa_r+0x6c4>
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	4637      	mov	r7, r6
 8007cf6:	e7e1      	b.n	8007cbc <_dtoa_r+0x954>
 8007cf8:	46bb      	mov	fp, r7
 8007cfa:	4637      	mov	r7, r6
 8007cfc:	e599      	b.n	8007832 <_dtoa_r+0x4ca>
 8007cfe:	bf00      	nop
 8007d00:	40240000 	.word	0x40240000
 8007d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80c8 	beq.w	8007e9c <_dtoa_r+0xb34>
 8007d0c:	9b04      	ldr	r3, [sp, #16]
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	dd05      	ble.n	8007d20 <_dtoa_r+0x9b8>
 8007d14:	4639      	mov	r1, r7
 8007d16:	462a      	mov	r2, r5
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fbbd 	bl	8008498 <__lshift>
 8007d1e:	4607      	mov	r7, r0
 8007d20:	f1b8 0f00 	cmp.w	r8, #0
 8007d24:	d05b      	beq.n	8007dde <_dtoa_r+0xa76>
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 f95b 	bl	8007fe4 <_Balloc>
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b928      	cbnz	r0, 8007d3e <_dtoa_r+0x9d6>
 8007d32:	4b83      	ldr	r3, [pc, #524]	; (8007f40 <_dtoa_r+0xbd8>)
 8007d34:	4602      	mov	r2, r0
 8007d36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007d3a:	f7ff bb2e 	b.w	800739a <_dtoa_r+0x32>
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	3202      	adds	r2, #2
 8007d42:	0092      	lsls	r2, r2, #2
 8007d44:	f107 010c 	add.w	r1, r7, #12
 8007d48:	300c      	adds	r0, #12
 8007d4a:	f002 f89b 	bl	8009e84 <memcpy>
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4629      	mov	r1, r5
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fba0 	bl	8008498 <__lshift>
 8007d58:	9b00      	ldr	r3, [sp, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d62:	4413      	add	r3, r2
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	46b8      	mov	r8, r7
 8007d6e:	9306      	str	r3, [sp, #24]
 8007d70:	4607      	mov	r7, r0
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	4631      	mov	r1, r6
 8007d76:	3b01      	subs	r3, #1
 8007d78:	4650      	mov	r0, sl
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	f7ff fa6a 	bl	8007254 <quorem>
 8007d80:	4641      	mov	r1, r8
 8007d82:	9002      	str	r0, [sp, #8]
 8007d84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d88:	4650      	mov	r0, sl
 8007d8a:	f000 fbf1 	bl	8008570 <__mcmp>
 8007d8e:	463a      	mov	r2, r7
 8007d90:	9005      	str	r0, [sp, #20]
 8007d92:	4631      	mov	r1, r6
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fc07 	bl	80085a8 <__mdiff>
 8007d9a:	68c2      	ldr	r2, [r0, #12]
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	bb02      	cbnz	r2, 8007de2 <_dtoa_r+0xa7a>
 8007da0:	4601      	mov	r1, r0
 8007da2:	4650      	mov	r0, sl
 8007da4:	f000 fbe4 	bl	8008570 <__mcmp>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4629      	mov	r1, r5
 8007dac:	4620      	mov	r0, r4
 8007dae:	9209      	str	r2, [sp, #36]	; 0x24
 8007db0:	f000 f958 	bl	8008064 <_Bfree>
 8007db4:	9b07      	ldr	r3, [sp, #28]
 8007db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db8:	9d04      	ldr	r5, [sp, #16]
 8007dba:	ea43 0102 	orr.w	r1, r3, r2
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	4319      	orrs	r1, r3
 8007dc2:	d110      	bne.n	8007de6 <_dtoa_r+0xa7e>
 8007dc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007dc8:	d029      	beq.n	8007e1e <_dtoa_r+0xab6>
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd02      	ble.n	8007dd6 <_dtoa_r+0xa6e>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	f883 9000 	strb.w	r9, [r3]
 8007ddc:	e774      	b.n	8007cc8 <_dtoa_r+0x960>
 8007dde:	4638      	mov	r0, r7
 8007de0:	e7ba      	b.n	8007d58 <_dtoa_r+0x9f0>
 8007de2:	2201      	movs	r2, #1
 8007de4:	e7e1      	b.n	8007daa <_dtoa_r+0xa42>
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	db04      	blt.n	8007df6 <_dtoa_r+0xa8e>
 8007dec:	9907      	ldr	r1, [sp, #28]
 8007dee:	430b      	orrs	r3, r1
 8007df0:	9906      	ldr	r1, [sp, #24]
 8007df2:	430b      	orrs	r3, r1
 8007df4:	d120      	bne.n	8007e38 <_dtoa_r+0xad0>
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	dded      	ble.n	8007dd6 <_dtoa_r+0xa6e>
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fb4a 	bl	8008498 <__lshift>
 8007e04:	4631      	mov	r1, r6
 8007e06:	4682      	mov	sl, r0
 8007e08:	f000 fbb2 	bl	8008570 <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dc03      	bgt.n	8007e18 <_dtoa_r+0xab0>
 8007e10:	d1e1      	bne.n	8007dd6 <_dtoa_r+0xa6e>
 8007e12:	f019 0f01 	tst.w	r9, #1
 8007e16:	d0de      	beq.n	8007dd6 <_dtoa_r+0xa6e>
 8007e18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e1c:	d1d8      	bne.n	8007dd0 <_dtoa_r+0xa68>
 8007e1e:	9a01      	ldr	r2, [sp, #4]
 8007e20:	2339      	movs	r3, #57	; 0x39
 8007e22:	7013      	strb	r3, [r2, #0]
 8007e24:	462b      	mov	r3, r5
 8007e26:	461d      	mov	r5, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e2e:	2a39      	cmp	r2, #57	; 0x39
 8007e30:	d06c      	beq.n	8007f0c <_dtoa_r+0xba4>
 8007e32:	3201      	adds	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e747      	b.n	8007cc8 <_dtoa_r+0x960>
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	dd07      	ble.n	8007e4c <_dtoa_r+0xae4>
 8007e3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e40:	d0ed      	beq.n	8007e1e <_dtoa_r+0xab6>
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	f109 0301 	add.w	r3, r9, #1
 8007e48:	7013      	strb	r3, [r2, #0]
 8007e4a:	e73d      	b.n	8007cc8 <_dtoa_r+0x960>
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	9a08      	ldr	r2, [sp, #32]
 8007e50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d043      	beq.n	8007ee0 <_dtoa_r+0xb78>
 8007e58:	4651      	mov	r1, sl
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	220a      	movs	r2, #10
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f922 	bl	80080a8 <__multadd>
 8007e64:	45b8      	cmp	r8, r7
 8007e66:	4682      	mov	sl, r0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	f04f 020a 	mov.w	r2, #10
 8007e70:	4641      	mov	r1, r8
 8007e72:	4620      	mov	r0, r4
 8007e74:	d107      	bne.n	8007e86 <_dtoa_r+0xb1e>
 8007e76:	f000 f917 	bl	80080a8 <__multadd>
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	3301      	adds	r3, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	e775      	b.n	8007d72 <_dtoa_r+0xa0a>
 8007e86:	f000 f90f 	bl	80080a8 <__multadd>
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	2300      	movs	r3, #0
 8007e90:	220a      	movs	r2, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f908 	bl	80080a8 <__multadd>
 8007e98:	4607      	mov	r7, r0
 8007e9a:	e7f0      	b.n	8007e7e <_dtoa_r+0xb16>
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	9d00      	ldr	r5, [sp, #0]
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4650      	mov	r0, sl
 8007ea6:	f7ff f9d5 	bl	8007254 <quorem>
 8007eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	f805 9b01 	strb.w	r9, [r5], #1
 8007eb4:	1aea      	subs	r2, r5, r3
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	dd07      	ble.n	8007ecc <_dtoa_r+0xb64>
 8007ebc:	4651      	mov	r1, sl
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f8f0 	bl	80080a8 <__multadd>
 8007ec8:	4682      	mov	sl, r0
 8007eca:	e7ea      	b.n	8007ea2 <_dtoa_r+0xb3a>
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfc8      	it	gt
 8007ed2:	461d      	movgt	r5, r3
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	bfd8      	it	le
 8007ed8:	2501      	movle	r5, #1
 8007eda:	441d      	add	r5, r3
 8007edc:	f04f 0800 	mov.w	r8, #0
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fad7 	bl	8008498 <__lshift>
 8007eea:	4631      	mov	r1, r6
 8007eec:	4682      	mov	sl, r0
 8007eee:	f000 fb3f 	bl	8008570 <__mcmp>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	dc96      	bgt.n	8007e24 <_dtoa_r+0xabc>
 8007ef6:	d102      	bne.n	8007efe <_dtoa_r+0xb96>
 8007ef8:	f019 0f01 	tst.w	r9, #1
 8007efc:	d192      	bne.n	8007e24 <_dtoa_r+0xabc>
 8007efe:	462b      	mov	r3, r5
 8007f00:	461d      	mov	r5, r3
 8007f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f06:	2a30      	cmp	r2, #48	; 0x30
 8007f08:	d0fa      	beq.n	8007f00 <_dtoa_r+0xb98>
 8007f0a:	e6dd      	b.n	8007cc8 <_dtoa_r+0x960>
 8007f0c:	9a00      	ldr	r2, [sp, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d189      	bne.n	8007e26 <_dtoa_r+0xabe>
 8007f12:	f10b 0b01 	add.w	fp, fp, #1
 8007f16:	2331      	movs	r3, #49	; 0x31
 8007f18:	e796      	b.n	8007e48 <_dtoa_r+0xae0>
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <_dtoa_r+0xbdc>)
 8007f1c:	f7ff ba99 	b.w	8007452 <_dtoa_r+0xea>
 8007f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f47f aa6d 	bne.w	8007402 <_dtoa_r+0x9a>
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <_dtoa_r+0xbe0>)
 8007f2a:	f7ff ba92 	b.w	8007452 <_dtoa_r+0xea>
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dcb5      	bgt.n	8007ea0 <_dtoa_r+0xb38>
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	f73f aeb1 	bgt.w	8007c9e <_dtoa_r+0x936>
 8007f3c:	e7b0      	b.n	8007ea0 <_dtoa_r+0xb38>
 8007f3e:	bf00      	nop
 8007f40:	0800a977 	.word	0x0800a977
 8007f44:	0800a83c 	.word	0x0800a83c
 8007f48:	0800a912 	.word	0x0800a912

08007f4c <_free_r>:
 8007f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d044      	beq.n	8007fdc <_free_r+0x90>
 8007f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f56:	9001      	str	r0, [sp, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f5e:	bfb8      	it	lt
 8007f60:	18e4      	addlt	r4, r4, r3
 8007f62:	f7fd ffbd 	bl	8005ee0 <__malloc_lock>
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <_free_r+0x94>)
 8007f68:	9801      	ldr	r0, [sp, #4]
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	b933      	cbnz	r3, 8007f7c <_free_r+0x30>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	b003      	add	sp, #12
 8007f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f78:	f7fd bfb8 	b.w	8005eec <__malloc_unlock>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d908      	bls.n	8007f92 <_free_r+0x46>
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf01      	itttt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	1949      	addeq	r1, r1, r5
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	e7ed      	b.n	8007f6e <_free_r+0x22>
 8007f92:	461a      	mov	r2, r3
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b10b      	cbz	r3, 8007f9c <_free_r+0x50>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d9fa      	bls.n	8007f92 <_free_r+0x46>
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	1855      	adds	r5, r2, r1
 8007fa0:	42a5      	cmp	r5, r4
 8007fa2:	d10b      	bne.n	8007fbc <_free_r+0x70>
 8007fa4:	6824      	ldr	r4, [r4, #0]
 8007fa6:	4421      	add	r1, r4
 8007fa8:	1854      	adds	r4, r2, r1
 8007faa:	42a3      	cmp	r3, r4
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	d1e0      	bne.n	8007f72 <_free_r+0x26>
 8007fb0:	681c      	ldr	r4, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6053      	str	r3, [r2, #4]
 8007fb6:	440c      	add	r4, r1
 8007fb8:	6014      	str	r4, [r2, #0]
 8007fba:	e7da      	b.n	8007f72 <_free_r+0x26>
 8007fbc:	d902      	bls.n	8007fc4 <_free_r+0x78>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	6003      	str	r3, [r0, #0]
 8007fc2:	e7d6      	b.n	8007f72 <_free_r+0x26>
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	1961      	adds	r1, r4, r5
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf04      	itt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bf04      	itt	eq
 8007fd4:	1949      	addeq	r1, r1, r5
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	6054      	str	r4, [r2, #4]
 8007fda:	e7ca      	b.n	8007f72 <_free_r+0x26>
 8007fdc:	b003      	add	sp, #12
 8007fde:	bd30      	pop	{r4, r5, pc}
 8007fe0:	2000035c 	.word	0x2000035c

08007fe4 <_Balloc>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	69c6      	ldr	r6, [r0, #28]
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	b976      	cbnz	r6, 800800c <_Balloc+0x28>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7fd fec6 	bl	8005d80 <malloc>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	61e0      	str	r0, [r4, #28]
 8007ff8:	b920      	cbnz	r0, 8008004 <_Balloc+0x20>
 8007ffa:	4b18      	ldr	r3, [pc, #96]	; (800805c <_Balloc+0x78>)
 8007ffc:	4818      	ldr	r0, [pc, #96]	; (8008060 <_Balloc+0x7c>)
 8007ffe:	216b      	movs	r1, #107	; 0x6b
 8008000:	f7ff f90a 	bl	8007218 <__assert_func>
 8008004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008008:	6006      	str	r6, [r0, #0]
 800800a:	60c6      	str	r6, [r0, #12]
 800800c:	69e6      	ldr	r6, [r4, #28]
 800800e:	68f3      	ldr	r3, [r6, #12]
 8008010:	b183      	cbz	r3, 8008034 <_Balloc+0x50>
 8008012:	69e3      	ldr	r3, [r4, #28]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800801a:	b9b8      	cbnz	r0, 800804c <_Balloc+0x68>
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f605 	lsl.w	r6, r1, r5
 8008022:	1d72      	adds	r2, r6, #5
 8008024:	0092      	lsls	r2, r2, #2
 8008026:	4620      	mov	r0, r4
 8008028:	f001 ff49 	bl	8009ebe <_calloc_r>
 800802c:	b160      	cbz	r0, 8008048 <_Balloc+0x64>
 800802e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008032:	e00e      	b.n	8008052 <_Balloc+0x6e>
 8008034:	2221      	movs	r2, #33	; 0x21
 8008036:	2104      	movs	r1, #4
 8008038:	4620      	mov	r0, r4
 800803a:	f001 ff40 	bl	8009ebe <_calloc_r>
 800803e:	69e3      	ldr	r3, [r4, #28]
 8008040:	60f0      	str	r0, [r6, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e4      	bne.n	8008012 <_Balloc+0x2e>
 8008048:	2000      	movs	r0, #0
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	6802      	ldr	r2, [r0, #0]
 800804e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008052:	2300      	movs	r3, #0
 8008054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008058:	e7f7      	b.n	800804a <_Balloc+0x66>
 800805a:	bf00      	nop
 800805c:	0800a865 	.word	0x0800a865
 8008060:	0800a988 	.word	0x0800a988

08008064 <_Bfree>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	69c6      	ldr	r6, [r0, #28]
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b976      	cbnz	r6, 800808c <_Bfree+0x28>
 800806e:	2010      	movs	r0, #16
 8008070:	f7fd fe86 	bl	8005d80 <malloc>
 8008074:	4602      	mov	r2, r0
 8008076:	61e8      	str	r0, [r5, #28]
 8008078:	b920      	cbnz	r0, 8008084 <_Bfree+0x20>
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <_Bfree+0x3c>)
 800807c:	4809      	ldr	r0, [pc, #36]	; (80080a4 <_Bfree+0x40>)
 800807e:	218f      	movs	r1, #143	; 0x8f
 8008080:	f7ff f8ca 	bl	8007218 <__assert_func>
 8008084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008088:	6006      	str	r6, [r0, #0]
 800808a:	60c6      	str	r6, [r0, #12]
 800808c:	b13c      	cbz	r4, 800809e <_Bfree+0x3a>
 800808e:	69eb      	ldr	r3, [r5, #28]
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008098:	6021      	str	r1, [r4, #0]
 800809a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	0800a865 	.word	0x0800a865
 80080a4:	0800a988 	.word	0x0800a988

080080a8 <__multadd>:
 80080a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	690d      	ldr	r5, [r1, #16]
 80080ae:	4607      	mov	r7, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	461e      	mov	r6, r3
 80080b4:	f101 0c14 	add.w	ip, r1, #20
 80080b8:	2000      	movs	r0, #0
 80080ba:	f8dc 3000 	ldr.w	r3, [ip]
 80080be:	b299      	uxth	r1, r3
 80080c0:	fb02 6101 	mla	r1, r2, r1, r6
 80080c4:	0c1e      	lsrs	r6, r3, #16
 80080c6:	0c0b      	lsrs	r3, r1, #16
 80080c8:	fb02 3306 	mla	r3, r2, r6, r3
 80080cc:	b289      	uxth	r1, r1
 80080ce:	3001      	adds	r0, #1
 80080d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080d4:	4285      	cmp	r5, r0
 80080d6:	f84c 1b04 	str.w	r1, [ip], #4
 80080da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080de:	dcec      	bgt.n	80080ba <__multadd+0x12>
 80080e0:	b30e      	cbz	r6, 8008126 <__multadd+0x7e>
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc19      	bgt.n	800811c <__multadd+0x74>
 80080e8:	6861      	ldr	r1, [r4, #4]
 80080ea:	4638      	mov	r0, r7
 80080ec:	3101      	adds	r1, #1
 80080ee:	f7ff ff79 	bl	8007fe4 <_Balloc>
 80080f2:	4680      	mov	r8, r0
 80080f4:	b928      	cbnz	r0, 8008102 <__multadd+0x5a>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <__multadd+0x84>)
 80080fa:	480d      	ldr	r0, [pc, #52]	; (8008130 <__multadd+0x88>)
 80080fc:	21ba      	movs	r1, #186	; 0xba
 80080fe:	f7ff f88b 	bl	8007218 <__assert_func>
 8008102:	6922      	ldr	r2, [r4, #16]
 8008104:	3202      	adds	r2, #2
 8008106:	f104 010c 	add.w	r1, r4, #12
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	300c      	adds	r0, #12
 800810e:	f001 feb9 	bl	8009e84 <memcpy>
 8008112:	4621      	mov	r1, r4
 8008114:	4638      	mov	r0, r7
 8008116:	f7ff ffa5 	bl	8008064 <_Bfree>
 800811a:	4644      	mov	r4, r8
 800811c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008120:	3501      	adds	r5, #1
 8008122:	615e      	str	r6, [r3, #20]
 8008124:	6125      	str	r5, [r4, #16]
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	0800a977 	.word	0x0800a977
 8008130:	0800a988 	.word	0x0800a988

08008134 <__s2b>:
 8008134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	4615      	mov	r5, r2
 800813c:	461f      	mov	r7, r3
 800813e:	2209      	movs	r2, #9
 8008140:	3308      	adds	r3, #8
 8008142:	4606      	mov	r6, r0
 8008144:	fb93 f3f2 	sdiv	r3, r3, r2
 8008148:	2100      	movs	r1, #0
 800814a:	2201      	movs	r2, #1
 800814c:	429a      	cmp	r2, r3
 800814e:	db09      	blt.n	8008164 <__s2b+0x30>
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff ff47 	bl	8007fe4 <_Balloc>
 8008156:	b940      	cbnz	r0, 800816a <__s2b+0x36>
 8008158:	4602      	mov	r2, r0
 800815a:	4b19      	ldr	r3, [pc, #100]	; (80081c0 <__s2b+0x8c>)
 800815c:	4819      	ldr	r0, [pc, #100]	; (80081c4 <__s2b+0x90>)
 800815e:	21d3      	movs	r1, #211	; 0xd3
 8008160:	f7ff f85a 	bl	8007218 <__assert_func>
 8008164:	0052      	lsls	r2, r2, #1
 8008166:	3101      	adds	r1, #1
 8008168:	e7f0      	b.n	800814c <__s2b+0x18>
 800816a:	9b08      	ldr	r3, [sp, #32]
 800816c:	6143      	str	r3, [r0, #20]
 800816e:	2d09      	cmp	r5, #9
 8008170:	f04f 0301 	mov.w	r3, #1
 8008174:	6103      	str	r3, [r0, #16]
 8008176:	dd16      	ble.n	80081a6 <__s2b+0x72>
 8008178:	f104 0909 	add.w	r9, r4, #9
 800817c:	46c8      	mov	r8, r9
 800817e:	442c      	add	r4, r5
 8008180:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008184:	4601      	mov	r1, r0
 8008186:	3b30      	subs	r3, #48	; 0x30
 8008188:	220a      	movs	r2, #10
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff ff8c 	bl	80080a8 <__multadd>
 8008190:	45a0      	cmp	r8, r4
 8008192:	d1f5      	bne.n	8008180 <__s2b+0x4c>
 8008194:	f1a5 0408 	sub.w	r4, r5, #8
 8008198:	444c      	add	r4, r9
 800819a:	1b2d      	subs	r5, r5, r4
 800819c:	1963      	adds	r3, r4, r5
 800819e:	42bb      	cmp	r3, r7
 80081a0:	db04      	blt.n	80081ac <__s2b+0x78>
 80081a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a6:	340a      	adds	r4, #10
 80081a8:	2509      	movs	r5, #9
 80081aa:	e7f6      	b.n	800819a <__s2b+0x66>
 80081ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081b0:	4601      	mov	r1, r0
 80081b2:	3b30      	subs	r3, #48	; 0x30
 80081b4:	220a      	movs	r2, #10
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ff76 	bl	80080a8 <__multadd>
 80081bc:	e7ee      	b.n	800819c <__s2b+0x68>
 80081be:	bf00      	nop
 80081c0:	0800a977 	.word	0x0800a977
 80081c4:	0800a988 	.word	0x0800a988

080081c8 <__hi0bits>:
 80081c8:	0c03      	lsrs	r3, r0, #16
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	b9d3      	cbnz	r3, 8008204 <__hi0bits+0x3c>
 80081ce:	0400      	lsls	r0, r0, #16
 80081d0:	2310      	movs	r3, #16
 80081d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081d6:	bf04      	itt	eq
 80081d8:	0200      	lsleq	r0, r0, #8
 80081da:	3308      	addeq	r3, #8
 80081dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081e0:	bf04      	itt	eq
 80081e2:	0100      	lsleq	r0, r0, #4
 80081e4:	3304      	addeq	r3, #4
 80081e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081ea:	bf04      	itt	eq
 80081ec:	0080      	lsleq	r0, r0, #2
 80081ee:	3302      	addeq	r3, #2
 80081f0:	2800      	cmp	r0, #0
 80081f2:	db05      	blt.n	8008200 <__hi0bits+0x38>
 80081f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081f8:	f103 0301 	add.w	r3, r3, #1
 80081fc:	bf08      	it	eq
 80081fe:	2320      	moveq	r3, #32
 8008200:	4618      	mov	r0, r3
 8008202:	4770      	bx	lr
 8008204:	2300      	movs	r3, #0
 8008206:	e7e4      	b.n	80081d2 <__hi0bits+0xa>

08008208 <__lo0bits>:
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	f013 0207 	ands.w	r2, r3, #7
 800820e:	d00c      	beq.n	800822a <__lo0bits+0x22>
 8008210:	07d9      	lsls	r1, r3, #31
 8008212:	d422      	bmi.n	800825a <__lo0bits+0x52>
 8008214:	079a      	lsls	r2, r3, #30
 8008216:	bf49      	itett	mi
 8008218:	085b      	lsrmi	r3, r3, #1
 800821a:	089b      	lsrpl	r3, r3, #2
 800821c:	6003      	strmi	r3, [r0, #0]
 800821e:	2201      	movmi	r2, #1
 8008220:	bf5c      	itt	pl
 8008222:	6003      	strpl	r3, [r0, #0]
 8008224:	2202      	movpl	r2, #2
 8008226:	4610      	mov	r0, r2
 8008228:	4770      	bx	lr
 800822a:	b299      	uxth	r1, r3
 800822c:	b909      	cbnz	r1, 8008232 <__lo0bits+0x2a>
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	2210      	movs	r2, #16
 8008232:	b2d9      	uxtb	r1, r3
 8008234:	b909      	cbnz	r1, 800823a <__lo0bits+0x32>
 8008236:	3208      	adds	r2, #8
 8008238:	0a1b      	lsrs	r3, r3, #8
 800823a:	0719      	lsls	r1, r3, #28
 800823c:	bf04      	itt	eq
 800823e:	091b      	lsreq	r3, r3, #4
 8008240:	3204      	addeq	r2, #4
 8008242:	0799      	lsls	r1, r3, #30
 8008244:	bf04      	itt	eq
 8008246:	089b      	lsreq	r3, r3, #2
 8008248:	3202      	addeq	r2, #2
 800824a:	07d9      	lsls	r1, r3, #31
 800824c:	d403      	bmi.n	8008256 <__lo0bits+0x4e>
 800824e:	085b      	lsrs	r3, r3, #1
 8008250:	f102 0201 	add.w	r2, r2, #1
 8008254:	d003      	beq.n	800825e <__lo0bits+0x56>
 8008256:	6003      	str	r3, [r0, #0]
 8008258:	e7e5      	b.n	8008226 <__lo0bits+0x1e>
 800825a:	2200      	movs	r2, #0
 800825c:	e7e3      	b.n	8008226 <__lo0bits+0x1e>
 800825e:	2220      	movs	r2, #32
 8008260:	e7e1      	b.n	8008226 <__lo0bits+0x1e>
	...

08008264 <__i2b>:
 8008264:	b510      	push	{r4, lr}
 8008266:	460c      	mov	r4, r1
 8008268:	2101      	movs	r1, #1
 800826a:	f7ff febb 	bl	8007fe4 <_Balloc>
 800826e:	4602      	mov	r2, r0
 8008270:	b928      	cbnz	r0, 800827e <__i2b+0x1a>
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <__i2b+0x24>)
 8008274:	4805      	ldr	r0, [pc, #20]	; (800828c <__i2b+0x28>)
 8008276:	f240 1145 	movw	r1, #325	; 0x145
 800827a:	f7fe ffcd 	bl	8007218 <__assert_func>
 800827e:	2301      	movs	r3, #1
 8008280:	6144      	str	r4, [r0, #20]
 8008282:	6103      	str	r3, [r0, #16]
 8008284:	bd10      	pop	{r4, pc}
 8008286:	bf00      	nop
 8008288:	0800a977 	.word	0x0800a977
 800828c:	0800a988 	.word	0x0800a988

08008290 <__multiply>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4691      	mov	r9, r2
 8008296:	690a      	ldr	r2, [r1, #16]
 8008298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800829c:	429a      	cmp	r2, r3
 800829e:	bfb8      	it	lt
 80082a0:	460b      	movlt	r3, r1
 80082a2:	460c      	mov	r4, r1
 80082a4:	bfbc      	itt	lt
 80082a6:	464c      	movlt	r4, r9
 80082a8:	4699      	movlt	r9, r3
 80082aa:	6927      	ldr	r7, [r4, #16]
 80082ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	6861      	ldr	r1, [r4, #4]
 80082b4:	eb07 060a 	add.w	r6, r7, sl
 80082b8:	42b3      	cmp	r3, r6
 80082ba:	b085      	sub	sp, #20
 80082bc:	bfb8      	it	lt
 80082be:	3101      	addlt	r1, #1
 80082c0:	f7ff fe90 	bl	8007fe4 <_Balloc>
 80082c4:	b930      	cbnz	r0, 80082d4 <__multiply+0x44>
 80082c6:	4602      	mov	r2, r0
 80082c8:	4b44      	ldr	r3, [pc, #272]	; (80083dc <__multiply+0x14c>)
 80082ca:	4845      	ldr	r0, [pc, #276]	; (80083e0 <__multiply+0x150>)
 80082cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80082d0:	f7fe ffa2 	bl	8007218 <__assert_func>
 80082d4:	f100 0514 	add.w	r5, r0, #20
 80082d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082dc:	462b      	mov	r3, r5
 80082de:	2200      	movs	r2, #0
 80082e0:	4543      	cmp	r3, r8
 80082e2:	d321      	bcc.n	8008328 <__multiply+0x98>
 80082e4:	f104 0314 	add.w	r3, r4, #20
 80082e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082ec:	f109 0314 	add.w	r3, r9, #20
 80082f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082f4:	9202      	str	r2, [sp, #8]
 80082f6:	1b3a      	subs	r2, r7, r4
 80082f8:	3a15      	subs	r2, #21
 80082fa:	f022 0203 	bic.w	r2, r2, #3
 80082fe:	3204      	adds	r2, #4
 8008300:	f104 0115 	add.w	r1, r4, #21
 8008304:	428f      	cmp	r7, r1
 8008306:	bf38      	it	cc
 8008308:	2204      	movcc	r2, #4
 800830a:	9201      	str	r2, [sp, #4]
 800830c:	9a02      	ldr	r2, [sp, #8]
 800830e:	9303      	str	r3, [sp, #12]
 8008310:	429a      	cmp	r2, r3
 8008312:	d80c      	bhi.n	800832e <__multiply+0x9e>
 8008314:	2e00      	cmp	r6, #0
 8008316:	dd03      	ble.n	8008320 <__multiply+0x90>
 8008318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05b      	beq.n	80083d8 <__multiply+0x148>
 8008320:	6106      	str	r6, [r0, #16]
 8008322:	b005      	add	sp, #20
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	f843 2b04 	str.w	r2, [r3], #4
 800832c:	e7d8      	b.n	80082e0 <__multiply+0x50>
 800832e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008332:	f1ba 0f00 	cmp.w	sl, #0
 8008336:	d024      	beq.n	8008382 <__multiply+0xf2>
 8008338:	f104 0e14 	add.w	lr, r4, #20
 800833c:	46a9      	mov	r9, r5
 800833e:	f04f 0c00 	mov.w	ip, #0
 8008342:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008346:	f8d9 1000 	ldr.w	r1, [r9]
 800834a:	fa1f fb82 	uxth.w	fp, r2
 800834e:	b289      	uxth	r1, r1
 8008350:	fb0a 110b 	mla	r1, sl, fp, r1
 8008354:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008358:	f8d9 2000 	ldr.w	r2, [r9]
 800835c:	4461      	add	r1, ip
 800835e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008362:	fb0a c20b 	mla	r2, sl, fp, ip
 8008366:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800836a:	b289      	uxth	r1, r1
 800836c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008370:	4577      	cmp	r7, lr
 8008372:	f849 1b04 	str.w	r1, [r9], #4
 8008376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800837a:	d8e2      	bhi.n	8008342 <__multiply+0xb2>
 800837c:	9a01      	ldr	r2, [sp, #4]
 800837e:	f845 c002 	str.w	ip, [r5, r2]
 8008382:	9a03      	ldr	r2, [sp, #12]
 8008384:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008388:	3304      	adds	r3, #4
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	d021      	beq.n	80083d4 <__multiply+0x144>
 8008390:	6829      	ldr	r1, [r5, #0]
 8008392:	f104 0c14 	add.w	ip, r4, #20
 8008396:	46ae      	mov	lr, r5
 8008398:	f04f 0a00 	mov.w	sl, #0
 800839c:	f8bc b000 	ldrh.w	fp, [ip]
 80083a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083a4:	fb09 220b 	mla	r2, r9, fp, r2
 80083a8:	4452      	add	r2, sl
 80083aa:	b289      	uxth	r1, r1
 80083ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083b0:	f84e 1b04 	str.w	r1, [lr], #4
 80083b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80083b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083bc:	f8be 1000 	ldrh.w	r1, [lr]
 80083c0:	fb09 110a 	mla	r1, r9, sl, r1
 80083c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80083c8:	4567      	cmp	r7, ip
 80083ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083ce:	d8e5      	bhi.n	800839c <__multiply+0x10c>
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	50a9      	str	r1, [r5, r2]
 80083d4:	3504      	adds	r5, #4
 80083d6:	e799      	b.n	800830c <__multiply+0x7c>
 80083d8:	3e01      	subs	r6, #1
 80083da:	e79b      	b.n	8008314 <__multiply+0x84>
 80083dc:	0800a977 	.word	0x0800a977
 80083e0:	0800a988 	.word	0x0800a988

080083e4 <__pow5mult>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	4615      	mov	r5, r2
 80083ea:	f012 0203 	ands.w	r2, r2, #3
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	d007      	beq.n	8008404 <__pow5mult+0x20>
 80083f4:	4c25      	ldr	r4, [pc, #148]	; (800848c <__pow5mult+0xa8>)
 80083f6:	3a01      	subs	r2, #1
 80083f8:	2300      	movs	r3, #0
 80083fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fe:	f7ff fe53 	bl	80080a8 <__multadd>
 8008402:	4607      	mov	r7, r0
 8008404:	10ad      	asrs	r5, r5, #2
 8008406:	d03d      	beq.n	8008484 <__pow5mult+0xa0>
 8008408:	69f4      	ldr	r4, [r6, #28]
 800840a:	b97c      	cbnz	r4, 800842c <__pow5mult+0x48>
 800840c:	2010      	movs	r0, #16
 800840e:	f7fd fcb7 	bl	8005d80 <malloc>
 8008412:	4602      	mov	r2, r0
 8008414:	61f0      	str	r0, [r6, #28]
 8008416:	b928      	cbnz	r0, 8008424 <__pow5mult+0x40>
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <__pow5mult+0xac>)
 800841a:	481e      	ldr	r0, [pc, #120]	; (8008494 <__pow5mult+0xb0>)
 800841c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008420:	f7fe fefa 	bl	8007218 <__assert_func>
 8008424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008428:	6004      	str	r4, [r0, #0]
 800842a:	60c4      	str	r4, [r0, #12]
 800842c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008434:	b94c      	cbnz	r4, 800844a <__pow5mult+0x66>
 8008436:	f240 2171 	movw	r1, #625	; 0x271
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff ff12 	bl	8008264 <__i2b>
 8008440:	2300      	movs	r3, #0
 8008442:	f8c8 0008 	str.w	r0, [r8, #8]
 8008446:	4604      	mov	r4, r0
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	07eb      	lsls	r3, r5, #31
 8008450:	d50a      	bpl.n	8008468 <__pow5mult+0x84>
 8008452:	4639      	mov	r1, r7
 8008454:	4622      	mov	r2, r4
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff ff1a 	bl	8008290 <__multiply>
 800845c:	4639      	mov	r1, r7
 800845e:	4680      	mov	r8, r0
 8008460:	4630      	mov	r0, r6
 8008462:	f7ff fdff 	bl	8008064 <_Bfree>
 8008466:	4647      	mov	r7, r8
 8008468:	106d      	asrs	r5, r5, #1
 800846a:	d00b      	beq.n	8008484 <__pow5mult+0xa0>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	b938      	cbnz	r0, 8008480 <__pow5mult+0x9c>
 8008470:	4622      	mov	r2, r4
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff ff0b 	bl	8008290 <__multiply>
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	f8c0 9000 	str.w	r9, [r0]
 8008480:	4604      	mov	r4, r0
 8008482:	e7e4      	b.n	800844e <__pow5mult+0x6a>
 8008484:	4638      	mov	r0, r7
 8008486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848a:	bf00      	nop
 800848c:	0800aad8 	.word	0x0800aad8
 8008490:	0800a865 	.word	0x0800a865
 8008494:	0800a988 	.word	0x0800a988

08008498 <__lshift>:
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	460c      	mov	r4, r1
 800849e:	6849      	ldr	r1, [r1, #4]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	4607      	mov	r7, r0
 80084aa:	4691      	mov	r9, r2
 80084ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084b0:	f108 0601 	add.w	r6, r8, #1
 80084b4:	42b3      	cmp	r3, r6
 80084b6:	db0b      	blt.n	80084d0 <__lshift+0x38>
 80084b8:	4638      	mov	r0, r7
 80084ba:	f7ff fd93 	bl	8007fe4 <_Balloc>
 80084be:	4605      	mov	r5, r0
 80084c0:	b948      	cbnz	r0, 80084d6 <__lshift+0x3e>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4b28      	ldr	r3, [pc, #160]	; (8008568 <__lshift+0xd0>)
 80084c6:	4829      	ldr	r0, [pc, #164]	; (800856c <__lshift+0xd4>)
 80084c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80084cc:	f7fe fea4 	bl	8007218 <__assert_func>
 80084d0:	3101      	adds	r1, #1
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	e7ee      	b.n	80084b4 <__lshift+0x1c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f100 0114 	add.w	r1, r0, #20
 80084dc:	f100 0210 	add.w	r2, r0, #16
 80084e0:	4618      	mov	r0, r3
 80084e2:	4553      	cmp	r3, sl
 80084e4:	db33      	blt.n	800854e <__lshift+0xb6>
 80084e6:	6920      	ldr	r0, [r4, #16]
 80084e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084ec:	f104 0314 	add.w	r3, r4, #20
 80084f0:	f019 091f 	ands.w	r9, r9, #31
 80084f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084fc:	d02b      	beq.n	8008556 <__lshift+0xbe>
 80084fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008502:	468a      	mov	sl, r1
 8008504:	2200      	movs	r2, #0
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	fa00 f009 	lsl.w	r0, r0, r9
 800850c:	4310      	orrs	r0, r2
 800850e:	f84a 0b04 	str.w	r0, [sl], #4
 8008512:	f853 2b04 	ldr.w	r2, [r3], #4
 8008516:	459c      	cmp	ip, r3
 8008518:	fa22 f20e 	lsr.w	r2, r2, lr
 800851c:	d8f3      	bhi.n	8008506 <__lshift+0x6e>
 800851e:	ebac 0304 	sub.w	r3, ip, r4
 8008522:	3b15      	subs	r3, #21
 8008524:	f023 0303 	bic.w	r3, r3, #3
 8008528:	3304      	adds	r3, #4
 800852a:	f104 0015 	add.w	r0, r4, #21
 800852e:	4584      	cmp	ip, r0
 8008530:	bf38      	it	cc
 8008532:	2304      	movcc	r3, #4
 8008534:	50ca      	str	r2, [r1, r3]
 8008536:	b10a      	cbz	r2, 800853c <__lshift+0xa4>
 8008538:	f108 0602 	add.w	r6, r8, #2
 800853c:	3e01      	subs	r6, #1
 800853e:	4638      	mov	r0, r7
 8008540:	612e      	str	r6, [r5, #16]
 8008542:	4621      	mov	r1, r4
 8008544:	f7ff fd8e 	bl	8008064 <_Bfree>
 8008548:	4628      	mov	r0, r5
 800854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008552:	3301      	adds	r3, #1
 8008554:	e7c5      	b.n	80084e2 <__lshift+0x4a>
 8008556:	3904      	subs	r1, #4
 8008558:	f853 2b04 	ldr.w	r2, [r3], #4
 800855c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008560:	459c      	cmp	ip, r3
 8008562:	d8f9      	bhi.n	8008558 <__lshift+0xc0>
 8008564:	e7ea      	b.n	800853c <__lshift+0xa4>
 8008566:	bf00      	nop
 8008568:	0800a977 	.word	0x0800a977
 800856c:	0800a988 	.word	0x0800a988

08008570 <__mcmp>:
 8008570:	b530      	push	{r4, r5, lr}
 8008572:	6902      	ldr	r2, [r0, #16]
 8008574:	690c      	ldr	r4, [r1, #16]
 8008576:	1b12      	subs	r2, r2, r4
 8008578:	d10e      	bne.n	8008598 <__mcmp+0x28>
 800857a:	f100 0314 	add.w	r3, r0, #20
 800857e:	3114      	adds	r1, #20
 8008580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800858c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008590:	42a5      	cmp	r5, r4
 8008592:	d003      	beq.n	800859c <__mcmp+0x2c>
 8008594:	d305      	bcc.n	80085a2 <__mcmp+0x32>
 8008596:	2201      	movs	r2, #1
 8008598:	4610      	mov	r0, r2
 800859a:	bd30      	pop	{r4, r5, pc}
 800859c:	4283      	cmp	r3, r0
 800859e:	d3f3      	bcc.n	8008588 <__mcmp+0x18>
 80085a0:	e7fa      	b.n	8008598 <__mcmp+0x28>
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	e7f7      	b.n	8008598 <__mcmp+0x28>

080085a8 <__mdiff>:
 80085a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	460c      	mov	r4, r1
 80085ae:	4606      	mov	r6, r0
 80085b0:	4611      	mov	r1, r2
 80085b2:	4620      	mov	r0, r4
 80085b4:	4690      	mov	r8, r2
 80085b6:	f7ff ffdb 	bl	8008570 <__mcmp>
 80085ba:	1e05      	subs	r5, r0, #0
 80085bc:	d110      	bne.n	80085e0 <__mdiff+0x38>
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff fd0f 	bl	8007fe4 <_Balloc>
 80085c6:	b930      	cbnz	r0, 80085d6 <__mdiff+0x2e>
 80085c8:	4b3a      	ldr	r3, [pc, #232]	; (80086b4 <__mdiff+0x10c>)
 80085ca:	4602      	mov	r2, r0
 80085cc:	f240 2137 	movw	r1, #567	; 0x237
 80085d0:	4839      	ldr	r0, [pc, #228]	; (80086b8 <__mdiff+0x110>)
 80085d2:	f7fe fe21 	bl	8007218 <__assert_func>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	bfa4      	itt	ge
 80085e2:	4643      	movge	r3, r8
 80085e4:	46a0      	movge	r8, r4
 80085e6:	4630      	mov	r0, r6
 80085e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085ec:	bfa6      	itte	ge
 80085ee:	461c      	movge	r4, r3
 80085f0:	2500      	movge	r5, #0
 80085f2:	2501      	movlt	r5, #1
 80085f4:	f7ff fcf6 	bl	8007fe4 <_Balloc>
 80085f8:	b920      	cbnz	r0, 8008604 <__mdiff+0x5c>
 80085fa:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <__mdiff+0x10c>)
 80085fc:	4602      	mov	r2, r0
 80085fe:	f240 2145 	movw	r1, #581	; 0x245
 8008602:	e7e5      	b.n	80085d0 <__mdiff+0x28>
 8008604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008608:	6926      	ldr	r6, [r4, #16]
 800860a:	60c5      	str	r5, [r0, #12]
 800860c:	f104 0914 	add.w	r9, r4, #20
 8008610:	f108 0514 	add.w	r5, r8, #20
 8008614:	f100 0e14 	add.w	lr, r0, #20
 8008618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800861c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008620:	f108 0210 	add.w	r2, r8, #16
 8008624:	46f2      	mov	sl, lr
 8008626:	2100      	movs	r1, #0
 8008628:	f859 3b04 	ldr.w	r3, [r9], #4
 800862c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008630:	fa11 f88b 	uxtah	r8, r1, fp
 8008634:	b299      	uxth	r1, r3
 8008636:	0c1b      	lsrs	r3, r3, #16
 8008638:	eba8 0801 	sub.w	r8, r8, r1
 800863c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008640:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008644:	fa1f f888 	uxth.w	r8, r8
 8008648:	1419      	asrs	r1, r3, #16
 800864a:	454e      	cmp	r6, r9
 800864c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008650:	f84a 3b04 	str.w	r3, [sl], #4
 8008654:	d8e8      	bhi.n	8008628 <__mdiff+0x80>
 8008656:	1b33      	subs	r3, r6, r4
 8008658:	3b15      	subs	r3, #21
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	3304      	adds	r3, #4
 8008660:	3415      	adds	r4, #21
 8008662:	42a6      	cmp	r6, r4
 8008664:	bf38      	it	cc
 8008666:	2304      	movcc	r3, #4
 8008668:	441d      	add	r5, r3
 800866a:	4473      	add	r3, lr
 800866c:	469e      	mov	lr, r3
 800866e:	462e      	mov	r6, r5
 8008670:	4566      	cmp	r6, ip
 8008672:	d30e      	bcc.n	8008692 <__mdiff+0xea>
 8008674:	f10c 0203 	add.w	r2, ip, #3
 8008678:	1b52      	subs	r2, r2, r5
 800867a:	f022 0203 	bic.w	r2, r2, #3
 800867e:	3d03      	subs	r5, #3
 8008680:	45ac      	cmp	ip, r5
 8008682:	bf38      	it	cc
 8008684:	2200      	movcc	r2, #0
 8008686:	4413      	add	r3, r2
 8008688:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800868c:	b17a      	cbz	r2, 80086ae <__mdiff+0x106>
 800868e:	6107      	str	r7, [r0, #16]
 8008690:	e7a4      	b.n	80085dc <__mdiff+0x34>
 8008692:	f856 8b04 	ldr.w	r8, [r6], #4
 8008696:	fa11 f288 	uxtah	r2, r1, r8
 800869a:	1414      	asrs	r4, r2, #16
 800869c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086a0:	b292      	uxth	r2, r2
 80086a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086a6:	f84e 2b04 	str.w	r2, [lr], #4
 80086aa:	1421      	asrs	r1, r4, #16
 80086ac:	e7e0      	b.n	8008670 <__mdiff+0xc8>
 80086ae:	3f01      	subs	r7, #1
 80086b0:	e7ea      	b.n	8008688 <__mdiff+0xe0>
 80086b2:	bf00      	nop
 80086b4:	0800a977 	.word	0x0800a977
 80086b8:	0800a988 	.word	0x0800a988

080086bc <__ulp>:
 80086bc:	b082      	sub	sp, #8
 80086be:	ed8d 0b00 	vstr	d0, [sp]
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <__ulp+0x48>)
 80086c6:	4013      	ands	r3, r2
 80086c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dc08      	bgt.n	80086e2 <__ulp+0x26>
 80086d0:	425b      	negs	r3, r3
 80086d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80086d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086da:	da04      	bge.n	80086e6 <__ulp+0x2a>
 80086dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086e0:	4113      	asrs	r3, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	e008      	b.n	80086f8 <__ulp+0x3c>
 80086e6:	f1a2 0314 	sub.w	r3, r2, #20
 80086ea:	2b1e      	cmp	r3, #30
 80086ec:	bfda      	itte	le
 80086ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80086f2:	40da      	lsrle	r2, r3
 80086f4:	2201      	movgt	r2, #1
 80086f6:	2300      	movs	r3, #0
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	ec41 0b10 	vmov	d0, r0, r1
 8008700:	b002      	add	sp, #8
 8008702:	4770      	bx	lr
 8008704:	7ff00000 	.word	0x7ff00000

08008708 <__b2d>:
 8008708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	6906      	ldr	r6, [r0, #16]
 800870e:	f100 0814 	add.w	r8, r0, #20
 8008712:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008716:	1f37      	subs	r7, r6, #4
 8008718:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800871c:	4610      	mov	r0, r2
 800871e:	f7ff fd53 	bl	80081c8 <__hi0bits>
 8008722:	f1c0 0320 	rsb	r3, r0, #32
 8008726:	280a      	cmp	r0, #10
 8008728:	600b      	str	r3, [r1, #0]
 800872a:	491b      	ldr	r1, [pc, #108]	; (8008798 <__b2d+0x90>)
 800872c:	dc15      	bgt.n	800875a <__b2d+0x52>
 800872e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008732:	fa22 f30c 	lsr.w	r3, r2, ip
 8008736:	45b8      	cmp	r8, r7
 8008738:	ea43 0501 	orr.w	r5, r3, r1
 800873c:	bf34      	ite	cc
 800873e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008742:	2300      	movcs	r3, #0
 8008744:	3015      	adds	r0, #21
 8008746:	fa02 f000 	lsl.w	r0, r2, r0
 800874a:	fa23 f30c 	lsr.w	r3, r3, ip
 800874e:	4303      	orrs	r3, r0
 8008750:	461c      	mov	r4, r3
 8008752:	ec45 4b10 	vmov	d0, r4, r5
 8008756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875a:	45b8      	cmp	r8, r7
 800875c:	bf3a      	itte	cc
 800875e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008762:	f1a6 0708 	subcc.w	r7, r6, #8
 8008766:	2300      	movcs	r3, #0
 8008768:	380b      	subs	r0, #11
 800876a:	d012      	beq.n	8008792 <__b2d+0x8a>
 800876c:	f1c0 0120 	rsb	r1, r0, #32
 8008770:	fa23 f401 	lsr.w	r4, r3, r1
 8008774:	4082      	lsls	r2, r0
 8008776:	4322      	orrs	r2, r4
 8008778:	4547      	cmp	r7, r8
 800877a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800877e:	bf8c      	ite	hi
 8008780:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008784:	2200      	movls	r2, #0
 8008786:	4083      	lsls	r3, r0
 8008788:	40ca      	lsrs	r2, r1
 800878a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800878e:	4313      	orrs	r3, r2
 8008790:	e7de      	b.n	8008750 <__b2d+0x48>
 8008792:	ea42 0501 	orr.w	r5, r2, r1
 8008796:	e7db      	b.n	8008750 <__b2d+0x48>
 8008798:	3ff00000 	.word	0x3ff00000

0800879c <__d2b>:
 800879c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	460f      	mov	r7, r1
 80087a2:	2101      	movs	r1, #1
 80087a4:	ec59 8b10 	vmov	r8, r9, d0
 80087a8:	4616      	mov	r6, r2
 80087aa:	f7ff fc1b 	bl	8007fe4 <_Balloc>
 80087ae:	4604      	mov	r4, r0
 80087b0:	b930      	cbnz	r0, 80087c0 <__d2b+0x24>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4b24      	ldr	r3, [pc, #144]	; (8008848 <__d2b+0xac>)
 80087b6:	4825      	ldr	r0, [pc, #148]	; (800884c <__d2b+0xb0>)
 80087b8:	f240 310f 	movw	r1, #783	; 0x30f
 80087bc:	f7fe fd2c 	bl	8007218 <__assert_func>
 80087c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c8:	bb2d      	cbnz	r5, 8008816 <__d2b+0x7a>
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	f1b8 0300 	subs.w	r3, r8, #0
 80087d0:	d026      	beq.n	8008820 <__d2b+0x84>
 80087d2:	4668      	mov	r0, sp
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	f7ff fd17 	bl	8008208 <__lo0bits>
 80087da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087de:	b1e8      	cbz	r0, 800881c <__d2b+0x80>
 80087e0:	f1c0 0320 	rsb	r3, r0, #32
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	430b      	orrs	r3, r1
 80087ea:	40c2      	lsrs	r2, r0
 80087ec:	6163      	str	r3, [r4, #20]
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	61a3      	str	r3, [r4, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf14      	ite	ne
 80087f8:	2202      	movne	r2, #2
 80087fa:	2201      	moveq	r2, #1
 80087fc:	6122      	str	r2, [r4, #16]
 80087fe:	b1bd      	cbz	r5, 8008830 <__d2b+0x94>
 8008800:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008804:	4405      	add	r5, r0
 8008806:	603d      	str	r5, [r7, #0]
 8008808:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800880c:	6030      	str	r0, [r6, #0]
 800880e:	4620      	mov	r0, r4
 8008810:	b003      	add	sp, #12
 8008812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800881a:	e7d6      	b.n	80087ca <__d2b+0x2e>
 800881c:	6161      	str	r1, [r4, #20]
 800881e:	e7e7      	b.n	80087f0 <__d2b+0x54>
 8008820:	a801      	add	r0, sp, #4
 8008822:	f7ff fcf1 	bl	8008208 <__lo0bits>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	6163      	str	r3, [r4, #20]
 800882a:	3020      	adds	r0, #32
 800882c:	2201      	movs	r2, #1
 800882e:	e7e5      	b.n	80087fc <__d2b+0x60>
 8008830:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008834:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008838:	6038      	str	r0, [r7, #0]
 800883a:	6918      	ldr	r0, [r3, #16]
 800883c:	f7ff fcc4 	bl	80081c8 <__hi0bits>
 8008840:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008844:	e7e2      	b.n	800880c <__d2b+0x70>
 8008846:	bf00      	nop
 8008848:	0800a977 	.word	0x0800a977
 800884c:	0800a988 	.word	0x0800a988

08008850 <__ratio>:
 8008850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	4688      	mov	r8, r1
 8008856:	4669      	mov	r1, sp
 8008858:	4681      	mov	r9, r0
 800885a:	f7ff ff55 	bl	8008708 <__b2d>
 800885e:	a901      	add	r1, sp, #4
 8008860:	4640      	mov	r0, r8
 8008862:	ec55 4b10 	vmov	r4, r5, d0
 8008866:	f7ff ff4f 	bl	8008708 <__b2d>
 800886a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800886e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008872:	eba3 0c02 	sub.w	ip, r3, r2
 8008876:	e9dd 3200 	ldrd	r3, r2, [sp]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008880:	ec51 0b10 	vmov	r0, r1, d0
 8008884:	2b00      	cmp	r3, #0
 8008886:	bfd6      	itet	le
 8008888:	460a      	movle	r2, r1
 800888a:	462a      	movgt	r2, r5
 800888c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008890:	468b      	mov	fp, r1
 8008892:	462f      	mov	r7, r5
 8008894:	bfd4      	ite	le
 8008896:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800889a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800889e:	4620      	mov	r0, r4
 80088a0:	ee10 2a10 	vmov	r2, s0
 80088a4:	465b      	mov	r3, fp
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f800 	bl	80008ac <__aeabi_ddiv>
 80088ac:	ec41 0b10 	vmov	d0, r0, r1
 80088b0:	b003      	add	sp, #12
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088b6 <__copybits>:
 80088b6:	3901      	subs	r1, #1
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	1149      	asrs	r1, r1, #5
 80088bc:	6914      	ldr	r4, [r2, #16]
 80088be:	3101      	adds	r1, #1
 80088c0:	f102 0314 	add.w	r3, r2, #20
 80088c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088cc:	1f05      	subs	r5, r0, #4
 80088ce:	42a3      	cmp	r3, r4
 80088d0:	d30c      	bcc.n	80088ec <__copybits+0x36>
 80088d2:	1aa3      	subs	r3, r4, r2
 80088d4:	3b11      	subs	r3, #17
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	3211      	adds	r2, #17
 80088dc:	42a2      	cmp	r2, r4
 80088de:	bf88      	it	hi
 80088e0:	2300      	movhi	r3, #0
 80088e2:	4418      	add	r0, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	4288      	cmp	r0, r1
 80088e8:	d305      	bcc.n	80088f6 <__copybits+0x40>
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80088f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80088f4:	e7eb      	b.n	80088ce <__copybits+0x18>
 80088f6:	f840 3b04 	str.w	r3, [r0], #4
 80088fa:	e7f4      	b.n	80088e6 <__copybits+0x30>

080088fc <__any_on>:
 80088fc:	f100 0214 	add.w	r2, r0, #20
 8008900:	6900      	ldr	r0, [r0, #16]
 8008902:	114b      	asrs	r3, r1, #5
 8008904:	4298      	cmp	r0, r3
 8008906:	b510      	push	{r4, lr}
 8008908:	db11      	blt.n	800892e <__any_on+0x32>
 800890a:	dd0a      	ble.n	8008922 <__any_on+0x26>
 800890c:	f011 011f 	ands.w	r1, r1, #31
 8008910:	d007      	beq.n	8008922 <__any_on+0x26>
 8008912:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008916:	fa24 f001 	lsr.w	r0, r4, r1
 800891a:	fa00 f101 	lsl.w	r1, r0, r1
 800891e:	428c      	cmp	r4, r1
 8008920:	d10b      	bne.n	800893a <__any_on+0x3e>
 8008922:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008926:	4293      	cmp	r3, r2
 8008928:	d803      	bhi.n	8008932 <__any_on+0x36>
 800892a:	2000      	movs	r0, #0
 800892c:	bd10      	pop	{r4, pc}
 800892e:	4603      	mov	r3, r0
 8008930:	e7f7      	b.n	8008922 <__any_on+0x26>
 8008932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008936:	2900      	cmp	r1, #0
 8008938:	d0f5      	beq.n	8008926 <__any_on+0x2a>
 800893a:	2001      	movs	r0, #1
 800893c:	e7f6      	b.n	800892c <__any_on+0x30>

0800893e <sulp>:
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	ec45 4b10 	vmov	d0, r4, r5
 8008948:	4616      	mov	r6, r2
 800894a:	f7ff feb7 	bl	80086bc <__ulp>
 800894e:	ec51 0b10 	vmov	r0, r1, d0
 8008952:	b17e      	cbz	r6, 8008974 <sulp+0x36>
 8008954:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008958:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800895c:	2b00      	cmp	r3, #0
 800895e:	dd09      	ble.n	8008974 <sulp+0x36>
 8008960:	051b      	lsls	r3, r3, #20
 8008962:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008966:	2400      	movs	r4, #0
 8008968:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800896c:	4622      	mov	r2, r4
 800896e:	462b      	mov	r3, r5
 8008970:	f7f7 fe72 	bl	8000658 <__aeabi_dmul>
 8008974:	bd70      	pop	{r4, r5, r6, pc}
	...

08008978 <_strtod_l>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	ed2d 8b02 	vpush	{d8}
 8008980:	b09b      	sub	sp, #108	; 0x6c
 8008982:	4604      	mov	r4, r0
 8008984:	9213      	str	r2, [sp, #76]	; 0x4c
 8008986:	2200      	movs	r2, #0
 8008988:	9216      	str	r2, [sp, #88]	; 0x58
 800898a:	460d      	mov	r5, r1
 800898c:	f04f 0800 	mov.w	r8, #0
 8008990:	f04f 0900 	mov.w	r9, #0
 8008994:	460a      	mov	r2, r1
 8008996:	9215      	str	r2, [sp, #84]	; 0x54
 8008998:	7811      	ldrb	r1, [r2, #0]
 800899a:	292b      	cmp	r1, #43	; 0x2b
 800899c:	d04c      	beq.n	8008a38 <_strtod_l+0xc0>
 800899e:	d83a      	bhi.n	8008a16 <_strtod_l+0x9e>
 80089a0:	290d      	cmp	r1, #13
 80089a2:	d834      	bhi.n	8008a0e <_strtod_l+0x96>
 80089a4:	2908      	cmp	r1, #8
 80089a6:	d834      	bhi.n	8008a12 <_strtod_l+0x9a>
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d03d      	beq.n	8008a28 <_strtod_l+0xb0>
 80089ac:	2200      	movs	r2, #0
 80089ae:	920a      	str	r2, [sp, #40]	; 0x28
 80089b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80089b2:	7832      	ldrb	r2, [r6, #0]
 80089b4:	2a30      	cmp	r2, #48	; 0x30
 80089b6:	f040 80b4 	bne.w	8008b22 <_strtod_l+0x1aa>
 80089ba:	7872      	ldrb	r2, [r6, #1]
 80089bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80089c0:	2a58      	cmp	r2, #88	; 0x58
 80089c2:	d170      	bne.n	8008aa6 <_strtod_l+0x12e>
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	ab16      	add	r3, sp, #88	; 0x58
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	4a8e      	ldr	r2, [pc, #568]	; (8008c08 <_strtod_l+0x290>)
 80089d0:	ab17      	add	r3, sp, #92	; 0x5c
 80089d2:	a915      	add	r1, sp, #84	; 0x54
 80089d4:	4620      	mov	r0, r4
 80089d6:	f001 faef 	bl	8009fb8 <__gethex>
 80089da:	f010 070f 	ands.w	r7, r0, #15
 80089de:	4605      	mov	r5, r0
 80089e0:	d005      	beq.n	80089ee <_strtod_l+0x76>
 80089e2:	2f06      	cmp	r7, #6
 80089e4:	d12a      	bne.n	8008a3c <_strtod_l+0xc4>
 80089e6:	3601      	adds	r6, #1
 80089e8:	2300      	movs	r3, #0
 80089ea:	9615      	str	r6, [sp, #84]	; 0x54
 80089ec:	930a      	str	r3, [sp, #40]	; 0x28
 80089ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 857f 	bne.w	80094f4 <_strtod_l+0xb7c>
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	b1db      	cbz	r3, 8008a32 <_strtod_l+0xba>
 80089fa:	4642      	mov	r2, r8
 80089fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a00:	ec43 2b10 	vmov	d0, r2, r3
 8008a04:	b01b      	add	sp, #108	; 0x6c
 8008a06:	ecbd 8b02 	vpop	{d8}
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	2920      	cmp	r1, #32
 8008a10:	d1cc      	bne.n	80089ac <_strtod_l+0x34>
 8008a12:	3201      	adds	r2, #1
 8008a14:	e7bf      	b.n	8008996 <_strtod_l+0x1e>
 8008a16:	292d      	cmp	r1, #45	; 0x2d
 8008a18:	d1c8      	bne.n	80089ac <_strtod_l+0x34>
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	910a      	str	r1, [sp, #40]	; 0x28
 8008a1e:	1c51      	adds	r1, r2, #1
 8008a20:	9115      	str	r1, [sp, #84]	; 0x54
 8008a22:	7852      	ldrb	r2, [r2, #1]
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	d1c3      	bne.n	80089b0 <_strtod_l+0x38>
 8008a28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a2a:	9515      	str	r5, [sp, #84]	; 0x54
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f040 855f 	bne.w	80094f0 <_strtod_l+0xb78>
 8008a32:	4642      	mov	r2, r8
 8008a34:	464b      	mov	r3, r9
 8008a36:	e7e3      	b.n	8008a00 <_strtod_l+0x88>
 8008a38:	2100      	movs	r1, #0
 8008a3a:	e7ef      	b.n	8008a1c <_strtod_l+0xa4>
 8008a3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a3e:	b13a      	cbz	r2, 8008a50 <_strtod_l+0xd8>
 8008a40:	2135      	movs	r1, #53	; 0x35
 8008a42:	a818      	add	r0, sp, #96	; 0x60
 8008a44:	f7ff ff37 	bl	80088b6 <__copybits>
 8008a48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff fb0a 	bl	8008064 <_Bfree>
 8008a50:	3f01      	subs	r7, #1
 8008a52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a54:	2f04      	cmp	r7, #4
 8008a56:	d806      	bhi.n	8008a66 <_strtod_l+0xee>
 8008a58:	e8df f007 	tbb	[pc, r7]
 8008a5c:	201d0314 	.word	0x201d0314
 8008a60:	14          	.byte	0x14
 8008a61:	00          	.byte	0x00
 8008a62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008a66:	05e9      	lsls	r1, r5, #23
 8008a68:	bf48      	it	mi
 8008a6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a72:	0d1b      	lsrs	r3, r3, #20
 8008a74:	051b      	lsls	r3, r3, #20
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1b9      	bne.n	80089ee <_strtod_l+0x76>
 8008a7a:	f7fe fb99 	bl	80071b0 <__errno>
 8008a7e:	2322      	movs	r3, #34	; 0x22
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	e7b4      	b.n	80089ee <_strtod_l+0x76>
 8008a84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008a88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a94:	e7e7      	b.n	8008a66 <_strtod_l+0xee>
 8008a96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c10 <_strtod_l+0x298>
 8008a9a:	e7e4      	b.n	8008a66 <_strtod_l+0xee>
 8008a9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008aa0:	f04f 38ff 	mov.w	r8, #4294967295
 8008aa4:	e7df      	b.n	8008a66 <_strtod_l+0xee>
 8008aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	9215      	str	r2, [sp, #84]	; 0x54
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b30      	cmp	r3, #48	; 0x30
 8008ab0:	d0f9      	beq.n	8008aa6 <_strtod_l+0x12e>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d09b      	beq.n	80089ee <_strtod_l+0x76>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f04f 0a00 	mov.w	sl, #0
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ac2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ac6:	46d3      	mov	fp, sl
 8008ac8:	220a      	movs	r2, #10
 8008aca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008acc:	7806      	ldrb	r6, [r0, #0]
 8008ace:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ad2:	b2d9      	uxtb	r1, r3
 8008ad4:	2909      	cmp	r1, #9
 8008ad6:	d926      	bls.n	8008b26 <_strtod_l+0x1ae>
 8008ad8:	494c      	ldr	r1, [pc, #304]	; (8008c0c <_strtod_l+0x294>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	f001 f99e 	bl	8009e1c <strncmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d030      	beq.n	8008b46 <_strtod_l+0x1ce>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	9005      	str	r0, [sp, #20]
 8008aea:	465e      	mov	r6, fp
 8008aec:	4603      	mov	r3, r0
 8008aee:	2a65      	cmp	r2, #101	; 0x65
 8008af0:	d001      	beq.n	8008af6 <_strtod_l+0x17e>
 8008af2:	2a45      	cmp	r2, #69	; 0x45
 8008af4:	d113      	bne.n	8008b1e <_strtod_l+0x1a6>
 8008af6:	b91e      	cbnz	r6, 8008b00 <_strtod_l+0x188>
 8008af8:	9a04      	ldr	r2, [sp, #16]
 8008afa:	4302      	orrs	r2, r0
 8008afc:	d094      	beq.n	8008a28 <_strtod_l+0xb0>
 8008afe:	2600      	movs	r6, #0
 8008b00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008b02:	1c6a      	adds	r2, r5, #1
 8008b04:	9215      	str	r2, [sp, #84]	; 0x54
 8008b06:	786a      	ldrb	r2, [r5, #1]
 8008b08:	2a2b      	cmp	r2, #43	; 0x2b
 8008b0a:	d074      	beq.n	8008bf6 <_strtod_l+0x27e>
 8008b0c:	2a2d      	cmp	r2, #45	; 0x2d
 8008b0e:	d078      	beq.n	8008c02 <_strtod_l+0x28a>
 8008b10:	f04f 0c00 	mov.w	ip, #0
 8008b14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b18:	2909      	cmp	r1, #9
 8008b1a:	d97f      	bls.n	8008c1c <_strtod_l+0x2a4>
 8008b1c:	9515      	str	r5, [sp, #84]	; 0x54
 8008b1e:	2700      	movs	r7, #0
 8008b20:	e09e      	b.n	8008c60 <_strtod_l+0x2e8>
 8008b22:	2300      	movs	r3, #0
 8008b24:	e7c8      	b.n	8008ab8 <_strtod_l+0x140>
 8008b26:	f1bb 0f08 	cmp.w	fp, #8
 8008b2a:	bfd8      	it	le
 8008b2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b2e:	f100 0001 	add.w	r0, r0, #1
 8008b32:	bfda      	itte	le
 8008b34:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b38:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b3e:	f10b 0b01 	add.w	fp, fp, #1
 8008b42:	9015      	str	r0, [sp, #84]	; 0x54
 8008b44:	e7c1      	b.n	8008aca <_strtod_l+0x152>
 8008b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	9215      	str	r2, [sp, #84]	; 0x54
 8008b4c:	785a      	ldrb	r2, [r3, #1]
 8008b4e:	f1bb 0f00 	cmp.w	fp, #0
 8008b52:	d037      	beq.n	8008bc4 <_strtod_l+0x24c>
 8008b54:	9005      	str	r0, [sp, #20]
 8008b56:	465e      	mov	r6, fp
 8008b58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d912      	bls.n	8008b86 <_strtod_l+0x20e>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e7c4      	b.n	8008aee <_strtod_l+0x176>
 8008b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	9215      	str	r2, [sp, #84]	; 0x54
 8008b6a:	785a      	ldrb	r2, [r3, #1]
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	2a30      	cmp	r2, #48	; 0x30
 8008b70:	d0f8      	beq.n	8008b64 <_strtod_l+0x1ec>
 8008b72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	f200 84c1 	bhi.w	80094fe <_strtod_l+0xb86>
 8008b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7e:	9005      	str	r0, [sp, #20]
 8008b80:	2000      	movs	r0, #0
 8008b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b84:	4606      	mov	r6, r0
 8008b86:	3a30      	subs	r2, #48	; 0x30
 8008b88:	f100 0301 	add.w	r3, r0, #1
 8008b8c:	d014      	beq.n	8008bb8 <_strtod_l+0x240>
 8008b8e:	9905      	ldr	r1, [sp, #20]
 8008b90:	4419      	add	r1, r3
 8008b92:	9105      	str	r1, [sp, #20]
 8008b94:	4633      	mov	r3, r6
 8008b96:	eb00 0c06 	add.w	ip, r0, r6
 8008b9a:	210a      	movs	r1, #10
 8008b9c:	4563      	cmp	r3, ip
 8008b9e:	d113      	bne.n	8008bc8 <_strtod_l+0x250>
 8008ba0:	1833      	adds	r3, r6, r0
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	f106 0601 	add.w	r6, r6, #1
 8008ba8:	4406      	add	r6, r0
 8008baa:	dc1a      	bgt.n	8008be2 <_strtod_l+0x26a>
 8008bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bae:	230a      	movs	r3, #10
 8008bb0:	fb03 2301 	mla	r3, r3, r1, r2
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bba:	1c51      	adds	r1, r2, #1
 8008bbc:	9115      	str	r1, [sp, #84]	; 0x54
 8008bbe:	7852      	ldrb	r2, [r2, #1]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	e7c9      	b.n	8008b58 <_strtod_l+0x1e0>
 8008bc4:	4658      	mov	r0, fp
 8008bc6:	e7d2      	b.n	8008b6e <_strtod_l+0x1f6>
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	f103 0301 	add.w	r3, r3, #1
 8008bce:	dc03      	bgt.n	8008bd8 <_strtod_l+0x260>
 8008bd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008bd2:	434f      	muls	r7, r1
 8008bd4:	9709      	str	r7, [sp, #36]	; 0x24
 8008bd6:	e7e1      	b.n	8008b9c <_strtod_l+0x224>
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	bfd8      	it	le
 8008bdc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008be0:	e7dc      	b.n	8008b9c <_strtod_l+0x224>
 8008be2:	2e10      	cmp	r6, #16
 8008be4:	bfdc      	itt	le
 8008be6:	230a      	movle	r3, #10
 8008be8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008bec:	e7e3      	b.n	8008bb6 <_strtod_l+0x23e>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e780      	b.n	8008af8 <_strtod_l+0x180>
 8008bf6:	f04f 0c00 	mov.w	ip, #0
 8008bfa:	1caa      	adds	r2, r5, #2
 8008bfc:	9215      	str	r2, [sp, #84]	; 0x54
 8008bfe:	78aa      	ldrb	r2, [r5, #2]
 8008c00:	e788      	b.n	8008b14 <_strtod_l+0x19c>
 8008c02:	f04f 0c01 	mov.w	ip, #1
 8008c06:	e7f8      	b.n	8008bfa <_strtod_l+0x282>
 8008c08:	0800aae8 	.word	0x0800aae8
 8008c0c:	0800aae4 	.word	0x0800aae4
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c16:	1c51      	adds	r1, r2, #1
 8008c18:	9115      	str	r1, [sp, #84]	; 0x54
 8008c1a:	7852      	ldrb	r2, [r2, #1]
 8008c1c:	2a30      	cmp	r2, #48	; 0x30
 8008c1e:	d0f9      	beq.n	8008c14 <_strtod_l+0x29c>
 8008c20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c24:	2908      	cmp	r1, #8
 8008c26:	f63f af7a 	bhi.w	8008b1e <_strtod_l+0x1a6>
 8008c2a:	3a30      	subs	r2, #48	; 0x30
 8008c2c:	9208      	str	r2, [sp, #32]
 8008c2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c30:	920c      	str	r2, [sp, #48]	; 0x30
 8008c32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c34:	1c57      	adds	r7, r2, #1
 8008c36:	9715      	str	r7, [sp, #84]	; 0x54
 8008c38:	7852      	ldrb	r2, [r2, #1]
 8008c3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c3e:	f1be 0f09 	cmp.w	lr, #9
 8008c42:	d938      	bls.n	8008cb6 <_strtod_l+0x33e>
 8008c44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c46:	1a7f      	subs	r7, r7, r1
 8008c48:	2f08      	cmp	r7, #8
 8008c4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c4e:	dc03      	bgt.n	8008c58 <_strtod_l+0x2e0>
 8008c50:	9908      	ldr	r1, [sp, #32]
 8008c52:	428f      	cmp	r7, r1
 8008c54:	bfa8      	it	ge
 8008c56:	460f      	movge	r7, r1
 8008c58:	f1bc 0f00 	cmp.w	ip, #0
 8008c5c:	d000      	beq.n	8008c60 <_strtod_l+0x2e8>
 8008c5e:	427f      	negs	r7, r7
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	d14f      	bne.n	8008d04 <_strtod_l+0x38c>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	4301      	orrs	r1, r0
 8008c68:	f47f aec1 	bne.w	80089ee <_strtod_l+0x76>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f aedb 	bne.w	8008a28 <_strtod_l+0xb0>
 8008c72:	2a69      	cmp	r2, #105	; 0x69
 8008c74:	d029      	beq.n	8008cca <_strtod_l+0x352>
 8008c76:	dc26      	bgt.n	8008cc6 <_strtod_l+0x34e>
 8008c78:	2a49      	cmp	r2, #73	; 0x49
 8008c7a:	d026      	beq.n	8008cca <_strtod_l+0x352>
 8008c7c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c7e:	f47f aed3 	bne.w	8008a28 <_strtod_l+0xb0>
 8008c82:	499b      	ldr	r1, [pc, #620]	; (8008ef0 <_strtod_l+0x578>)
 8008c84:	a815      	add	r0, sp, #84	; 0x54
 8008c86:	f001 fbd7 	bl	800a438 <__match>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aecc 	beq.w	8008a28 <_strtod_l+0xb0>
 8008c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b28      	cmp	r3, #40	; 0x28
 8008c96:	d12f      	bne.n	8008cf8 <_strtod_l+0x380>
 8008c98:	4996      	ldr	r1, [pc, #600]	; (8008ef4 <_strtod_l+0x57c>)
 8008c9a:	aa18      	add	r2, sp, #96	; 0x60
 8008c9c:	a815      	add	r0, sp, #84	; 0x54
 8008c9e:	f001 fbdf 	bl	800a460 <__hexnan>
 8008ca2:	2805      	cmp	r0, #5
 8008ca4:	d128      	bne.n	8008cf8 <_strtod_l+0x380>
 8008ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ca8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008cb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008cb4:	e69b      	b.n	80089ee <_strtod_l+0x76>
 8008cb6:	9f08      	ldr	r7, [sp, #32]
 8008cb8:	210a      	movs	r1, #10
 8008cba:	fb01 2107 	mla	r1, r1, r7, r2
 8008cbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008cc2:	9208      	str	r2, [sp, #32]
 8008cc4:	e7b5      	b.n	8008c32 <_strtod_l+0x2ba>
 8008cc6:	2a6e      	cmp	r2, #110	; 0x6e
 8008cc8:	e7d9      	b.n	8008c7e <_strtod_l+0x306>
 8008cca:	498b      	ldr	r1, [pc, #556]	; (8008ef8 <_strtod_l+0x580>)
 8008ccc:	a815      	add	r0, sp, #84	; 0x54
 8008cce:	f001 fbb3 	bl	800a438 <__match>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aea8 	beq.w	8008a28 <_strtod_l+0xb0>
 8008cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cda:	4988      	ldr	r1, [pc, #544]	; (8008efc <_strtod_l+0x584>)
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	a815      	add	r0, sp, #84	; 0x54
 8008ce0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ce2:	f001 fba9 	bl	800a438 <__match>
 8008ce6:	b910      	cbnz	r0, 8008cee <_strtod_l+0x376>
 8008ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cea:	3301      	adds	r3, #1
 8008cec:	9315      	str	r3, [sp, #84]	; 0x54
 8008cee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008f0c <_strtod_l+0x594>
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	e67a      	b.n	80089ee <_strtod_l+0x76>
 8008cf8:	4881      	ldr	r0, [pc, #516]	; (8008f00 <_strtod_l+0x588>)
 8008cfa:	f001 f8d1 	bl	8009ea0 <nan>
 8008cfe:	ec59 8b10 	vmov	r8, r9, d0
 8008d02:	e674      	b.n	80089ee <_strtod_l+0x76>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d08:	1afb      	subs	r3, r7, r3
 8008d0a:	f1bb 0f00 	cmp.w	fp, #0
 8008d0e:	bf08      	it	eq
 8008d10:	46b3      	moveq	fp, r6
 8008d12:	2e10      	cmp	r6, #16
 8008d14:	9308      	str	r3, [sp, #32]
 8008d16:	4635      	mov	r5, r6
 8008d18:	bfa8      	it	ge
 8008d1a:	2510      	movge	r5, #16
 8008d1c:	f7f7 fc22 	bl	8000564 <__aeabi_ui2d>
 8008d20:	2e09      	cmp	r6, #9
 8008d22:	4680      	mov	r8, r0
 8008d24:	4689      	mov	r9, r1
 8008d26:	dd13      	ble.n	8008d50 <_strtod_l+0x3d8>
 8008d28:	4b76      	ldr	r3, [pc, #472]	; (8008f04 <_strtod_l+0x58c>)
 8008d2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d32:	f7f7 fc91 	bl	8000658 <__aeabi_dmul>
 8008d36:	4680      	mov	r8, r0
 8008d38:	4650      	mov	r0, sl
 8008d3a:	4689      	mov	r9, r1
 8008d3c:	f7f7 fc12 	bl	8000564 <__aeabi_ui2d>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 fad0 	bl	80002ec <__adddf3>
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4689      	mov	r9, r1
 8008d50:	2e0f      	cmp	r6, #15
 8008d52:	dc38      	bgt.n	8008dc6 <_strtod_l+0x44e>
 8008d54:	9b08      	ldr	r3, [sp, #32]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f43f ae49 	beq.w	80089ee <_strtod_l+0x76>
 8008d5c:	dd24      	ble.n	8008da8 <_strtod_l+0x430>
 8008d5e:	2b16      	cmp	r3, #22
 8008d60:	dc0b      	bgt.n	8008d7a <_strtod_l+0x402>
 8008d62:	4968      	ldr	r1, [pc, #416]	; (8008f04 <_strtod_l+0x58c>)
 8008d64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	f7f7 fc72 	bl	8000658 <__aeabi_dmul>
 8008d74:	4680      	mov	r8, r0
 8008d76:	4689      	mov	r9, r1
 8008d78:	e639      	b.n	80089ee <_strtod_l+0x76>
 8008d7a:	9a08      	ldr	r2, [sp, #32]
 8008d7c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d80:	4293      	cmp	r3, r2
 8008d82:	db20      	blt.n	8008dc6 <_strtod_l+0x44e>
 8008d84:	4c5f      	ldr	r4, [pc, #380]	; (8008f04 <_strtod_l+0x58c>)
 8008d86:	f1c6 060f 	rsb	r6, r6, #15
 8008d8a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d8e:	4642      	mov	r2, r8
 8008d90:	464b      	mov	r3, r9
 8008d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d96:	f7f7 fc5f 	bl	8000658 <__aeabi_dmul>
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	1b9e      	subs	r6, r3, r6
 8008d9e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008da2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008da6:	e7e3      	b.n	8008d70 <_strtod_l+0x3f8>
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	3316      	adds	r3, #22
 8008dac:	db0b      	blt.n	8008dc6 <_strtod_l+0x44e>
 8008dae:	9b05      	ldr	r3, [sp, #20]
 8008db0:	1bdf      	subs	r7, r3, r7
 8008db2:	4b54      	ldr	r3, [pc, #336]	; (8008f04 <_strtod_l+0x58c>)
 8008db4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 fd74 	bl	80008ac <__aeabi_ddiv>
 8008dc4:	e7d6      	b.n	8008d74 <_strtod_l+0x3fc>
 8008dc6:	9b08      	ldr	r3, [sp, #32]
 8008dc8:	1b75      	subs	r5, r6, r5
 8008dca:	441d      	add	r5, r3
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	dd70      	ble.n	8008eb2 <_strtod_l+0x53a>
 8008dd0:	f015 030f 	ands.w	r3, r5, #15
 8008dd4:	d00a      	beq.n	8008dec <_strtod_l+0x474>
 8008dd6:	494b      	ldr	r1, [pc, #300]	; (8008f04 <_strtod_l+0x58c>)
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	4642      	mov	r2, r8
 8008dde:	464b      	mov	r3, r9
 8008de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de4:	f7f7 fc38 	bl	8000658 <__aeabi_dmul>
 8008de8:	4680      	mov	r8, r0
 8008dea:	4689      	mov	r9, r1
 8008dec:	f035 050f 	bics.w	r5, r5, #15
 8008df0:	d04d      	beq.n	8008e8e <_strtod_l+0x516>
 8008df2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008df6:	dd22      	ble.n	8008e3e <_strtod_l+0x4c6>
 8008df8:	2500      	movs	r5, #0
 8008dfa:	46ab      	mov	fp, r5
 8008dfc:	9509      	str	r5, [sp, #36]	; 0x24
 8008dfe:	9505      	str	r5, [sp, #20]
 8008e00:	2322      	movs	r3, #34	; 0x22
 8008e02:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008f0c <_strtod_l+0x594>
 8008e06:	6023      	str	r3, [r4, #0]
 8008e08:	f04f 0800 	mov.w	r8, #0
 8008e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f43f aded 	beq.w	80089ee <_strtod_l+0x76>
 8008e14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff f924 	bl	8008064 <_Bfree>
 8008e1c:	9905      	ldr	r1, [sp, #20]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff f920 	bl	8008064 <_Bfree>
 8008e24:	4659      	mov	r1, fp
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7ff f91c 	bl	8008064 <_Bfree>
 8008e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7ff f918 	bl	8008064 <_Bfree>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff f914 	bl	8008064 <_Bfree>
 8008e3c:	e5d7      	b.n	80089ee <_strtod_l+0x76>
 8008e3e:	4b32      	ldr	r3, [pc, #200]	; (8008f08 <_strtod_l+0x590>)
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	2300      	movs	r3, #0
 8008e44:	112d      	asrs	r5, r5, #4
 8008e46:	4640      	mov	r0, r8
 8008e48:	4649      	mov	r1, r9
 8008e4a:	469a      	mov	sl, r3
 8008e4c:	2d01      	cmp	r5, #1
 8008e4e:	dc21      	bgt.n	8008e94 <_strtod_l+0x51c>
 8008e50:	b10b      	cbz	r3, 8008e56 <_strtod_l+0x4de>
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	492c      	ldr	r1, [pc, #176]	; (8008f08 <_strtod_l+0x590>)
 8008e58:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e5c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e60:	4642      	mov	r2, r8
 8008e62:	464b      	mov	r3, r9
 8008e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e68:	f7f7 fbf6 	bl	8000658 <__aeabi_dmul>
 8008e6c:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <_strtod_l+0x594>)
 8008e6e:	460a      	mov	r2, r1
 8008e70:	400b      	ands	r3, r1
 8008e72:	4927      	ldr	r1, [pc, #156]	; (8008f10 <_strtod_l+0x598>)
 8008e74:	428b      	cmp	r3, r1
 8008e76:	4680      	mov	r8, r0
 8008e78:	d8be      	bhi.n	8008df8 <_strtod_l+0x480>
 8008e7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e7e:	428b      	cmp	r3, r1
 8008e80:	bf86      	itte	hi
 8008e82:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008f14 <_strtod_l+0x59c>
 8008e86:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e8a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	e07b      	b.n	8008f8c <_strtod_l+0x614>
 8008e94:	07ea      	lsls	r2, r5, #31
 8008e96:	d505      	bpl.n	8008ea4 <_strtod_l+0x52c>
 8008e98:	9b04      	ldr	r3, [sp, #16]
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbdb 	bl	8000658 <__aeabi_dmul>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	9a04      	ldr	r2, [sp, #16]
 8008ea6:	3208      	adds	r2, #8
 8008ea8:	f10a 0a01 	add.w	sl, sl, #1
 8008eac:	106d      	asrs	r5, r5, #1
 8008eae:	9204      	str	r2, [sp, #16]
 8008eb0:	e7cc      	b.n	8008e4c <_strtod_l+0x4d4>
 8008eb2:	d0ec      	beq.n	8008e8e <_strtod_l+0x516>
 8008eb4:	426d      	negs	r5, r5
 8008eb6:	f015 020f 	ands.w	r2, r5, #15
 8008eba:	d00a      	beq.n	8008ed2 <_strtod_l+0x55a>
 8008ebc:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <_strtod_l+0x58c>)
 8008ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fcef 	bl	80008ac <__aeabi_ddiv>
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	112d      	asrs	r5, r5, #4
 8008ed4:	d0db      	beq.n	8008e8e <_strtod_l+0x516>
 8008ed6:	2d1f      	cmp	r5, #31
 8008ed8:	dd1e      	ble.n	8008f18 <_strtod_l+0x5a0>
 8008eda:	2500      	movs	r5, #0
 8008edc:	46ab      	mov	fp, r5
 8008ede:	9509      	str	r5, [sp, #36]	; 0x24
 8008ee0:	9505      	str	r5, [sp, #20]
 8008ee2:	2322      	movs	r3, #34	; 0x22
 8008ee4:	f04f 0800 	mov.w	r8, #0
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	e78d      	b.n	8008e0c <_strtod_l+0x494>
 8008ef0:	0800a839 	.word	0x0800a839
 8008ef4:	0800aafc 	.word	0x0800aafc
 8008ef8:	0800a831 	.word	0x0800a831
 8008efc:	0800a915 	.word	0x0800a915
 8008f00:	0800a911 	.word	0x0800a911
 8008f04:	0800aa10 	.word	0x0800aa10
 8008f08:	0800a9e8 	.word	0x0800a9e8
 8008f0c:	7ff00000 	.word	0x7ff00000
 8008f10:	7ca00000 	.word	0x7ca00000
 8008f14:	7fefffff 	.word	0x7fefffff
 8008f18:	f015 0310 	ands.w	r3, r5, #16
 8008f1c:	bf18      	it	ne
 8008f1e:	236a      	movne	r3, #106	; 0x6a
 8008f20:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80092c4 <_strtod_l+0x94c>
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	07ea      	lsls	r2, r5, #31
 8008f2e:	d504      	bpl.n	8008f3a <_strtod_l+0x5c2>
 8008f30:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f34:	f7f7 fb90 	bl	8000658 <__aeabi_dmul>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	106d      	asrs	r5, r5, #1
 8008f3c:	f10a 0a08 	add.w	sl, sl, #8
 8008f40:	d1f4      	bne.n	8008f2c <_strtod_l+0x5b4>
 8008f42:	b10b      	cbz	r3, 8008f48 <_strtod_l+0x5d0>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	b1bb      	cbz	r3, 8008f7c <_strtod_l+0x604>
 8008f4c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	4649      	mov	r1, r9
 8008f58:	dd10      	ble.n	8008f7c <_strtod_l+0x604>
 8008f5a:	2b1f      	cmp	r3, #31
 8008f5c:	f340 811e 	ble.w	800919c <_strtod_l+0x824>
 8008f60:	2b34      	cmp	r3, #52	; 0x34
 8008f62:	bfde      	ittt	le
 8008f64:	f04f 33ff 	movle.w	r3, #4294967295
 8008f68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f6c:	4093      	lslle	r3, r2
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	bfcc      	ite	gt
 8008f74:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f78:	ea03 0901 	andle.w	r9, r3, r1
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 fdd0 	bl	8000b28 <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d1a6      	bne.n	8008eda <_strtod_l+0x562>
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f92:	4633      	mov	r3, r6
 8008f94:	465a      	mov	r2, fp
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff f8cc 	bl	8008134 <__s2b>
 8008f9c:	9009      	str	r0, [sp, #36]	; 0x24
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f43f af2a 	beq.w	8008df8 <_strtod_l+0x480>
 8008fa4:	9a08      	ldr	r2, [sp, #32]
 8008fa6:	9b05      	ldr	r3, [sp, #20]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	eba3 0307 	sub.w	r3, r3, r7
 8008fae:	bfa8      	it	ge
 8008fb0:	2300      	movge	r3, #0
 8008fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fba:	9312      	str	r3, [sp, #72]	; 0x48
 8008fbc:	46ab      	mov	fp, r5
 8008fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	6859      	ldr	r1, [r3, #4]
 8008fc4:	f7ff f80e 	bl	8007fe4 <_Balloc>
 8008fc8:	9005      	str	r0, [sp, #20]
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f43f af18 	beq.w	8008e00 <_strtod_l+0x488>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	3202      	adds	r2, #2
 8008fd6:	f103 010c 	add.w	r1, r3, #12
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	300c      	adds	r0, #12
 8008fde:	f000 ff51 	bl	8009e84 <memcpy>
 8008fe2:	ec49 8b10 	vmov	d0, r8, r9
 8008fe6:	aa18      	add	r2, sp, #96	; 0x60
 8008fe8:	a917      	add	r1, sp, #92	; 0x5c
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7ff fbd6 	bl	800879c <__d2b>
 8008ff0:	ec49 8b18 	vmov	d8, r8, r9
 8008ff4:	9016      	str	r0, [sp, #88]	; 0x58
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f af02 	beq.w	8008e00 <_strtod_l+0x488>
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7ff f930 	bl	8008264 <__i2b>
 8009004:	4683      	mov	fp, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f aefa 	beq.w	8008e00 <_strtod_l+0x488>
 800900c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800900e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009010:	2e00      	cmp	r6, #0
 8009012:	bfab      	itete	ge
 8009014:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009016:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009018:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800901a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800901e:	bfac      	ite	ge
 8009020:	eb06 0a03 	addge.w	sl, r6, r3
 8009024:	1b9f      	sublt	r7, r3, r6
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	1af6      	subs	r6, r6, r3
 800902a:	4416      	add	r6, r2
 800902c:	4ba0      	ldr	r3, [pc, #640]	; (80092b0 <_strtod_l+0x938>)
 800902e:	3e01      	subs	r6, #1
 8009030:	429e      	cmp	r6, r3
 8009032:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009036:	f280 80c4 	bge.w	80091c2 <_strtod_l+0x84a>
 800903a:	1b9b      	subs	r3, r3, r6
 800903c:	2b1f      	cmp	r3, #31
 800903e:	eba2 0203 	sub.w	r2, r2, r3
 8009042:	f04f 0101 	mov.w	r1, #1
 8009046:	f300 80b0 	bgt.w	80091aa <_strtod_l+0x832>
 800904a:	fa01 f303 	lsl.w	r3, r1, r3
 800904e:	930e      	str	r3, [sp, #56]	; 0x38
 8009050:	2300      	movs	r3, #0
 8009052:	930d      	str	r3, [sp, #52]	; 0x34
 8009054:	eb0a 0602 	add.w	r6, sl, r2
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	45b2      	cmp	sl, r6
 800905c:	4417      	add	r7, r2
 800905e:	441f      	add	r7, r3
 8009060:	4653      	mov	r3, sl
 8009062:	bfa8      	it	ge
 8009064:	4633      	movge	r3, r6
 8009066:	42bb      	cmp	r3, r7
 8009068:	bfa8      	it	ge
 800906a:	463b      	movge	r3, r7
 800906c:	2b00      	cmp	r3, #0
 800906e:	bfc2      	ittt	gt
 8009070:	1af6      	subgt	r6, r6, r3
 8009072:	1aff      	subgt	r7, r7, r3
 8009074:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd17      	ble.n	80090ae <_strtod_l+0x736>
 800907e:	4659      	mov	r1, fp
 8009080:	461a      	mov	r2, r3
 8009082:	4620      	mov	r0, r4
 8009084:	f7ff f9ae 	bl	80083e4 <__pow5mult>
 8009088:	4683      	mov	fp, r0
 800908a:	2800      	cmp	r0, #0
 800908c:	f43f aeb8 	beq.w	8008e00 <_strtod_l+0x488>
 8009090:	4601      	mov	r1, r0
 8009092:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff f8fb 	bl	8008290 <__multiply>
 800909a:	900b      	str	r0, [sp, #44]	; 0x2c
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f aeaf 	beq.w	8008e00 <_strtod_l+0x488>
 80090a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7fe ffdd 	bl	8008064 <_Bfree>
 80090aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ac:	9316      	str	r3, [sp, #88]	; 0x58
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	f300 808c 	bgt.w	80091cc <_strtod_l+0x854>
 80090b4:	9b08      	ldr	r3, [sp, #32]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dd08      	ble.n	80090cc <_strtod_l+0x754>
 80090ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090bc:	9905      	ldr	r1, [sp, #20]
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff f990 	bl	80083e4 <__pow5mult>
 80090c4:	9005      	str	r0, [sp, #20]
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f ae9a 	beq.w	8008e00 <_strtod_l+0x488>
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	dd08      	ble.n	80090e2 <_strtod_l+0x76a>
 80090d0:	9905      	ldr	r1, [sp, #20]
 80090d2:	463a      	mov	r2, r7
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7ff f9df 	bl	8008498 <__lshift>
 80090da:	9005      	str	r0, [sp, #20]
 80090dc:	2800      	cmp	r0, #0
 80090de:	f43f ae8f 	beq.w	8008e00 <_strtod_l+0x488>
 80090e2:	f1ba 0f00 	cmp.w	sl, #0
 80090e6:	dd08      	ble.n	80090fa <_strtod_l+0x782>
 80090e8:	4659      	mov	r1, fp
 80090ea:	4652      	mov	r2, sl
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7ff f9d3 	bl	8008498 <__lshift>
 80090f2:	4683      	mov	fp, r0
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f43f ae83 	beq.w	8008e00 <_strtod_l+0x488>
 80090fa:	9a05      	ldr	r2, [sp, #20]
 80090fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff fa52 	bl	80085a8 <__mdiff>
 8009104:	4605      	mov	r5, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f ae7a 	beq.w	8008e00 <_strtod_l+0x488>
 800910c:	68c3      	ldr	r3, [r0, #12]
 800910e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009110:	2300      	movs	r3, #0
 8009112:	60c3      	str	r3, [r0, #12]
 8009114:	4659      	mov	r1, fp
 8009116:	f7ff fa2b 	bl	8008570 <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	da60      	bge.n	80091e0 <_strtod_l+0x868>
 800911e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009120:	ea53 0308 	orrs.w	r3, r3, r8
 8009124:	f040 8084 	bne.w	8009230 <_strtod_l+0x8b8>
 8009128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800912c:	2b00      	cmp	r3, #0
 800912e:	d17f      	bne.n	8009230 <_strtod_l+0x8b8>
 8009130:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009134:	0d1b      	lsrs	r3, r3, #20
 8009136:	051b      	lsls	r3, r3, #20
 8009138:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800913c:	d978      	bls.n	8009230 <_strtod_l+0x8b8>
 800913e:	696b      	ldr	r3, [r5, #20]
 8009140:	b913      	cbnz	r3, 8009148 <_strtod_l+0x7d0>
 8009142:	692b      	ldr	r3, [r5, #16]
 8009144:	2b01      	cmp	r3, #1
 8009146:	dd73      	ble.n	8009230 <_strtod_l+0x8b8>
 8009148:	4629      	mov	r1, r5
 800914a:	2201      	movs	r2, #1
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff f9a3 	bl	8008498 <__lshift>
 8009152:	4659      	mov	r1, fp
 8009154:	4605      	mov	r5, r0
 8009156:	f7ff fa0b 	bl	8008570 <__mcmp>
 800915a:	2800      	cmp	r0, #0
 800915c:	dd68      	ble.n	8009230 <_strtod_l+0x8b8>
 800915e:	9904      	ldr	r1, [sp, #16]
 8009160:	4a54      	ldr	r2, [pc, #336]	; (80092b4 <_strtod_l+0x93c>)
 8009162:	464b      	mov	r3, r9
 8009164:	2900      	cmp	r1, #0
 8009166:	f000 8084 	beq.w	8009272 <_strtod_l+0x8fa>
 800916a:	ea02 0109 	and.w	r1, r2, r9
 800916e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009172:	dc7e      	bgt.n	8009272 <_strtod_l+0x8fa>
 8009174:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009178:	f77f aeb3 	ble.w	8008ee2 <_strtod_l+0x56a>
 800917c:	4b4e      	ldr	r3, [pc, #312]	; (80092b8 <_strtod_l+0x940>)
 800917e:	4640      	mov	r0, r8
 8009180:	4649      	mov	r1, r9
 8009182:	2200      	movs	r2, #0
 8009184:	f7f7 fa68 	bl	8000658 <__aeabi_dmul>
 8009188:	4b4a      	ldr	r3, [pc, #296]	; (80092b4 <_strtod_l+0x93c>)
 800918a:	400b      	ands	r3, r1
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	2b00      	cmp	r3, #0
 8009192:	f47f ae3f 	bne.w	8008e14 <_strtod_l+0x49c>
 8009196:	2322      	movs	r3, #34	; 0x22
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	e63b      	b.n	8008e14 <_strtod_l+0x49c>
 800919c:	f04f 32ff 	mov.w	r2, #4294967295
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	ea03 0808 	and.w	r8, r3, r8
 80091a8:	e6e8      	b.n	8008f7c <_strtod_l+0x604>
 80091aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80091ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80091b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80091b6:	36e2      	adds	r6, #226	; 0xe2
 80091b8:	fa01 f306 	lsl.w	r3, r1, r6
 80091bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80091c0:	e748      	b.n	8009054 <_strtod_l+0x6dc>
 80091c2:	2100      	movs	r1, #0
 80091c4:	2301      	movs	r3, #1
 80091c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80091ca:	e743      	b.n	8009054 <_strtod_l+0x6dc>
 80091cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80091ce:	4632      	mov	r2, r6
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7ff f961 	bl	8008498 <__lshift>
 80091d6:	9016      	str	r0, [sp, #88]	; 0x58
 80091d8:	2800      	cmp	r0, #0
 80091da:	f47f af6b 	bne.w	80090b4 <_strtod_l+0x73c>
 80091de:	e60f      	b.n	8008e00 <_strtod_l+0x488>
 80091e0:	46ca      	mov	sl, r9
 80091e2:	d171      	bne.n	80092c8 <_strtod_l+0x950>
 80091e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091ea:	b352      	cbz	r2, 8009242 <_strtod_l+0x8ca>
 80091ec:	4a33      	ldr	r2, [pc, #204]	; (80092bc <_strtod_l+0x944>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d12a      	bne.n	8009248 <_strtod_l+0x8d0>
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	4641      	mov	r1, r8
 80091f6:	b1fb      	cbz	r3, 8009238 <_strtod_l+0x8c0>
 80091f8:	4b2e      	ldr	r3, [pc, #184]	; (80092b4 <_strtod_l+0x93c>)
 80091fa:	ea09 0303 	and.w	r3, r9, r3
 80091fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009202:	f04f 32ff 	mov.w	r2, #4294967295
 8009206:	d81a      	bhi.n	800923e <_strtod_l+0x8c6>
 8009208:	0d1b      	lsrs	r3, r3, #20
 800920a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	4299      	cmp	r1, r3
 8009214:	d118      	bne.n	8009248 <_strtod_l+0x8d0>
 8009216:	4b2a      	ldr	r3, [pc, #168]	; (80092c0 <_strtod_l+0x948>)
 8009218:	459a      	cmp	sl, r3
 800921a:	d102      	bne.n	8009222 <_strtod_l+0x8aa>
 800921c:	3101      	adds	r1, #1
 800921e:	f43f adef 	beq.w	8008e00 <_strtod_l+0x488>
 8009222:	4b24      	ldr	r3, [pc, #144]	; (80092b4 <_strtod_l+0x93c>)
 8009224:	ea0a 0303 	and.w	r3, sl, r3
 8009228:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800922c:	f04f 0800 	mov.w	r8, #0
 8009230:	9b04      	ldr	r3, [sp, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1a2      	bne.n	800917c <_strtod_l+0x804>
 8009236:	e5ed      	b.n	8008e14 <_strtod_l+0x49c>
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	e7e9      	b.n	8009212 <_strtod_l+0x89a>
 800923e:	4613      	mov	r3, r2
 8009240:	e7e7      	b.n	8009212 <_strtod_l+0x89a>
 8009242:	ea53 0308 	orrs.w	r3, r3, r8
 8009246:	d08a      	beq.n	800915e <_strtod_l+0x7e6>
 8009248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924a:	b1e3      	cbz	r3, 8009286 <_strtod_l+0x90e>
 800924c:	ea13 0f0a 	tst.w	r3, sl
 8009250:	d0ee      	beq.n	8009230 <_strtod_l+0x8b8>
 8009252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	b1c3      	cbz	r3, 800928e <_strtod_l+0x916>
 800925c:	f7ff fb6f 	bl	800893e <sulp>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	ec51 0b18 	vmov	r0, r1, d8
 8009268:	f7f7 f840 	bl	80002ec <__adddf3>
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	e7de      	b.n	8009230 <_strtod_l+0x8b8>
 8009272:	4013      	ands	r3, r2
 8009274:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009278:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800927c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009280:	f04f 38ff 	mov.w	r8, #4294967295
 8009284:	e7d4      	b.n	8009230 <_strtod_l+0x8b8>
 8009286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009288:	ea13 0f08 	tst.w	r3, r8
 800928c:	e7e0      	b.n	8009250 <_strtod_l+0x8d8>
 800928e:	f7ff fb56 	bl	800893e <sulp>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	ec51 0b18 	vmov	r0, r1, d8
 800929a:	f7f7 f825 	bl	80002e8 <__aeabi_dsub>
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	4680      	mov	r8, r0
 80092a4:	4689      	mov	r9, r1
 80092a6:	f7f7 fc3f 	bl	8000b28 <__aeabi_dcmpeq>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d0c0      	beq.n	8009230 <_strtod_l+0x8b8>
 80092ae:	e618      	b.n	8008ee2 <_strtod_l+0x56a>
 80092b0:	fffffc02 	.word	0xfffffc02
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	39500000 	.word	0x39500000
 80092bc:	000fffff 	.word	0x000fffff
 80092c0:	7fefffff 	.word	0x7fefffff
 80092c4:	0800ab10 	.word	0x0800ab10
 80092c8:	4659      	mov	r1, fp
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7ff fac0 	bl	8008850 <__ratio>
 80092d0:	ec57 6b10 	vmov	r6, r7, d0
 80092d4:	ee10 0a10 	vmov	r0, s0
 80092d8:	2200      	movs	r2, #0
 80092da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092de:	4639      	mov	r1, r7
 80092e0:	f7f7 fc36 	bl	8000b50 <__aeabi_dcmple>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d071      	beq.n	80093cc <_strtod_l+0xa54>
 80092e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d17c      	bne.n	80093e8 <_strtod_l+0xa70>
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	d15a      	bne.n	80093aa <_strtod_l+0xa32>
 80092f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d15d      	bne.n	80093b8 <_strtod_l+0xa40>
 80092fc:	4b90      	ldr	r3, [pc, #576]	; (8009540 <_strtod_l+0xbc8>)
 80092fe:	2200      	movs	r2, #0
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f7 fc1a 	bl	8000b3c <__aeabi_dcmplt>
 8009308:	2800      	cmp	r0, #0
 800930a:	d15c      	bne.n	80093c6 <_strtod_l+0xa4e>
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	4b8c      	ldr	r3, [pc, #560]	; (8009544 <_strtod_l+0xbcc>)
 8009312:	2200      	movs	r2, #0
 8009314:	f7f7 f9a0 	bl	8000658 <__aeabi_dmul>
 8009318:	4606      	mov	r6, r0
 800931a:	460f      	mov	r7, r1
 800931c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009320:	9606      	str	r6, [sp, #24]
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009328:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800932c:	4b86      	ldr	r3, [pc, #536]	; (8009548 <_strtod_l+0xbd0>)
 800932e:	ea0a 0303 	and.w	r3, sl, r3
 8009332:	930d      	str	r3, [sp, #52]	; 0x34
 8009334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009336:	4b85      	ldr	r3, [pc, #532]	; (800954c <_strtod_l+0xbd4>)
 8009338:	429a      	cmp	r2, r3
 800933a:	f040 8090 	bne.w	800945e <_strtod_l+0xae6>
 800933e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009342:	ec49 8b10 	vmov	d0, r8, r9
 8009346:	f7ff f9b9 	bl	80086bc <__ulp>
 800934a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800934e:	ec51 0b10 	vmov	r0, r1, d0
 8009352:	f7f7 f981 	bl	8000658 <__aeabi_dmul>
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	f7f6 ffc7 	bl	80002ec <__adddf3>
 800935e:	460b      	mov	r3, r1
 8009360:	4979      	ldr	r1, [pc, #484]	; (8009548 <_strtod_l+0xbd0>)
 8009362:	4a7b      	ldr	r2, [pc, #492]	; (8009550 <_strtod_l+0xbd8>)
 8009364:	4019      	ands	r1, r3
 8009366:	4291      	cmp	r1, r2
 8009368:	4680      	mov	r8, r0
 800936a:	d944      	bls.n	80093f6 <_strtod_l+0xa7e>
 800936c:	ee18 2a90 	vmov	r2, s17
 8009370:	4b78      	ldr	r3, [pc, #480]	; (8009554 <_strtod_l+0xbdc>)
 8009372:	429a      	cmp	r2, r3
 8009374:	d104      	bne.n	8009380 <_strtod_l+0xa08>
 8009376:	ee18 3a10 	vmov	r3, s16
 800937a:	3301      	adds	r3, #1
 800937c:	f43f ad40 	beq.w	8008e00 <_strtod_l+0x488>
 8009380:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009554 <_strtod_l+0xbdc>
 8009384:	f04f 38ff 	mov.w	r8, #4294967295
 8009388:	9916      	ldr	r1, [sp, #88]	; 0x58
 800938a:	4620      	mov	r0, r4
 800938c:	f7fe fe6a 	bl	8008064 <_Bfree>
 8009390:	9905      	ldr	r1, [sp, #20]
 8009392:	4620      	mov	r0, r4
 8009394:	f7fe fe66 	bl	8008064 <_Bfree>
 8009398:	4659      	mov	r1, fp
 800939a:	4620      	mov	r0, r4
 800939c:	f7fe fe62 	bl	8008064 <_Bfree>
 80093a0:	4629      	mov	r1, r5
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7fe fe5e 	bl	8008064 <_Bfree>
 80093a8:	e609      	b.n	8008fbe <_strtod_l+0x646>
 80093aa:	f1b8 0f01 	cmp.w	r8, #1
 80093ae:	d103      	bne.n	80093b8 <_strtod_l+0xa40>
 80093b0:	f1b9 0f00 	cmp.w	r9, #0
 80093b4:	f43f ad95 	beq.w	8008ee2 <_strtod_l+0x56a>
 80093b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009510 <_strtod_l+0xb98>
 80093bc:	4f60      	ldr	r7, [pc, #384]	; (8009540 <_strtod_l+0xbc8>)
 80093be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093c2:	2600      	movs	r6, #0
 80093c4:	e7ae      	b.n	8009324 <_strtod_l+0x9ac>
 80093c6:	4f5f      	ldr	r7, [pc, #380]	; (8009544 <_strtod_l+0xbcc>)
 80093c8:	2600      	movs	r6, #0
 80093ca:	e7a7      	b.n	800931c <_strtod_l+0x9a4>
 80093cc:	4b5d      	ldr	r3, [pc, #372]	; (8009544 <_strtod_l+0xbcc>)
 80093ce:	4630      	mov	r0, r6
 80093d0:	4639      	mov	r1, r7
 80093d2:	2200      	movs	r2, #0
 80093d4:	f7f7 f940 	bl	8000658 <__aeabi_dmul>
 80093d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d09c      	beq.n	800931c <_strtod_l+0x9a4>
 80093e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093e6:	e79d      	b.n	8009324 <_strtod_l+0x9ac>
 80093e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009518 <_strtod_l+0xba0>
 80093ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093f0:	ec57 6b17 	vmov	r6, r7, d7
 80093f4:	e796      	b.n	8009324 <_strtod_l+0x9ac>
 80093f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	46ca      	mov	sl, r9
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1c2      	bne.n	8009388 <_strtod_l+0xa10>
 8009402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009408:	0d1b      	lsrs	r3, r3, #20
 800940a:	051b      	lsls	r3, r3, #20
 800940c:	429a      	cmp	r2, r3
 800940e:	d1bb      	bne.n	8009388 <_strtod_l+0xa10>
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f7 fcd0 	bl	8000db8 <__aeabi_d2lz>
 8009418:	f7f7 f8f0 	bl	80005fc <__aeabi_l2d>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f6 ff60 	bl	80002e8 <__aeabi_dsub>
 8009428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800942a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800942e:	ea43 0308 	orr.w	r3, r3, r8
 8009432:	4313      	orrs	r3, r2
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	d054      	beq.n	80094e4 <_strtod_l+0xb6c>
 800943a:	a339      	add	r3, pc, #228	; (adr r3, 8009520 <_strtod_l+0xba8>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f7 fb7c 	bl	8000b3c <__aeabi_dcmplt>
 8009444:	2800      	cmp	r0, #0
 8009446:	f47f ace5 	bne.w	8008e14 <_strtod_l+0x49c>
 800944a:	a337      	add	r3, pc, #220	; (adr r3, 8009528 <_strtod_l+0xbb0>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb90 	bl	8000b78 <__aeabi_dcmpgt>
 8009458:	2800      	cmp	r0, #0
 800945a:	d095      	beq.n	8009388 <_strtod_l+0xa10>
 800945c:	e4da      	b.n	8008e14 <_strtod_l+0x49c>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	b333      	cbz	r3, 80094b0 <_strtod_l+0xb38>
 8009462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009464:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009468:	d822      	bhi.n	80094b0 <_strtod_l+0xb38>
 800946a:	a331      	add	r3, pc, #196	; (adr r3, 8009530 <_strtod_l+0xbb8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f7 fb6c 	bl	8000b50 <__aeabi_dcmple>
 8009478:	b1a0      	cbz	r0, 80094a4 <_strtod_l+0xb2c>
 800947a:	4639      	mov	r1, r7
 800947c:	4630      	mov	r0, r6
 800947e:	f7f7 fbc3 	bl	8000c08 <__aeabi_d2uiz>
 8009482:	2801      	cmp	r0, #1
 8009484:	bf38      	it	cc
 8009486:	2001      	movcc	r0, #1
 8009488:	f7f7 f86c 	bl	8000564 <__aeabi_ui2d>
 800948c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	bb23      	cbnz	r3, 80094de <_strtod_l+0xb66>
 8009494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009498:	9010      	str	r0, [sp, #64]	; 0x40
 800949a:	9311      	str	r3, [sp, #68]	; 0x44
 800949c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80094a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80094b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094b4:	eeb0 0a48 	vmov.f32	s0, s16
 80094b8:	eef0 0a68 	vmov.f32	s1, s17
 80094bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80094c0:	f7ff f8fc 	bl	80086bc <__ulp>
 80094c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094c8:	ec53 2b10 	vmov	r2, r3, d0
 80094cc:	f7f7 f8c4 	bl	8000658 <__aeabi_dmul>
 80094d0:	ec53 2b18 	vmov	r2, r3, d8
 80094d4:	f7f6 ff0a 	bl	80002ec <__adddf3>
 80094d8:	4680      	mov	r8, r0
 80094da:	4689      	mov	r9, r1
 80094dc:	e78d      	b.n	80093fa <_strtod_l+0xa82>
 80094de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094e2:	e7db      	b.n	800949c <_strtod_l+0xb24>
 80094e4:	a314      	add	r3, pc, #80	; (adr r3, 8009538 <_strtod_l+0xbc0>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f7f7 fb27 	bl	8000b3c <__aeabi_dcmplt>
 80094ee:	e7b3      	b.n	8009458 <_strtod_l+0xae0>
 80094f0:	2300      	movs	r3, #0
 80094f2:	930a      	str	r3, [sp, #40]	; 0x28
 80094f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	f7ff ba7c 	b.w	80089f6 <_strtod_l+0x7e>
 80094fe:	2a65      	cmp	r2, #101	; 0x65
 8009500:	f43f ab75 	beq.w	8008bee <_strtod_l+0x276>
 8009504:	2a45      	cmp	r2, #69	; 0x45
 8009506:	f43f ab72 	beq.w	8008bee <_strtod_l+0x276>
 800950a:	2301      	movs	r3, #1
 800950c:	f7ff bbaa 	b.w	8008c64 <_strtod_l+0x2ec>
 8009510:	00000000 	.word	0x00000000
 8009514:	bff00000 	.word	0xbff00000
 8009518:	00000000 	.word	0x00000000
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	94a03595 	.word	0x94a03595
 8009524:	3fdfffff 	.word	0x3fdfffff
 8009528:	35afe535 	.word	0x35afe535
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	ffc00000 	.word	0xffc00000
 8009534:	41dfffff 	.word	0x41dfffff
 8009538:	94a03595 	.word	0x94a03595
 800953c:	3fcfffff 	.word	0x3fcfffff
 8009540:	3ff00000 	.word	0x3ff00000
 8009544:	3fe00000 	.word	0x3fe00000
 8009548:	7ff00000 	.word	0x7ff00000
 800954c:	7fe00000 	.word	0x7fe00000
 8009550:	7c9fffff 	.word	0x7c9fffff
 8009554:	7fefffff 	.word	0x7fefffff

08009558 <_strtod_r>:
 8009558:	4b01      	ldr	r3, [pc, #4]	; (8009560 <_strtod_r+0x8>)
 800955a:	f7ff ba0d 	b.w	8008978 <_strtod_l>
 800955e:	bf00      	nop
 8009560:	20000084 	.word	0x20000084

08009564 <_strtol_l.constprop.0>:
 8009564:	2b01      	cmp	r3, #1
 8009566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956a:	d001      	beq.n	8009570 <_strtol_l.constprop.0+0xc>
 800956c:	2b24      	cmp	r3, #36	; 0x24
 800956e:	d906      	bls.n	800957e <_strtol_l.constprop.0+0x1a>
 8009570:	f7fd fe1e 	bl	80071b0 <__errno>
 8009574:	2316      	movs	r3, #22
 8009576:	6003      	str	r3, [r0, #0]
 8009578:	2000      	movs	r0, #0
 800957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009664 <_strtol_l.constprop.0+0x100>
 8009582:	460d      	mov	r5, r1
 8009584:	462e      	mov	r6, r5
 8009586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800958e:	f017 0708 	ands.w	r7, r7, #8
 8009592:	d1f7      	bne.n	8009584 <_strtol_l.constprop.0+0x20>
 8009594:	2c2d      	cmp	r4, #45	; 0x2d
 8009596:	d132      	bne.n	80095fe <_strtol_l.constprop.0+0x9a>
 8009598:	782c      	ldrb	r4, [r5, #0]
 800959a:	2701      	movs	r7, #1
 800959c:	1cb5      	adds	r5, r6, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d05b      	beq.n	800965a <_strtol_l.constprop.0+0xf6>
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d109      	bne.n	80095ba <_strtol_l.constprop.0+0x56>
 80095a6:	2c30      	cmp	r4, #48	; 0x30
 80095a8:	d107      	bne.n	80095ba <_strtol_l.constprop.0+0x56>
 80095aa:	782c      	ldrb	r4, [r5, #0]
 80095ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095b0:	2c58      	cmp	r4, #88	; 0x58
 80095b2:	d14d      	bne.n	8009650 <_strtol_l.constprop.0+0xec>
 80095b4:	786c      	ldrb	r4, [r5, #1]
 80095b6:	2310      	movs	r3, #16
 80095b8:	3502      	adds	r5, #2
 80095ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80095be:	f108 38ff 	add.w	r8, r8, #4294967295
 80095c2:	f04f 0e00 	mov.w	lr, #0
 80095c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80095ca:	4676      	mov	r6, lr
 80095cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80095d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80095d4:	f1bc 0f09 	cmp.w	ip, #9
 80095d8:	d816      	bhi.n	8009608 <_strtol_l.constprop.0+0xa4>
 80095da:	4664      	mov	r4, ip
 80095dc:	42a3      	cmp	r3, r4
 80095de:	dd24      	ble.n	800962a <_strtol_l.constprop.0+0xc6>
 80095e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80095e4:	d008      	beq.n	80095f8 <_strtol_l.constprop.0+0x94>
 80095e6:	45b1      	cmp	r9, r6
 80095e8:	d31c      	bcc.n	8009624 <_strtol_l.constprop.0+0xc0>
 80095ea:	d101      	bne.n	80095f0 <_strtol_l.constprop.0+0x8c>
 80095ec:	45a2      	cmp	sl, r4
 80095ee:	db19      	blt.n	8009624 <_strtol_l.constprop.0+0xc0>
 80095f0:	fb06 4603 	mla	r6, r6, r3, r4
 80095f4:	f04f 0e01 	mov.w	lr, #1
 80095f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fc:	e7e8      	b.n	80095d0 <_strtol_l.constprop.0+0x6c>
 80095fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009600:	bf04      	itt	eq
 8009602:	782c      	ldrbeq	r4, [r5, #0]
 8009604:	1cb5      	addeq	r5, r6, #2
 8009606:	e7ca      	b.n	800959e <_strtol_l.constprop.0+0x3a>
 8009608:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800960c:	f1bc 0f19 	cmp.w	ip, #25
 8009610:	d801      	bhi.n	8009616 <_strtol_l.constprop.0+0xb2>
 8009612:	3c37      	subs	r4, #55	; 0x37
 8009614:	e7e2      	b.n	80095dc <_strtol_l.constprop.0+0x78>
 8009616:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800961a:	f1bc 0f19 	cmp.w	ip, #25
 800961e:	d804      	bhi.n	800962a <_strtol_l.constprop.0+0xc6>
 8009620:	3c57      	subs	r4, #87	; 0x57
 8009622:	e7db      	b.n	80095dc <_strtol_l.constprop.0+0x78>
 8009624:	f04f 3eff 	mov.w	lr, #4294967295
 8009628:	e7e6      	b.n	80095f8 <_strtol_l.constprop.0+0x94>
 800962a:	f1be 3fff 	cmp.w	lr, #4294967295
 800962e:	d105      	bne.n	800963c <_strtol_l.constprop.0+0xd8>
 8009630:	2322      	movs	r3, #34	; 0x22
 8009632:	6003      	str	r3, [r0, #0]
 8009634:	4646      	mov	r6, r8
 8009636:	b942      	cbnz	r2, 800964a <_strtol_l.constprop.0+0xe6>
 8009638:	4630      	mov	r0, r6
 800963a:	e79e      	b.n	800957a <_strtol_l.constprop.0+0x16>
 800963c:	b107      	cbz	r7, 8009640 <_strtol_l.constprop.0+0xdc>
 800963e:	4276      	negs	r6, r6
 8009640:	2a00      	cmp	r2, #0
 8009642:	d0f9      	beq.n	8009638 <_strtol_l.constprop.0+0xd4>
 8009644:	f1be 0f00 	cmp.w	lr, #0
 8009648:	d000      	beq.n	800964c <_strtol_l.constprop.0+0xe8>
 800964a:	1e69      	subs	r1, r5, #1
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	e7f3      	b.n	8009638 <_strtol_l.constprop.0+0xd4>
 8009650:	2430      	movs	r4, #48	; 0x30
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1b1      	bne.n	80095ba <_strtol_l.constprop.0+0x56>
 8009656:	2308      	movs	r3, #8
 8009658:	e7af      	b.n	80095ba <_strtol_l.constprop.0+0x56>
 800965a:	2c30      	cmp	r4, #48	; 0x30
 800965c:	d0a5      	beq.n	80095aa <_strtol_l.constprop.0+0x46>
 800965e:	230a      	movs	r3, #10
 8009660:	e7ab      	b.n	80095ba <_strtol_l.constprop.0+0x56>
 8009662:	bf00      	nop
 8009664:	0800ab39 	.word	0x0800ab39

08009668 <_strtol_r>:
 8009668:	f7ff bf7c 	b.w	8009564 <_strtol_l.constprop.0>

0800966c <__ssputs_r>:
 800966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009670:	688e      	ldr	r6, [r1, #8]
 8009672:	461f      	mov	r7, r3
 8009674:	42be      	cmp	r6, r7
 8009676:	680b      	ldr	r3, [r1, #0]
 8009678:	4682      	mov	sl, r0
 800967a:	460c      	mov	r4, r1
 800967c:	4690      	mov	r8, r2
 800967e:	d82c      	bhi.n	80096da <__ssputs_r+0x6e>
 8009680:	898a      	ldrh	r2, [r1, #12]
 8009682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009686:	d026      	beq.n	80096d6 <__ssputs_r+0x6a>
 8009688:	6965      	ldr	r5, [r4, #20]
 800968a:	6909      	ldr	r1, [r1, #16]
 800968c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009690:	eba3 0901 	sub.w	r9, r3, r1
 8009694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009698:	1c7b      	adds	r3, r7, #1
 800969a:	444b      	add	r3, r9
 800969c:	106d      	asrs	r5, r5, #1
 800969e:	429d      	cmp	r5, r3
 80096a0:	bf38      	it	cc
 80096a2:	461d      	movcc	r5, r3
 80096a4:	0553      	lsls	r3, r2, #21
 80096a6:	d527      	bpl.n	80096f8 <__ssputs_r+0x8c>
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7fc fb99 	bl	8005de0 <_malloc_r>
 80096ae:	4606      	mov	r6, r0
 80096b0:	b360      	cbz	r0, 800970c <__ssputs_r+0xa0>
 80096b2:	6921      	ldr	r1, [r4, #16]
 80096b4:	464a      	mov	r2, r9
 80096b6:	f000 fbe5 	bl	8009e84 <memcpy>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	6126      	str	r6, [r4, #16]
 80096c8:	6165      	str	r5, [r4, #20]
 80096ca:	444e      	add	r6, r9
 80096cc:	eba5 0509 	sub.w	r5, r5, r9
 80096d0:	6026      	str	r6, [r4, #0]
 80096d2:	60a5      	str	r5, [r4, #8]
 80096d4:	463e      	mov	r6, r7
 80096d6:	42be      	cmp	r6, r7
 80096d8:	d900      	bls.n	80096dc <__ssputs_r+0x70>
 80096da:	463e      	mov	r6, r7
 80096dc:	6820      	ldr	r0, [r4, #0]
 80096de:	4632      	mov	r2, r6
 80096e0:	4641      	mov	r1, r8
 80096e2:	f000 fb81 	bl	8009de8 <memmove>
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	1b9b      	subs	r3, r3, r6
 80096ea:	60a3      	str	r3, [r4, #8]
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	4433      	add	r3, r6
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	2000      	movs	r0, #0
 80096f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f8:	462a      	mov	r2, r5
 80096fa:	f000 ff5e 	bl	800a5ba <_realloc_r>
 80096fe:	4606      	mov	r6, r0
 8009700:	2800      	cmp	r0, #0
 8009702:	d1e0      	bne.n	80096c6 <__ssputs_r+0x5a>
 8009704:	6921      	ldr	r1, [r4, #16]
 8009706:	4650      	mov	r0, sl
 8009708:	f7fe fc20 	bl	8007f4c <_free_r>
 800970c:	230c      	movs	r3, #12
 800970e:	f8ca 3000 	str.w	r3, [sl]
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	e7e9      	b.n	80096f4 <__ssputs_r+0x88>

08009720 <_svfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	4698      	mov	r8, r3
 8009726:	898b      	ldrh	r3, [r1, #12]
 8009728:	061b      	lsls	r3, r3, #24
 800972a:	b09d      	sub	sp, #116	; 0x74
 800972c:	4607      	mov	r7, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4614      	mov	r4, r2
 8009732:	d50e      	bpl.n	8009752 <_svfiprintf_r+0x32>
 8009734:	690b      	ldr	r3, [r1, #16]
 8009736:	b963      	cbnz	r3, 8009752 <_svfiprintf_r+0x32>
 8009738:	2140      	movs	r1, #64	; 0x40
 800973a:	f7fc fb51 	bl	8005de0 <_malloc_r>
 800973e:	6028      	str	r0, [r5, #0]
 8009740:	6128      	str	r0, [r5, #16]
 8009742:	b920      	cbnz	r0, 800974e <_svfiprintf_r+0x2e>
 8009744:	230c      	movs	r3, #12
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	e0d0      	b.n	80098f0 <_svfiprintf_r+0x1d0>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	616b      	str	r3, [r5, #20]
 8009752:	2300      	movs	r3, #0
 8009754:	9309      	str	r3, [sp, #36]	; 0x24
 8009756:	2320      	movs	r3, #32
 8009758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009760:	2330      	movs	r3, #48	; 0x30
 8009762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009908 <_svfiprintf_r+0x1e8>
 8009766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800976a:	f04f 0901 	mov.w	r9, #1
 800976e:	4623      	mov	r3, r4
 8009770:	469a      	mov	sl, r3
 8009772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009776:	b10a      	cbz	r2, 800977c <_svfiprintf_r+0x5c>
 8009778:	2a25      	cmp	r2, #37	; 0x25
 800977a:	d1f9      	bne.n	8009770 <_svfiprintf_r+0x50>
 800977c:	ebba 0b04 	subs.w	fp, sl, r4
 8009780:	d00b      	beq.n	800979a <_svfiprintf_r+0x7a>
 8009782:	465b      	mov	r3, fp
 8009784:	4622      	mov	r2, r4
 8009786:	4629      	mov	r1, r5
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ff6f 	bl	800966c <__ssputs_r>
 800978e:	3001      	adds	r0, #1
 8009790:	f000 80a9 	beq.w	80098e6 <_svfiprintf_r+0x1c6>
 8009794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009796:	445a      	add	r2, fp
 8009798:	9209      	str	r2, [sp, #36]	; 0x24
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80a1 	beq.w	80098e6 <_svfiprintf_r+0x1c6>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f04f 32ff 	mov.w	r2, #4294967295
 80097aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ae:	f10a 0a01 	add.w	sl, sl, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ba:	931a      	str	r3, [sp, #104]	; 0x68
 80097bc:	4654      	mov	r4, sl
 80097be:	2205      	movs	r2, #5
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	4850      	ldr	r0, [pc, #320]	; (8009908 <_svfiprintf_r+0x1e8>)
 80097c6:	f7f6 fd33 	bl	8000230 <memchr>
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	b9d8      	cbnz	r0, 8009806 <_svfiprintf_r+0xe6>
 80097ce:	06d0      	lsls	r0, r2, #27
 80097d0:	bf44      	itt	mi
 80097d2:	2320      	movmi	r3, #32
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d8:	0711      	lsls	r1, r2, #28
 80097da:	bf44      	itt	mi
 80097dc:	232b      	movmi	r3, #43	; 0x2b
 80097de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b2a      	cmp	r3, #42	; 0x2a
 80097e8:	d015      	beq.n	8009816 <_svfiprintf_r+0xf6>
 80097ea:	9a07      	ldr	r2, [sp, #28]
 80097ec:	4654      	mov	r4, sl
 80097ee:	2000      	movs	r0, #0
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4621      	mov	r1, r4
 80097f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fa:	3b30      	subs	r3, #48	; 0x30
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d94d      	bls.n	800989c <_svfiprintf_r+0x17c>
 8009800:	b1b0      	cbz	r0, 8009830 <_svfiprintf_r+0x110>
 8009802:	9207      	str	r2, [sp, #28]
 8009804:	e014      	b.n	8009830 <_svfiprintf_r+0x110>
 8009806:	eba0 0308 	sub.w	r3, r0, r8
 800980a:	fa09 f303 	lsl.w	r3, r9, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	46a2      	mov	sl, r4
 8009814:	e7d2      	b.n	80097bc <_svfiprintf_r+0x9c>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d19      	adds	r1, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9103      	str	r1, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfbb      	ittet	lt
 8009822:	425b      	neglt	r3, r3
 8009824:	f042 0202 	orrlt.w	r2, r2, #2
 8009828:	9307      	strge	r3, [sp, #28]
 800982a:	9307      	strlt	r3, [sp, #28]
 800982c:	bfb8      	it	lt
 800982e:	9204      	strlt	r2, [sp, #16]
 8009830:	7823      	ldrb	r3, [r4, #0]
 8009832:	2b2e      	cmp	r3, #46	; 0x2e
 8009834:	d10c      	bne.n	8009850 <_svfiprintf_r+0x130>
 8009836:	7863      	ldrb	r3, [r4, #1]
 8009838:	2b2a      	cmp	r3, #42	; 0x2a
 800983a:	d134      	bne.n	80098a6 <_svfiprintf_r+0x186>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfb8      	it	lt
 8009848:	f04f 33ff 	movlt.w	r3, #4294967295
 800984c:	3402      	adds	r4, #2
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009918 <_svfiprintf_r+0x1f8>
 8009854:	7821      	ldrb	r1, [r4, #0]
 8009856:	2203      	movs	r2, #3
 8009858:	4650      	mov	r0, sl
 800985a:	f7f6 fce9 	bl	8000230 <memchr>
 800985e:	b138      	cbz	r0, 8009870 <_svfiprintf_r+0x150>
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	eba0 000a 	sub.w	r0, r0, sl
 8009866:	2240      	movs	r2, #64	; 0x40
 8009868:	4082      	lsls	r2, r0
 800986a:	4313      	orrs	r3, r2
 800986c:	3401      	adds	r4, #1
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009874:	4825      	ldr	r0, [pc, #148]	; (800990c <_svfiprintf_r+0x1ec>)
 8009876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800987a:	2206      	movs	r2, #6
 800987c:	f7f6 fcd8 	bl	8000230 <memchr>
 8009880:	2800      	cmp	r0, #0
 8009882:	d038      	beq.n	80098f6 <_svfiprintf_r+0x1d6>
 8009884:	4b22      	ldr	r3, [pc, #136]	; (8009910 <_svfiprintf_r+0x1f0>)
 8009886:	bb1b      	cbnz	r3, 80098d0 <_svfiprintf_r+0x1b0>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	3307      	adds	r3, #7
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	3308      	adds	r3, #8
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009896:	4433      	add	r3, r6
 8009898:	9309      	str	r3, [sp, #36]	; 0x24
 800989a:	e768      	b.n	800976e <_svfiprintf_r+0x4e>
 800989c:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a0:	460c      	mov	r4, r1
 80098a2:	2001      	movs	r0, #1
 80098a4:	e7a6      	b.n	80097f4 <_svfiprintf_r+0xd4>
 80098a6:	2300      	movs	r3, #0
 80098a8:	3401      	adds	r4, #1
 80098aa:	9305      	str	r3, [sp, #20]
 80098ac:	4619      	mov	r1, r3
 80098ae:	f04f 0c0a 	mov.w	ip, #10
 80098b2:	4620      	mov	r0, r4
 80098b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b8:	3a30      	subs	r2, #48	; 0x30
 80098ba:	2a09      	cmp	r2, #9
 80098bc:	d903      	bls.n	80098c6 <_svfiprintf_r+0x1a6>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0c6      	beq.n	8009850 <_svfiprintf_r+0x130>
 80098c2:	9105      	str	r1, [sp, #20]
 80098c4:	e7c4      	b.n	8009850 <_svfiprintf_r+0x130>
 80098c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ca:	4604      	mov	r4, r0
 80098cc:	2301      	movs	r3, #1
 80098ce:	e7f0      	b.n	80098b2 <_svfiprintf_r+0x192>
 80098d0:	ab03      	add	r3, sp, #12
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	462a      	mov	r2, r5
 80098d6:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <_svfiprintf_r+0x1f4>)
 80098d8:	a904      	add	r1, sp, #16
 80098da:	4638      	mov	r0, r7
 80098dc:	f7fc fbac 	bl	8006038 <_printf_float>
 80098e0:	1c42      	adds	r2, r0, #1
 80098e2:	4606      	mov	r6, r0
 80098e4:	d1d6      	bne.n	8009894 <_svfiprintf_r+0x174>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	065b      	lsls	r3, r3, #25
 80098ea:	f53f af2d 	bmi.w	8009748 <_svfiprintf_r+0x28>
 80098ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098f0:	b01d      	add	sp, #116	; 0x74
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	ab03      	add	r3, sp, #12
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	462a      	mov	r2, r5
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <_svfiprintf_r+0x1f4>)
 80098fe:	a904      	add	r1, sp, #16
 8009900:	4638      	mov	r0, r7
 8009902:	f7fc fe3d 	bl	8006580 <_printf_i>
 8009906:	e7eb      	b.n	80098e0 <_svfiprintf_r+0x1c0>
 8009908:	0800ac39 	.word	0x0800ac39
 800990c:	0800ac43 	.word	0x0800ac43
 8009910:	08006039 	.word	0x08006039
 8009914:	0800966d 	.word	0x0800966d
 8009918:	0800ac3f 	.word	0x0800ac3f

0800991c <__sfputc_r>:
 800991c:	6893      	ldr	r3, [r2, #8]
 800991e:	3b01      	subs	r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	b410      	push	{r4}
 8009924:	6093      	str	r3, [r2, #8]
 8009926:	da08      	bge.n	800993a <__sfputc_r+0x1e>
 8009928:	6994      	ldr	r4, [r2, #24]
 800992a:	42a3      	cmp	r3, r4
 800992c:	db01      	blt.n	8009932 <__sfputc_r+0x16>
 800992e:	290a      	cmp	r1, #10
 8009930:	d103      	bne.n	800993a <__sfputc_r+0x1e>
 8009932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009936:	f7fd bae8 	b.w	8006f0a <__swbuf_r>
 800993a:	6813      	ldr	r3, [r2, #0]
 800993c:	1c58      	adds	r0, r3, #1
 800993e:	6010      	str	r0, [r2, #0]
 8009940:	7019      	strb	r1, [r3, #0]
 8009942:	4608      	mov	r0, r1
 8009944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009948:	4770      	bx	lr

0800994a <__sfputs_r>:
 800994a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	4614      	mov	r4, r2
 8009952:	18d5      	adds	r5, r2, r3
 8009954:	42ac      	cmp	r4, r5
 8009956:	d101      	bne.n	800995c <__sfputs_r+0x12>
 8009958:	2000      	movs	r0, #0
 800995a:	e007      	b.n	800996c <__sfputs_r+0x22>
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	463a      	mov	r2, r7
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ffda 	bl	800991c <__sfputc_r>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d1f3      	bne.n	8009954 <__sfputs_r+0xa>
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009970 <_vfiprintf_r>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	460d      	mov	r5, r1
 8009976:	b09d      	sub	sp, #116	; 0x74
 8009978:	4614      	mov	r4, r2
 800997a:	4698      	mov	r8, r3
 800997c:	4606      	mov	r6, r0
 800997e:	b118      	cbz	r0, 8009988 <_vfiprintf_r+0x18>
 8009980:	6a03      	ldr	r3, [r0, #32]
 8009982:	b90b      	cbnz	r3, 8009988 <_vfiprintf_r+0x18>
 8009984:	f7fd f9ba 	bl	8006cfc <__sinit>
 8009988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d405      	bmi.n	800999a <_vfiprintf_r+0x2a>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	059a      	lsls	r2, r3, #22
 8009992:	d402      	bmi.n	800999a <_vfiprintf_r+0x2a>
 8009994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009996:	f7fd fc36 	bl	8007206 <__retarget_lock_acquire_recursive>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	071b      	lsls	r3, r3, #28
 800999e:	d501      	bpl.n	80099a4 <_vfiprintf_r+0x34>
 80099a0:	692b      	ldr	r3, [r5, #16]
 80099a2:	b99b      	cbnz	r3, 80099cc <_vfiprintf_r+0x5c>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	f7fd faec 	bl	8006f84 <__swsetup_r>
 80099ac:	b170      	cbz	r0, 80099cc <_vfiprintf_r+0x5c>
 80099ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099b0:	07dc      	lsls	r4, r3, #31
 80099b2:	d504      	bpl.n	80099be <_vfiprintf_r+0x4e>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	b01d      	add	sp, #116	; 0x74
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	0598      	lsls	r0, r3, #22
 80099c2:	d4f7      	bmi.n	80099b4 <_vfiprintf_r+0x44>
 80099c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c6:	f7fd fc1f 	bl	8007208 <__retarget_lock_release_recursive>
 80099ca:	e7f3      	b.n	80099b4 <_vfiprintf_r+0x44>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9309      	str	r3, [sp, #36]	; 0x24
 80099d0:	2320      	movs	r3, #32
 80099d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099da:	2330      	movs	r3, #48	; 0x30
 80099dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009b90 <_vfiprintf_r+0x220>
 80099e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099e4:	f04f 0901 	mov.w	r9, #1
 80099e8:	4623      	mov	r3, r4
 80099ea:	469a      	mov	sl, r3
 80099ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099f0:	b10a      	cbz	r2, 80099f6 <_vfiprintf_r+0x86>
 80099f2:	2a25      	cmp	r2, #37	; 0x25
 80099f4:	d1f9      	bne.n	80099ea <_vfiprintf_r+0x7a>
 80099f6:	ebba 0b04 	subs.w	fp, sl, r4
 80099fa:	d00b      	beq.n	8009a14 <_vfiprintf_r+0xa4>
 80099fc:	465b      	mov	r3, fp
 80099fe:	4622      	mov	r2, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ffa1 	bl	800994a <__sfputs_r>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f000 80a9 	beq.w	8009b60 <_vfiprintf_r+0x1f0>
 8009a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a10:	445a      	add	r2, fp
 8009a12:	9209      	str	r2, [sp, #36]	; 0x24
 8009a14:	f89a 3000 	ldrb.w	r3, [sl]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 80a1 	beq.w	8009b60 <_vfiprintf_r+0x1f0>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a28:	f10a 0a01 	add.w	sl, sl, #1
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a34:	931a      	str	r3, [sp, #104]	; 0x68
 8009a36:	4654      	mov	r4, sl
 8009a38:	2205      	movs	r2, #5
 8009a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3e:	4854      	ldr	r0, [pc, #336]	; (8009b90 <_vfiprintf_r+0x220>)
 8009a40:	f7f6 fbf6 	bl	8000230 <memchr>
 8009a44:	9a04      	ldr	r2, [sp, #16]
 8009a46:	b9d8      	cbnz	r0, 8009a80 <_vfiprintf_r+0x110>
 8009a48:	06d1      	lsls	r1, r2, #27
 8009a4a:	bf44      	itt	mi
 8009a4c:	2320      	movmi	r3, #32
 8009a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a52:	0713      	lsls	r3, r2, #28
 8009a54:	bf44      	itt	mi
 8009a56:	232b      	movmi	r3, #43	; 0x2b
 8009a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d015      	beq.n	8009a90 <_vfiprintf_r+0x120>
 8009a64:	9a07      	ldr	r2, [sp, #28]
 8009a66:	4654      	mov	r4, sl
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4621      	mov	r1, r4
 8009a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a74:	3b30      	subs	r3, #48	; 0x30
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d94d      	bls.n	8009b16 <_vfiprintf_r+0x1a6>
 8009a7a:	b1b0      	cbz	r0, 8009aaa <_vfiprintf_r+0x13a>
 8009a7c:	9207      	str	r2, [sp, #28]
 8009a7e:	e014      	b.n	8009aaa <_vfiprintf_r+0x13a>
 8009a80:	eba0 0308 	sub.w	r3, r0, r8
 8009a84:	fa09 f303 	lsl.w	r3, r9, r3
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	46a2      	mov	sl, r4
 8009a8e:	e7d2      	b.n	8009a36 <_vfiprintf_r+0xc6>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	1d19      	adds	r1, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9103      	str	r1, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfbb      	ittet	lt
 8009a9c:	425b      	neglt	r3, r3
 8009a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009aa2:	9307      	strge	r3, [sp, #28]
 8009aa4:	9307      	strlt	r3, [sp, #28]
 8009aa6:	bfb8      	it	lt
 8009aa8:	9204      	strlt	r2, [sp, #16]
 8009aaa:	7823      	ldrb	r3, [r4, #0]
 8009aac:	2b2e      	cmp	r3, #46	; 0x2e
 8009aae:	d10c      	bne.n	8009aca <_vfiprintf_r+0x15a>
 8009ab0:	7863      	ldrb	r3, [r4, #1]
 8009ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab4:	d134      	bne.n	8009b20 <_vfiprintf_r+0x1b0>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	1d1a      	adds	r2, r3, #4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	9203      	str	r2, [sp, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ac6:	3402      	adds	r4, #2
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ba0 <_vfiprintf_r+0x230>
 8009ace:	7821      	ldrb	r1, [r4, #0]
 8009ad0:	2203      	movs	r2, #3
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	f7f6 fbac 	bl	8000230 <memchr>
 8009ad8:	b138      	cbz	r0, 8009aea <_vfiprintf_r+0x17a>
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	eba0 000a 	sub.w	r0, r0, sl
 8009ae0:	2240      	movs	r2, #64	; 0x40
 8009ae2:	4082      	lsls	r2, r0
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	3401      	adds	r4, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	4829      	ldr	r0, [pc, #164]	; (8009b94 <_vfiprintf_r+0x224>)
 8009af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009af4:	2206      	movs	r2, #6
 8009af6:	f7f6 fb9b 	bl	8000230 <memchr>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d03f      	beq.n	8009b7e <_vfiprintf_r+0x20e>
 8009afe:	4b26      	ldr	r3, [pc, #152]	; (8009b98 <_vfiprintf_r+0x228>)
 8009b00:	bb1b      	cbnz	r3, 8009b4a <_vfiprintf_r+0x1da>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	3307      	adds	r3, #7
 8009b06:	f023 0307 	bic.w	r3, r3, #7
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b10:	443b      	add	r3, r7
 8009b12:	9309      	str	r3, [sp, #36]	; 0x24
 8009b14:	e768      	b.n	80099e8 <_vfiprintf_r+0x78>
 8009b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	e7a6      	b.n	8009a6e <_vfiprintf_r+0xfe>
 8009b20:	2300      	movs	r3, #0
 8009b22:	3401      	adds	r4, #1
 8009b24:	9305      	str	r3, [sp, #20]
 8009b26:	4619      	mov	r1, r3
 8009b28:	f04f 0c0a 	mov.w	ip, #10
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b32:	3a30      	subs	r2, #48	; 0x30
 8009b34:	2a09      	cmp	r2, #9
 8009b36:	d903      	bls.n	8009b40 <_vfiprintf_r+0x1d0>
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0c6      	beq.n	8009aca <_vfiprintf_r+0x15a>
 8009b3c:	9105      	str	r1, [sp, #20]
 8009b3e:	e7c4      	b.n	8009aca <_vfiprintf_r+0x15a>
 8009b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b44:	4604      	mov	r4, r0
 8009b46:	2301      	movs	r3, #1
 8009b48:	e7f0      	b.n	8009b2c <_vfiprintf_r+0x1bc>
 8009b4a:	ab03      	add	r3, sp, #12
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <_vfiprintf_r+0x22c>)
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7fc fa6f 	bl	8006038 <_printf_float>
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	1c78      	adds	r0, r7, #1
 8009b5e:	d1d6      	bne.n	8009b0e <_vfiprintf_r+0x19e>
 8009b60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b62:	07d9      	lsls	r1, r3, #31
 8009b64:	d405      	bmi.n	8009b72 <_vfiprintf_r+0x202>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	059a      	lsls	r2, r3, #22
 8009b6a:	d402      	bmi.n	8009b72 <_vfiprintf_r+0x202>
 8009b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b6e:	f7fd fb4b 	bl	8007208 <__retarget_lock_release_recursive>
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	065b      	lsls	r3, r3, #25
 8009b76:	f53f af1d 	bmi.w	80099b4 <_vfiprintf_r+0x44>
 8009b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b7c:	e71c      	b.n	80099b8 <_vfiprintf_r+0x48>
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	462a      	mov	r2, r5
 8009b84:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <_vfiprintf_r+0x22c>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7fc fcf9 	bl	8006580 <_printf_i>
 8009b8e:	e7e4      	b.n	8009b5a <_vfiprintf_r+0x1ea>
 8009b90:	0800ac39 	.word	0x0800ac39
 8009b94:	0800ac43 	.word	0x0800ac43
 8009b98:	08006039 	.word	0x08006039
 8009b9c:	0800994b 	.word	0x0800994b
 8009ba0:	0800ac3f 	.word	0x0800ac3f

08009ba4 <__sflush_r>:
 8009ba4:	898a      	ldrh	r2, [r1, #12]
 8009ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009baa:	4605      	mov	r5, r0
 8009bac:	0710      	lsls	r0, r2, #28
 8009bae:	460c      	mov	r4, r1
 8009bb0:	d458      	bmi.n	8009c64 <__sflush_r+0xc0>
 8009bb2:	684b      	ldr	r3, [r1, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc05      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc02      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d0f9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bd0:	682f      	ldr	r7, [r5, #0]
 8009bd2:	6a21      	ldr	r1, [r4, #32]
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	d032      	beq.n	8009c3e <__sflush_r+0x9a>
 8009bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	075a      	lsls	r2, r3, #29
 8009bde:	d505      	bpl.n	8009bec <__sflush_r+0x48>
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	1ac0      	subs	r0, r0, r3
 8009be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009be6:	b10b      	cbz	r3, 8009bec <__sflush_r+0x48>
 8009be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bea:	1ac0      	subs	r0, r0, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	4602      	mov	r2, r0
 8009bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bf2:	6a21      	ldr	r1, [r4, #32]
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b0      	blx	r6
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	d106      	bne.n	8009c0c <__sflush_r+0x68>
 8009bfe:	6829      	ldr	r1, [r5, #0]
 8009c00:	291d      	cmp	r1, #29
 8009c02:	d82b      	bhi.n	8009c5c <__sflush_r+0xb8>
 8009c04:	4a29      	ldr	r2, [pc, #164]	; (8009cac <__sflush_r+0x108>)
 8009c06:	410a      	asrs	r2, r1
 8009c08:	07d6      	lsls	r6, r2, #31
 8009c0a:	d427      	bmi.n	8009c5c <__sflush_r+0xb8>
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6062      	str	r2, [r4, #4]
 8009c10:	04d9      	lsls	r1, r3, #19
 8009c12:	6922      	ldr	r2, [r4, #16]
 8009c14:	6022      	str	r2, [r4, #0]
 8009c16:	d504      	bpl.n	8009c22 <__sflush_r+0x7e>
 8009c18:	1c42      	adds	r2, r0, #1
 8009c1a:	d101      	bne.n	8009c20 <__sflush_r+0x7c>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b903      	cbnz	r3, 8009c22 <__sflush_r+0x7e>
 8009c20:	6560      	str	r0, [r4, #84]	; 0x54
 8009c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c24:	602f      	str	r7, [r5, #0]
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d0c9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2e:	4299      	cmp	r1, r3
 8009c30:	d002      	beq.n	8009c38 <__sflush_r+0x94>
 8009c32:	4628      	mov	r0, r5
 8009c34:	f7fe f98a 	bl	8007f4c <_free_r>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8009c3c:	e7c0      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b0      	blx	r6
 8009c44:	1c41      	adds	r1, r0, #1
 8009c46:	d1c8      	bne.n	8009bda <__sflush_r+0x36>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0c5      	beq.n	8009bda <__sflush_r+0x36>
 8009c4e:	2b1d      	cmp	r3, #29
 8009c50:	d001      	beq.n	8009c56 <__sflush_r+0xb2>
 8009c52:	2b16      	cmp	r3, #22
 8009c54:	d101      	bne.n	8009c5a <__sflush_r+0xb6>
 8009c56:	602f      	str	r7, [r5, #0]
 8009c58:	e7b1      	b.n	8009bbe <__sflush_r+0x1a>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	e7ad      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c64:	690f      	ldr	r7, [r1, #16]
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	d0a9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c6a:	0793      	lsls	r3, r2, #30
 8009c6c:	680e      	ldr	r6, [r1, #0]
 8009c6e:	bf08      	it	eq
 8009c70:	694b      	ldreq	r3, [r1, #20]
 8009c72:	600f      	str	r7, [r1, #0]
 8009c74:	bf18      	it	ne
 8009c76:	2300      	movne	r3, #0
 8009c78:	eba6 0807 	sub.w	r8, r6, r7
 8009c7c:	608b      	str	r3, [r1, #8]
 8009c7e:	f1b8 0f00 	cmp.w	r8, #0
 8009c82:	dd9c      	ble.n	8009bbe <__sflush_r+0x1a>
 8009c84:	6a21      	ldr	r1, [r4, #32]
 8009c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c88:	4643      	mov	r3, r8
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b0      	blx	r6
 8009c90:	2800      	cmp	r0, #0
 8009c92:	dc06      	bgt.n	8009ca2 <__sflush_r+0xfe>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e78e      	b.n	8009bc0 <__sflush_r+0x1c>
 8009ca2:	4407      	add	r7, r0
 8009ca4:	eba8 0800 	sub.w	r8, r8, r0
 8009ca8:	e7e9      	b.n	8009c7e <__sflush_r+0xda>
 8009caa:	bf00      	nop
 8009cac:	dfbffffe 	.word	0xdfbffffe

08009cb0 <_fflush_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	690b      	ldr	r3, [r1, #16]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	b913      	cbnz	r3, 8009cc0 <_fflush_r+0x10>
 8009cba:	2500      	movs	r5, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	b118      	cbz	r0, 8009cca <_fflush_r+0x1a>
 8009cc2:	6a03      	ldr	r3, [r0, #32]
 8009cc4:	b90b      	cbnz	r3, 8009cca <_fflush_r+0x1a>
 8009cc6:	f7fd f819 	bl	8006cfc <__sinit>
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f3      	beq.n	8009cba <_fflush_r+0xa>
 8009cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cd4:	07d0      	lsls	r0, r2, #31
 8009cd6:	d404      	bmi.n	8009ce2 <_fflush_r+0x32>
 8009cd8:	0599      	lsls	r1, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_fflush_r+0x32>
 8009cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cde:	f7fd fa92 	bl	8007206 <__retarget_lock_acquire_recursive>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f7ff ff5d 	bl	8009ba4 <__sflush_r>
 8009cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cec:	07da      	lsls	r2, r3, #31
 8009cee:	4605      	mov	r5, r0
 8009cf0:	d4e4      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	059b      	lsls	r3, r3, #22
 8009cf6:	d4e1      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cfa:	f7fd fa85 	bl	8007208 <__retarget_lock_release_recursive>
 8009cfe:	e7dd      	b.n	8009cbc <_fflush_r+0xc>

08009d00 <fiprintf>:
 8009d00:	b40e      	push	{r1, r2, r3}
 8009d02:	b503      	push	{r0, r1, lr}
 8009d04:	4601      	mov	r1, r0
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	4805      	ldr	r0, [pc, #20]	; (8009d20 <fiprintf+0x20>)
 8009d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0e:	6800      	ldr	r0, [r0, #0]
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	f7ff fe2d 	bl	8009970 <_vfiprintf_r>
 8009d16:	b002      	add	sp, #8
 8009d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d1c:	b003      	add	sp, #12
 8009d1e:	4770      	bx	lr
 8009d20:	20000080 	.word	0x20000080

08009d24 <__swhatbuf_r>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	460c      	mov	r4, r1
 8009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	b096      	sub	sp, #88	; 0x58
 8009d30:	4615      	mov	r5, r2
 8009d32:	461e      	mov	r6, r3
 8009d34:	da0d      	bge.n	8009d52 <__swhatbuf_r+0x2e>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d3c:	f04f 0100 	mov.w	r1, #0
 8009d40:	bf0c      	ite	eq
 8009d42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d46:	2340      	movne	r3, #64	; 0x40
 8009d48:	2000      	movs	r0, #0
 8009d4a:	6031      	str	r1, [r6, #0]
 8009d4c:	602b      	str	r3, [r5, #0]
 8009d4e:	b016      	add	sp, #88	; 0x58
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
 8009d52:	466a      	mov	r2, sp
 8009d54:	f000 f874 	bl	8009e40 <_fstat_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dbec      	blt.n	8009d36 <__swhatbuf_r+0x12>
 8009d5c:	9901      	ldr	r1, [sp, #4]
 8009d5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d66:	4259      	negs	r1, r3
 8009d68:	4159      	adcs	r1, r3
 8009d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6e:	e7eb      	b.n	8009d48 <__swhatbuf_r+0x24>

08009d70 <__smakebuf_r>:
 8009d70:	898b      	ldrh	r3, [r1, #12]
 8009d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d74:	079d      	lsls	r5, r3, #30
 8009d76:	4606      	mov	r6, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	d507      	bpl.n	8009d8c <__smakebuf_r+0x1c>
 8009d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	2301      	movs	r3, #1
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	b002      	add	sp, #8
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	ab01      	add	r3, sp, #4
 8009d8e:	466a      	mov	r2, sp
 8009d90:	f7ff ffc8 	bl	8009d24 <__swhatbuf_r>
 8009d94:	9900      	ldr	r1, [sp, #0]
 8009d96:	4605      	mov	r5, r0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7fc f821 	bl	8005de0 <_malloc_r>
 8009d9e:	b948      	cbnz	r0, 8009db4 <__smakebuf_r+0x44>
 8009da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da4:	059a      	lsls	r2, r3, #22
 8009da6:	d4ef      	bmi.n	8009d88 <__smakebuf_r+0x18>
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	f043 0302 	orr.w	r3, r3, #2
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	e7e3      	b.n	8009d7c <__smakebuf_r+0xc>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	6020      	str	r0, [r4, #0]
 8009db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	6163      	str	r3, [r4, #20]
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	6120      	str	r0, [r4, #16]
 8009dc6:	b15b      	cbz	r3, 8009de0 <__smakebuf_r+0x70>
 8009dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f000 f849 	bl	8009e64 <_isatty_r>
 8009dd2:	b128      	cbz	r0, 8009de0 <__smakebuf_r+0x70>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f023 0303 	bic.w	r3, r3, #3
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	431d      	orrs	r5, r3
 8009de4:	81a5      	strh	r5, [r4, #12]
 8009de6:	e7cf      	b.n	8009d88 <__smakebuf_r+0x18>

08009de8 <memmove>:
 8009de8:	4288      	cmp	r0, r1
 8009dea:	b510      	push	{r4, lr}
 8009dec:	eb01 0402 	add.w	r4, r1, r2
 8009df0:	d902      	bls.n	8009df8 <memmove+0x10>
 8009df2:	4284      	cmp	r4, r0
 8009df4:	4623      	mov	r3, r4
 8009df6:	d807      	bhi.n	8009e08 <memmove+0x20>
 8009df8:	1e43      	subs	r3, r0, #1
 8009dfa:	42a1      	cmp	r1, r4
 8009dfc:	d008      	beq.n	8009e10 <memmove+0x28>
 8009dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e06:	e7f8      	b.n	8009dfa <memmove+0x12>
 8009e08:	4402      	add	r2, r0
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	428a      	cmp	r2, r1
 8009e0e:	d100      	bne.n	8009e12 <memmove+0x2a>
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e1a:	e7f7      	b.n	8009e0c <memmove+0x24>

08009e1c <strncmp>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	b16a      	cbz	r2, 8009e3c <strncmp+0x20>
 8009e20:	3901      	subs	r1, #1
 8009e22:	1884      	adds	r4, r0, r2
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d103      	bne.n	8009e38 <strncmp+0x1c>
 8009e30:	42a0      	cmp	r0, r4
 8009e32:	d001      	beq.n	8009e38 <strncmp+0x1c>
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	d1f5      	bne.n	8009e24 <strncmp+0x8>
 8009e38:	1ad0      	subs	r0, r2, r3
 8009e3a:	bd10      	pop	{r4, pc}
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	e7fc      	b.n	8009e3a <strncmp+0x1e>

08009e40 <_fstat_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d07      	ldr	r5, [pc, #28]	; (8009e60 <_fstat_r+0x20>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	f7f8 fb28 	bl	80024a2 <_fstat>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d102      	bne.n	8009e5c <_fstat_r+0x1c>
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	b103      	cbz	r3, 8009e5c <_fstat_r+0x1c>
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	200004a0 	.word	0x200004a0

08009e64 <_isatty_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_isatty_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f8 fb27 	bl	80024c2 <_isatty>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_isatty_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_isatty_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	200004a0 	.word	0x200004a0

08009e84 <memcpy>:
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8c:	d100      	bne.n	8009e90 <memcpy+0xc>
 8009e8e:	4770      	bx	lr
 8009e90:	b510      	push	{r4, lr}
 8009e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	d1f9      	bne.n	8009e92 <memcpy+0xe>
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <nan>:
 8009ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ea8 <nan+0x8>
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	7ff80000 	.word	0x7ff80000

08009eb0 <abort>:
 8009eb0:	b508      	push	{r3, lr}
 8009eb2:	2006      	movs	r0, #6
 8009eb4:	f000 fbe6 	bl	800a684 <raise>
 8009eb8:	2001      	movs	r0, #1
 8009eba:	f7f8 faa3 	bl	8002404 <_exit>

08009ebe <_calloc_r>:
 8009ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ec0:	fba1 2402 	umull	r2, r4, r1, r2
 8009ec4:	b94c      	cbnz	r4, 8009eda <_calloc_r+0x1c>
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	9201      	str	r2, [sp, #4]
 8009eca:	f7fb ff89 	bl	8005de0 <_malloc_r>
 8009ece:	9a01      	ldr	r2, [sp, #4]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b930      	cbnz	r0, 8009ee2 <_calloc_r+0x24>
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	b003      	add	sp, #12
 8009ed8:	bd30      	pop	{r4, r5, pc}
 8009eda:	220c      	movs	r2, #12
 8009edc:	6002      	str	r2, [r0, #0]
 8009ede:	2500      	movs	r5, #0
 8009ee0:	e7f8      	b.n	8009ed4 <_calloc_r+0x16>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	f7fd f8a6 	bl	8007034 <memset>
 8009ee8:	e7f4      	b.n	8009ed4 <_calloc_r+0x16>

08009eea <rshift>:
 8009eea:	6903      	ldr	r3, [r0, #16]
 8009eec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ef8:	f100 0414 	add.w	r4, r0, #20
 8009efc:	dd45      	ble.n	8009f8a <rshift+0xa0>
 8009efe:	f011 011f 	ands.w	r1, r1, #31
 8009f02:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f06:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f0a:	d10c      	bne.n	8009f26 <rshift+0x3c>
 8009f0c:	f100 0710 	add.w	r7, r0, #16
 8009f10:	4629      	mov	r1, r5
 8009f12:	42b1      	cmp	r1, r6
 8009f14:	d334      	bcc.n	8009f80 <rshift+0x96>
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	1eea      	subs	r2, r5, #3
 8009f1c:	4296      	cmp	r6, r2
 8009f1e:	bf38      	it	cc
 8009f20:	2300      	movcc	r3, #0
 8009f22:	4423      	add	r3, r4
 8009f24:	e015      	b.n	8009f52 <rshift+0x68>
 8009f26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f2a:	f1c1 0820 	rsb	r8, r1, #32
 8009f2e:	40cf      	lsrs	r7, r1
 8009f30:	f105 0e04 	add.w	lr, r5, #4
 8009f34:	46a1      	mov	r9, r4
 8009f36:	4576      	cmp	r6, lr
 8009f38:	46f4      	mov	ip, lr
 8009f3a:	d815      	bhi.n	8009f68 <rshift+0x7e>
 8009f3c:	1a9a      	subs	r2, r3, r2
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	3a04      	subs	r2, #4
 8009f42:	3501      	adds	r5, #1
 8009f44:	42ae      	cmp	r6, r5
 8009f46:	bf38      	it	cc
 8009f48:	2200      	movcc	r2, #0
 8009f4a:	18a3      	adds	r3, r4, r2
 8009f4c:	50a7      	str	r7, [r4, r2]
 8009f4e:	b107      	cbz	r7, 8009f52 <rshift+0x68>
 8009f50:	3304      	adds	r3, #4
 8009f52:	1b1a      	subs	r2, r3, r4
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f5a:	bf08      	it	eq
 8009f5c:	2300      	moveq	r3, #0
 8009f5e:	6102      	str	r2, [r0, #16]
 8009f60:	bf08      	it	eq
 8009f62:	6143      	streq	r3, [r0, #20]
 8009f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f68:	f8dc c000 	ldr.w	ip, [ip]
 8009f6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f70:	ea4c 0707 	orr.w	r7, ip, r7
 8009f74:	f849 7b04 	str.w	r7, [r9], #4
 8009f78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f7c:	40cf      	lsrs	r7, r1
 8009f7e:	e7da      	b.n	8009f36 <rshift+0x4c>
 8009f80:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f84:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f88:	e7c3      	b.n	8009f12 <rshift+0x28>
 8009f8a:	4623      	mov	r3, r4
 8009f8c:	e7e1      	b.n	8009f52 <rshift+0x68>

08009f8e <__hexdig_fun>:
 8009f8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d802      	bhi.n	8009f9c <__hexdig_fun+0xe>
 8009f96:	3820      	subs	r0, #32
 8009f98:	b2c0      	uxtb	r0, r0
 8009f9a:	4770      	bx	lr
 8009f9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	d801      	bhi.n	8009fa8 <__hexdig_fun+0x1a>
 8009fa4:	3847      	subs	r0, #71	; 0x47
 8009fa6:	e7f7      	b.n	8009f98 <__hexdig_fun+0xa>
 8009fa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fac:	2b05      	cmp	r3, #5
 8009fae:	d801      	bhi.n	8009fb4 <__hexdig_fun+0x26>
 8009fb0:	3827      	subs	r0, #39	; 0x27
 8009fb2:	e7f1      	b.n	8009f98 <__hexdig_fun+0xa>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4770      	bx	lr

08009fb8 <__gethex>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	4617      	mov	r7, r2
 8009fbe:	680a      	ldr	r2, [r1, #0]
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	f102 0b02 	add.w	fp, r2, #2
 8009fc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009fca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fce:	4681      	mov	r9, r0
 8009fd0:	468a      	mov	sl, r1
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	32fe      	adds	r2, #254	; 0xfe
 8009fd6:	eb02 030b 	add.w	r3, r2, fp
 8009fda:	46d8      	mov	r8, fp
 8009fdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	2830      	cmp	r0, #48	; 0x30
 8009fe4:	d0f7      	beq.n	8009fd6 <__gethex+0x1e>
 8009fe6:	f7ff ffd2 	bl	8009f8e <__hexdig_fun>
 8009fea:	4604      	mov	r4, r0
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d138      	bne.n	800a062 <__gethex+0xaa>
 8009ff0:	49a7      	ldr	r1, [pc, #668]	; (800a290 <__gethex+0x2d8>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	f7ff ff11 	bl	8009e1c <strncmp>
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d169      	bne.n	800a0d4 <__gethex+0x11c>
 800a000:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a004:	465d      	mov	r5, fp
 800a006:	f7ff ffc2 	bl	8009f8e <__hexdig_fun>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d064      	beq.n	800a0d8 <__gethex+0x120>
 800a00e:	465a      	mov	r2, fp
 800a010:	7810      	ldrb	r0, [r2, #0]
 800a012:	2830      	cmp	r0, #48	; 0x30
 800a014:	4690      	mov	r8, r2
 800a016:	f102 0201 	add.w	r2, r2, #1
 800a01a:	d0f9      	beq.n	800a010 <__gethex+0x58>
 800a01c:	f7ff ffb7 	bl	8009f8e <__hexdig_fun>
 800a020:	2301      	movs	r3, #1
 800a022:	fab0 f480 	clz	r4, r0
 800a026:	0964      	lsrs	r4, r4, #5
 800a028:	465e      	mov	r6, fp
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	4642      	mov	r2, r8
 800a02e:	4615      	mov	r5, r2
 800a030:	3201      	adds	r2, #1
 800a032:	7828      	ldrb	r0, [r5, #0]
 800a034:	f7ff ffab 	bl	8009f8e <__hexdig_fun>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1f8      	bne.n	800a02e <__gethex+0x76>
 800a03c:	4994      	ldr	r1, [pc, #592]	; (800a290 <__gethex+0x2d8>)
 800a03e:	2201      	movs	r2, #1
 800a040:	4628      	mov	r0, r5
 800a042:	f7ff feeb 	bl	8009e1c <strncmp>
 800a046:	b978      	cbnz	r0, 800a068 <__gethex+0xb0>
 800a048:	b946      	cbnz	r6, 800a05c <__gethex+0xa4>
 800a04a:	1c6e      	adds	r6, r5, #1
 800a04c:	4632      	mov	r2, r6
 800a04e:	4615      	mov	r5, r2
 800a050:	3201      	adds	r2, #1
 800a052:	7828      	ldrb	r0, [r5, #0]
 800a054:	f7ff ff9b 	bl	8009f8e <__hexdig_fun>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d1f8      	bne.n	800a04e <__gethex+0x96>
 800a05c:	1b73      	subs	r3, r6, r5
 800a05e:	009e      	lsls	r6, r3, #2
 800a060:	e004      	b.n	800a06c <__gethex+0xb4>
 800a062:	2400      	movs	r4, #0
 800a064:	4626      	mov	r6, r4
 800a066:	e7e1      	b.n	800a02c <__gethex+0x74>
 800a068:	2e00      	cmp	r6, #0
 800a06a:	d1f7      	bne.n	800a05c <__gethex+0xa4>
 800a06c:	782b      	ldrb	r3, [r5, #0]
 800a06e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a072:	2b50      	cmp	r3, #80	; 0x50
 800a074:	d13d      	bne.n	800a0f2 <__gethex+0x13a>
 800a076:	786b      	ldrb	r3, [r5, #1]
 800a078:	2b2b      	cmp	r3, #43	; 0x2b
 800a07a:	d02f      	beq.n	800a0dc <__gethex+0x124>
 800a07c:	2b2d      	cmp	r3, #45	; 0x2d
 800a07e:	d031      	beq.n	800a0e4 <__gethex+0x12c>
 800a080:	1c69      	adds	r1, r5, #1
 800a082:	f04f 0b00 	mov.w	fp, #0
 800a086:	7808      	ldrb	r0, [r1, #0]
 800a088:	f7ff ff81 	bl	8009f8e <__hexdig_fun>
 800a08c:	1e42      	subs	r2, r0, #1
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	2a18      	cmp	r2, #24
 800a092:	d82e      	bhi.n	800a0f2 <__gethex+0x13a>
 800a094:	f1a0 0210 	sub.w	r2, r0, #16
 800a098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a09c:	f7ff ff77 	bl	8009f8e <__hexdig_fun>
 800a0a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a0a4:	fa5f fc8c 	uxtb.w	ip, ip
 800a0a8:	f1bc 0f18 	cmp.w	ip, #24
 800a0ac:	d91d      	bls.n	800a0ea <__gethex+0x132>
 800a0ae:	f1bb 0f00 	cmp.w	fp, #0
 800a0b2:	d000      	beq.n	800a0b6 <__gethex+0xfe>
 800a0b4:	4252      	negs	r2, r2
 800a0b6:	4416      	add	r6, r2
 800a0b8:	f8ca 1000 	str.w	r1, [sl]
 800a0bc:	b1dc      	cbz	r4, 800a0f6 <__gethex+0x13e>
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bf14      	ite	ne
 800a0c4:	f04f 0800 	movne.w	r8, #0
 800a0c8:	f04f 0806 	moveq.w	r8, #6
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	b005      	add	sp, #20
 800a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d4:	4645      	mov	r5, r8
 800a0d6:	4626      	mov	r6, r4
 800a0d8:	2401      	movs	r4, #1
 800a0da:	e7c7      	b.n	800a06c <__gethex+0xb4>
 800a0dc:	f04f 0b00 	mov.w	fp, #0
 800a0e0:	1ca9      	adds	r1, r5, #2
 800a0e2:	e7d0      	b.n	800a086 <__gethex+0xce>
 800a0e4:	f04f 0b01 	mov.w	fp, #1
 800a0e8:	e7fa      	b.n	800a0e0 <__gethex+0x128>
 800a0ea:	230a      	movs	r3, #10
 800a0ec:	fb03 0002 	mla	r0, r3, r2, r0
 800a0f0:	e7d0      	b.n	800a094 <__gethex+0xdc>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	e7e0      	b.n	800a0b8 <__gethex+0x100>
 800a0f6:	eba5 0308 	sub.w	r3, r5, r8
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	dc0a      	bgt.n	800a118 <__gethex+0x160>
 800a102:	4648      	mov	r0, r9
 800a104:	f7fd ff6e 	bl	8007fe4 <_Balloc>
 800a108:	4604      	mov	r4, r0
 800a10a:	b940      	cbnz	r0, 800a11e <__gethex+0x166>
 800a10c:	4b61      	ldr	r3, [pc, #388]	; (800a294 <__gethex+0x2dc>)
 800a10e:	4602      	mov	r2, r0
 800a110:	21e4      	movs	r1, #228	; 0xe4
 800a112:	4861      	ldr	r0, [pc, #388]	; (800a298 <__gethex+0x2e0>)
 800a114:	f7fd f880 	bl	8007218 <__assert_func>
 800a118:	3101      	adds	r1, #1
 800a11a:	105b      	asrs	r3, r3, #1
 800a11c:	e7ef      	b.n	800a0fe <__gethex+0x146>
 800a11e:	f100 0a14 	add.w	sl, r0, #20
 800a122:	2300      	movs	r3, #0
 800a124:	495a      	ldr	r1, [pc, #360]	; (800a290 <__gethex+0x2d8>)
 800a126:	f8cd a004 	str.w	sl, [sp, #4]
 800a12a:	469b      	mov	fp, r3
 800a12c:	45a8      	cmp	r8, r5
 800a12e:	d342      	bcc.n	800a1b6 <__gethex+0x1fe>
 800a130:	9801      	ldr	r0, [sp, #4]
 800a132:	f840 bb04 	str.w	fp, [r0], #4
 800a136:	eba0 000a 	sub.w	r0, r0, sl
 800a13a:	1080      	asrs	r0, r0, #2
 800a13c:	6120      	str	r0, [r4, #16]
 800a13e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a142:	4658      	mov	r0, fp
 800a144:	f7fe f840 	bl	80081c8 <__hi0bits>
 800a148:	683d      	ldr	r5, [r7, #0]
 800a14a:	eba8 0000 	sub.w	r0, r8, r0
 800a14e:	42a8      	cmp	r0, r5
 800a150:	dd59      	ble.n	800a206 <__gethex+0x24e>
 800a152:	eba0 0805 	sub.w	r8, r0, r5
 800a156:	4641      	mov	r1, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	f7fe fbcf 	bl	80088fc <__any_on>
 800a15e:	4683      	mov	fp, r0
 800a160:	b1b8      	cbz	r0, 800a192 <__gethex+0x1da>
 800a162:	f108 33ff 	add.w	r3, r8, #4294967295
 800a166:	1159      	asrs	r1, r3, #5
 800a168:	f003 021f 	and.w	r2, r3, #31
 800a16c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a170:	f04f 0b01 	mov.w	fp, #1
 800a174:	fa0b f202 	lsl.w	r2, fp, r2
 800a178:	420a      	tst	r2, r1
 800a17a:	d00a      	beq.n	800a192 <__gethex+0x1da>
 800a17c:	455b      	cmp	r3, fp
 800a17e:	dd06      	ble.n	800a18e <__gethex+0x1d6>
 800a180:	f1a8 0102 	sub.w	r1, r8, #2
 800a184:	4620      	mov	r0, r4
 800a186:	f7fe fbb9 	bl	80088fc <__any_on>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d138      	bne.n	800a200 <__gethex+0x248>
 800a18e:	f04f 0b02 	mov.w	fp, #2
 800a192:	4641      	mov	r1, r8
 800a194:	4620      	mov	r0, r4
 800a196:	f7ff fea8 	bl	8009eea <rshift>
 800a19a:	4446      	add	r6, r8
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	42b3      	cmp	r3, r6
 800a1a0:	da41      	bge.n	800a226 <__gethex+0x26e>
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	f7fd ff5d 	bl	8008064 <_Bfree>
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a1b4:	e78a      	b.n	800a0cc <__gethex+0x114>
 800a1b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a1ba:	2a2e      	cmp	r2, #46	; 0x2e
 800a1bc:	d014      	beq.n	800a1e8 <__gethex+0x230>
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	d106      	bne.n	800a1d0 <__gethex+0x218>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	f843 bb04 	str.w	fp, [r3], #4
 800a1c8:	f04f 0b00 	mov.w	fp, #0
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	465b      	mov	r3, fp
 800a1d0:	7828      	ldrb	r0, [r5, #0]
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	f7ff fedb 	bl	8009f8e <__hexdig_fun>
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	f000 000f 	and.w	r0, r0, #15
 800a1de:	4098      	lsls	r0, r3
 800a1e0:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	e7a1      	b.n	800a12c <__gethex+0x174>
 800a1e8:	45a8      	cmp	r8, r5
 800a1ea:	d8e8      	bhi.n	800a1be <__gethex+0x206>
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	9303      	str	r3, [sp, #12]
 800a1f2:	f7ff fe13 	bl	8009e1c <strncmp>
 800a1f6:	4926      	ldr	r1, [pc, #152]	; (800a290 <__gethex+0x2d8>)
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d1df      	bne.n	800a1be <__gethex+0x206>
 800a1fe:	e795      	b.n	800a12c <__gethex+0x174>
 800a200:	f04f 0b03 	mov.w	fp, #3
 800a204:	e7c5      	b.n	800a192 <__gethex+0x1da>
 800a206:	da0b      	bge.n	800a220 <__gethex+0x268>
 800a208:	eba5 0800 	sub.w	r8, r5, r0
 800a20c:	4621      	mov	r1, r4
 800a20e:	4642      	mov	r2, r8
 800a210:	4648      	mov	r0, r9
 800a212:	f7fe f941 	bl	8008498 <__lshift>
 800a216:	eba6 0608 	sub.w	r6, r6, r8
 800a21a:	4604      	mov	r4, r0
 800a21c:	f100 0a14 	add.w	sl, r0, #20
 800a220:	f04f 0b00 	mov.w	fp, #0
 800a224:	e7ba      	b.n	800a19c <__gethex+0x1e4>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	42b3      	cmp	r3, r6
 800a22a:	dd73      	ble.n	800a314 <__gethex+0x35c>
 800a22c:	1b9e      	subs	r6, r3, r6
 800a22e:	42b5      	cmp	r5, r6
 800a230:	dc34      	bgt.n	800a29c <__gethex+0x2e4>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d023      	beq.n	800a280 <__gethex+0x2c8>
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d025      	beq.n	800a288 <__gethex+0x2d0>
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d115      	bne.n	800a26c <__gethex+0x2b4>
 800a240:	42b5      	cmp	r5, r6
 800a242:	d113      	bne.n	800a26c <__gethex+0x2b4>
 800a244:	2d01      	cmp	r5, #1
 800a246:	d10b      	bne.n	800a260 <__gethex+0x2a8>
 800a248:	9a02      	ldr	r2, [sp, #8]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	2301      	movs	r3, #1
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	f8ca 3000 	str.w	r3, [sl]
 800a256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a258:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a25c:	601c      	str	r4, [r3, #0]
 800a25e:	e735      	b.n	800a0cc <__gethex+0x114>
 800a260:	1e69      	subs	r1, r5, #1
 800a262:	4620      	mov	r0, r4
 800a264:	f7fe fb4a 	bl	80088fc <__any_on>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d1ed      	bne.n	800a248 <__gethex+0x290>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4648      	mov	r0, r9
 800a270:	f7fd fef8 	bl	8008064 <_Bfree>
 800a274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a276:	2300      	movs	r3, #0
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a27e:	e725      	b.n	800a0cc <__gethex+0x114>
 800a280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f2      	bne.n	800a26c <__gethex+0x2b4>
 800a286:	e7df      	b.n	800a248 <__gethex+0x290>
 800a288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1dc      	bne.n	800a248 <__gethex+0x290>
 800a28e:	e7ed      	b.n	800a26c <__gethex+0x2b4>
 800a290:	0800aae4 	.word	0x0800aae4
 800a294:	0800a977 	.word	0x0800a977
 800a298:	0800ac52 	.word	0x0800ac52
 800a29c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a2a0:	f1bb 0f00 	cmp.w	fp, #0
 800a2a4:	d133      	bne.n	800a30e <__gethex+0x356>
 800a2a6:	f1b8 0f00 	cmp.w	r8, #0
 800a2aa:	d004      	beq.n	800a2b6 <__gethex+0x2fe>
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7fe fb24 	bl	80088fc <__any_on>
 800a2b4:	4683      	mov	fp, r0
 800a2b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2c0:	f008 081f 	and.w	r8, r8, #31
 800a2c4:	fa03 f308 	lsl.w	r3, r3, r8
 800a2c8:	4213      	tst	r3, r2
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	bf18      	it	ne
 800a2d0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a2d4:	1bad      	subs	r5, r5, r6
 800a2d6:	f7ff fe08 	bl	8009eea <rshift>
 800a2da:	687e      	ldr	r6, [r7, #4]
 800a2dc:	f04f 0802 	mov.w	r8, #2
 800a2e0:	f1bb 0f00 	cmp.w	fp, #0
 800a2e4:	d04a      	beq.n	800a37c <__gethex+0x3c4>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d016      	beq.n	800a31a <__gethex+0x362>
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d018      	beq.n	800a322 <__gethex+0x36a>
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d109      	bne.n	800a308 <__gethex+0x350>
 800a2f4:	f01b 0f02 	tst.w	fp, #2
 800a2f8:	d006      	beq.n	800a308 <__gethex+0x350>
 800a2fa:	f8da 3000 	ldr.w	r3, [sl]
 800a2fe:	ea4b 0b03 	orr.w	fp, fp, r3
 800a302:	f01b 0f01 	tst.w	fp, #1
 800a306:	d10f      	bne.n	800a328 <__gethex+0x370>
 800a308:	f048 0810 	orr.w	r8, r8, #16
 800a30c:	e036      	b.n	800a37c <__gethex+0x3c4>
 800a30e:	f04f 0b01 	mov.w	fp, #1
 800a312:	e7d0      	b.n	800a2b6 <__gethex+0x2fe>
 800a314:	f04f 0801 	mov.w	r8, #1
 800a318:	e7e2      	b.n	800a2e0 <__gethex+0x328>
 800a31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a31c:	f1c3 0301 	rsb	r3, r3, #1
 800a320:	930f      	str	r3, [sp, #60]	; 0x3c
 800a322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0ef      	beq.n	800a308 <__gethex+0x350>
 800a328:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a32c:	f104 0214 	add.w	r2, r4, #20
 800a330:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a33a:	2300      	movs	r3, #0
 800a33c:	4694      	mov	ip, r2
 800a33e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a342:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a346:	d01e      	beq.n	800a386 <__gethex+0x3ce>
 800a348:	3101      	adds	r1, #1
 800a34a:	f8cc 1000 	str.w	r1, [ip]
 800a34e:	f1b8 0f02 	cmp.w	r8, #2
 800a352:	f104 0214 	add.w	r2, r4, #20
 800a356:	d13d      	bne.n	800a3d4 <__gethex+0x41c>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	42ab      	cmp	r3, r5
 800a35e:	d10b      	bne.n	800a378 <__gethex+0x3c0>
 800a360:	1169      	asrs	r1, r5, #5
 800a362:	2301      	movs	r3, #1
 800a364:	f005 051f 	and.w	r5, r5, #31
 800a368:	fa03 f505 	lsl.w	r5, r3, r5
 800a36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a370:	421d      	tst	r5, r3
 800a372:	bf18      	it	ne
 800a374:	f04f 0801 	movne.w	r8, #1
 800a378:	f048 0820 	orr.w	r8, r8, #32
 800a37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37e:	601c      	str	r4, [r3, #0]
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	601e      	str	r6, [r3, #0]
 800a384:	e6a2      	b.n	800a0cc <__gethex+0x114>
 800a386:	4290      	cmp	r0, r2
 800a388:	f842 3c04 	str.w	r3, [r2, #-4]
 800a38c:	d8d6      	bhi.n	800a33c <__gethex+0x384>
 800a38e:	68a2      	ldr	r2, [r4, #8]
 800a390:	4593      	cmp	fp, r2
 800a392:	db17      	blt.n	800a3c4 <__gethex+0x40c>
 800a394:	6861      	ldr	r1, [r4, #4]
 800a396:	4648      	mov	r0, r9
 800a398:	3101      	adds	r1, #1
 800a39a:	f7fd fe23 	bl	8007fe4 <_Balloc>
 800a39e:	4682      	mov	sl, r0
 800a3a0:	b918      	cbnz	r0, 800a3aa <__gethex+0x3f2>
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <__gethex+0x458>)
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	2184      	movs	r1, #132	; 0x84
 800a3a8:	e6b3      	b.n	800a112 <__gethex+0x15a>
 800a3aa:	6922      	ldr	r2, [r4, #16]
 800a3ac:	3202      	adds	r2, #2
 800a3ae:	f104 010c 	add.w	r1, r4, #12
 800a3b2:	0092      	lsls	r2, r2, #2
 800a3b4:	300c      	adds	r0, #12
 800a3b6:	f7ff fd65 	bl	8009e84 <memcpy>
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4648      	mov	r0, r9
 800a3be:	f7fd fe51 	bl	8008064 <_Bfree>
 800a3c2:	4654      	mov	r4, sl
 800a3c4:	6922      	ldr	r2, [r4, #16]
 800a3c6:	1c51      	adds	r1, r2, #1
 800a3c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a3cc:	6121      	str	r1, [r4, #16]
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6151      	str	r1, [r2, #20]
 800a3d2:	e7bc      	b.n	800a34e <__gethex+0x396>
 800a3d4:	6921      	ldr	r1, [r4, #16]
 800a3d6:	4559      	cmp	r1, fp
 800a3d8:	dd0b      	ble.n	800a3f2 <__gethex+0x43a>
 800a3da:	2101      	movs	r1, #1
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f7ff fd84 	bl	8009eea <rshift>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	42b3      	cmp	r3, r6
 800a3e8:	f6ff aedb 	blt.w	800a1a2 <__gethex+0x1ea>
 800a3ec:	f04f 0801 	mov.w	r8, #1
 800a3f0:	e7c2      	b.n	800a378 <__gethex+0x3c0>
 800a3f2:	f015 051f 	ands.w	r5, r5, #31
 800a3f6:	d0f9      	beq.n	800a3ec <__gethex+0x434>
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	f1c5 0520 	rsb	r5, r5, #32
 800a400:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a404:	f7fd fee0 	bl	80081c8 <__hi0bits>
 800a408:	42a8      	cmp	r0, r5
 800a40a:	dbe6      	blt.n	800a3da <__gethex+0x422>
 800a40c:	e7ee      	b.n	800a3ec <__gethex+0x434>
 800a40e:	bf00      	nop
 800a410:	0800a977 	.word	0x0800a977

0800a414 <L_shift>:
 800a414:	f1c2 0208 	rsb	r2, r2, #8
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	b570      	push	{r4, r5, r6, lr}
 800a41c:	f1c2 0620 	rsb	r6, r2, #32
 800a420:	6843      	ldr	r3, [r0, #4]
 800a422:	6804      	ldr	r4, [r0, #0]
 800a424:	fa03 f506 	lsl.w	r5, r3, r6
 800a428:	432c      	orrs	r4, r5
 800a42a:	40d3      	lsrs	r3, r2
 800a42c:	6004      	str	r4, [r0, #0]
 800a42e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a432:	4288      	cmp	r0, r1
 800a434:	d3f4      	bcc.n	800a420 <L_shift+0xc>
 800a436:	bd70      	pop	{r4, r5, r6, pc}

0800a438 <__match>:
 800a438:	b530      	push	{r4, r5, lr}
 800a43a:	6803      	ldr	r3, [r0, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a442:	b914      	cbnz	r4, 800a44a <__match+0x12>
 800a444:	6003      	str	r3, [r0, #0]
 800a446:	2001      	movs	r0, #1
 800a448:	bd30      	pop	{r4, r5, pc}
 800a44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a452:	2d19      	cmp	r5, #25
 800a454:	bf98      	it	ls
 800a456:	3220      	addls	r2, #32
 800a458:	42a2      	cmp	r2, r4
 800a45a:	d0f0      	beq.n	800a43e <__match+0x6>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7f3      	b.n	800a448 <__match+0x10>

0800a460 <__hexnan>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	680b      	ldr	r3, [r1, #0]
 800a466:	6801      	ldr	r1, [r0, #0]
 800a468:	115e      	asrs	r6, r3, #5
 800a46a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a46e:	f013 031f 	ands.w	r3, r3, #31
 800a472:	b087      	sub	sp, #28
 800a474:	bf18      	it	ne
 800a476:	3604      	addne	r6, #4
 800a478:	2500      	movs	r5, #0
 800a47a:	1f37      	subs	r7, r6, #4
 800a47c:	4682      	mov	sl, r0
 800a47e:	4690      	mov	r8, r2
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	f846 5c04 	str.w	r5, [r6, #-4]
 800a486:	46b9      	mov	r9, r7
 800a488:	463c      	mov	r4, r7
 800a48a:	9502      	str	r5, [sp, #8]
 800a48c:	46ab      	mov	fp, r5
 800a48e:	784a      	ldrb	r2, [r1, #1]
 800a490:	1c4b      	adds	r3, r1, #1
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	b342      	cbz	r2, 800a4e8 <__hexnan+0x88>
 800a496:	4610      	mov	r0, r2
 800a498:	9105      	str	r1, [sp, #20]
 800a49a:	9204      	str	r2, [sp, #16]
 800a49c:	f7ff fd77 	bl	8009f8e <__hexdig_fun>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d14f      	bne.n	800a544 <__hexnan+0xe4>
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	9905      	ldr	r1, [sp, #20]
 800a4a8:	2a20      	cmp	r2, #32
 800a4aa:	d818      	bhi.n	800a4de <__hexnan+0x7e>
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	459b      	cmp	fp, r3
 800a4b0:	dd13      	ble.n	800a4da <__hexnan+0x7a>
 800a4b2:	454c      	cmp	r4, r9
 800a4b4:	d206      	bcs.n	800a4c4 <__hexnan+0x64>
 800a4b6:	2d07      	cmp	r5, #7
 800a4b8:	dc04      	bgt.n	800a4c4 <__hexnan+0x64>
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	4649      	mov	r1, r9
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7ff ffa8 	bl	800a414 <L_shift>
 800a4c4:	4544      	cmp	r4, r8
 800a4c6:	d950      	bls.n	800a56a <__hexnan+0x10a>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a4ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a4d6:	464c      	mov	r4, r9
 800a4d8:	461d      	mov	r5, r3
 800a4da:	9903      	ldr	r1, [sp, #12]
 800a4dc:	e7d7      	b.n	800a48e <__hexnan+0x2e>
 800a4de:	2a29      	cmp	r2, #41	; 0x29
 800a4e0:	d155      	bne.n	800a58e <__hexnan+0x12e>
 800a4e2:	3102      	adds	r1, #2
 800a4e4:	f8ca 1000 	str.w	r1, [sl]
 800a4e8:	f1bb 0f00 	cmp.w	fp, #0
 800a4ec:	d04f      	beq.n	800a58e <__hexnan+0x12e>
 800a4ee:	454c      	cmp	r4, r9
 800a4f0:	d206      	bcs.n	800a500 <__hexnan+0xa0>
 800a4f2:	2d07      	cmp	r5, #7
 800a4f4:	dc04      	bgt.n	800a500 <__hexnan+0xa0>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff ff8a 	bl	800a414 <L_shift>
 800a500:	4544      	cmp	r4, r8
 800a502:	d934      	bls.n	800a56e <__hexnan+0x10e>
 800a504:	f1a8 0204 	sub.w	r2, r8, #4
 800a508:	4623      	mov	r3, r4
 800a50a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a50e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a512:	429f      	cmp	r7, r3
 800a514:	d2f9      	bcs.n	800a50a <__hexnan+0xaa>
 800a516:	1b3b      	subs	r3, r7, r4
 800a518:	f023 0303 	bic.w	r3, r3, #3
 800a51c:	3304      	adds	r3, #4
 800a51e:	3e03      	subs	r6, #3
 800a520:	3401      	adds	r4, #1
 800a522:	42a6      	cmp	r6, r4
 800a524:	bf38      	it	cc
 800a526:	2304      	movcc	r3, #4
 800a528:	4443      	add	r3, r8
 800a52a:	2200      	movs	r2, #0
 800a52c:	f843 2b04 	str.w	r2, [r3], #4
 800a530:	429f      	cmp	r7, r3
 800a532:	d2fb      	bcs.n	800a52c <__hexnan+0xcc>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	b91b      	cbnz	r3, 800a540 <__hexnan+0xe0>
 800a538:	4547      	cmp	r7, r8
 800a53a:	d126      	bne.n	800a58a <__hexnan+0x12a>
 800a53c:	2301      	movs	r3, #1
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	2005      	movs	r0, #5
 800a542:	e025      	b.n	800a590 <__hexnan+0x130>
 800a544:	3501      	adds	r5, #1
 800a546:	2d08      	cmp	r5, #8
 800a548:	f10b 0b01 	add.w	fp, fp, #1
 800a54c:	dd06      	ble.n	800a55c <__hexnan+0xfc>
 800a54e:	4544      	cmp	r4, r8
 800a550:	d9c3      	bls.n	800a4da <__hexnan+0x7a>
 800a552:	2300      	movs	r3, #0
 800a554:	f844 3c04 	str.w	r3, [r4, #-4]
 800a558:	2501      	movs	r5, #1
 800a55a:	3c04      	subs	r4, #4
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	f000 000f 	and.w	r0, r0, #15
 800a562:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a566:	6020      	str	r0, [r4, #0]
 800a568:	e7b7      	b.n	800a4da <__hexnan+0x7a>
 800a56a:	2508      	movs	r5, #8
 800a56c:	e7b5      	b.n	800a4da <__hexnan+0x7a>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0df      	beq.n	800a534 <__hexnan+0xd4>
 800a574:	f1c3 0320 	rsb	r3, r3, #32
 800a578:	f04f 32ff 	mov.w	r2, #4294967295
 800a57c:	40da      	lsrs	r2, r3
 800a57e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a582:	4013      	ands	r3, r2
 800a584:	f846 3c04 	str.w	r3, [r6, #-4]
 800a588:	e7d4      	b.n	800a534 <__hexnan+0xd4>
 800a58a:	3f04      	subs	r7, #4
 800a58c:	e7d2      	b.n	800a534 <__hexnan+0xd4>
 800a58e:	2004      	movs	r0, #4
 800a590:	b007      	add	sp, #28
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a596 <__ascii_mbtowc>:
 800a596:	b082      	sub	sp, #8
 800a598:	b901      	cbnz	r1, 800a59c <__ascii_mbtowc+0x6>
 800a59a:	a901      	add	r1, sp, #4
 800a59c:	b142      	cbz	r2, 800a5b0 <__ascii_mbtowc+0x1a>
 800a59e:	b14b      	cbz	r3, 800a5b4 <__ascii_mbtowc+0x1e>
 800a5a0:	7813      	ldrb	r3, [r2, #0]
 800a5a2:	600b      	str	r3, [r1, #0]
 800a5a4:	7812      	ldrb	r2, [r2, #0]
 800a5a6:	1e10      	subs	r0, r2, #0
 800a5a8:	bf18      	it	ne
 800a5aa:	2001      	movne	r0, #1
 800a5ac:	b002      	add	sp, #8
 800a5ae:	4770      	bx	lr
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	e7fb      	b.n	800a5ac <__ascii_mbtowc+0x16>
 800a5b4:	f06f 0001 	mvn.w	r0, #1
 800a5b8:	e7f8      	b.n	800a5ac <__ascii_mbtowc+0x16>

0800a5ba <_realloc_r>:
 800a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5be:	4680      	mov	r8, r0
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	460e      	mov	r6, r1
 800a5c4:	b921      	cbnz	r1, 800a5d0 <_realloc_r+0x16>
 800a5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	f7fb bc08 	b.w	8005de0 <_malloc_r>
 800a5d0:	b92a      	cbnz	r2, 800a5de <_realloc_r+0x24>
 800a5d2:	f7fd fcbb 	bl	8007f4c <_free_r>
 800a5d6:	4625      	mov	r5, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5de:	f000 f86d 	bl	800a6bc <_malloc_usable_size_r>
 800a5e2:	4284      	cmp	r4, r0
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	d802      	bhi.n	800a5ee <_realloc_r+0x34>
 800a5e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ec:	d812      	bhi.n	800a614 <_realloc_r+0x5a>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	f7fb fbf5 	bl	8005de0 <_malloc_r>
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0ed      	beq.n	800a5d8 <_realloc_r+0x1e>
 800a5fc:	42bc      	cmp	r4, r7
 800a5fe:	4622      	mov	r2, r4
 800a600:	4631      	mov	r1, r6
 800a602:	bf28      	it	cs
 800a604:	463a      	movcs	r2, r7
 800a606:	f7ff fc3d 	bl	8009e84 <memcpy>
 800a60a:	4631      	mov	r1, r6
 800a60c:	4640      	mov	r0, r8
 800a60e:	f7fd fc9d 	bl	8007f4c <_free_r>
 800a612:	e7e1      	b.n	800a5d8 <_realloc_r+0x1e>
 800a614:	4635      	mov	r5, r6
 800a616:	e7df      	b.n	800a5d8 <_realloc_r+0x1e>

0800a618 <__ascii_wctomb>:
 800a618:	b149      	cbz	r1, 800a62e <__ascii_wctomb+0x16>
 800a61a:	2aff      	cmp	r2, #255	; 0xff
 800a61c:	bf85      	ittet	hi
 800a61e:	238a      	movhi	r3, #138	; 0x8a
 800a620:	6003      	strhi	r3, [r0, #0]
 800a622:	700a      	strbls	r2, [r1, #0]
 800a624:	f04f 30ff 	movhi.w	r0, #4294967295
 800a628:	bf98      	it	ls
 800a62a:	2001      	movls	r0, #1
 800a62c:	4770      	bx	lr
 800a62e:	4608      	mov	r0, r1
 800a630:	4770      	bx	lr

0800a632 <_raise_r>:
 800a632:	291f      	cmp	r1, #31
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	d904      	bls.n	800a646 <_raise_r+0x14>
 800a63c:	2316      	movs	r3, #22
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a648:	b112      	cbz	r2, 800a650 <_raise_r+0x1e>
 800a64a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a64e:	b94b      	cbnz	r3, 800a664 <_raise_r+0x32>
 800a650:	4620      	mov	r0, r4
 800a652:	f000 f831 	bl	800a6b8 <_getpid_r>
 800a656:	462a      	mov	r2, r5
 800a658:	4601      	mov	r1, r0
 800a65a:	4620      	mov	r0, r4
 800a65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a660:	f000 b818 	b.w	800a694 <_kill_r>
 800a664:	2b01      	cmp	r3, #1
 800a666:	d00a      	beq.n	800a67e <_raise_r+0x4c>
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	d103      	bne.n	800a674 <_raise_r+0x42>
 800a66c:	2316      	movs	r3, #22
 800a66e:	6003      	str	r3, [r0, #0]
 800a670:	2001      	movs	r0, #1
 800a672:	e7e7      	b.n	800a644 <_raise_r+0x12>
 800a674:	2400      	movs	r4, #0
 800a676:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a67a:	4628      	mov	r0, r5
 800a67c:	4798      	blx	r3
 800a67e:	2000      	movs	r0, #0
 800a680:	e7e0      	b.n	800a644 <_raise_r+0x12>
	...

0800a684 <raise>:
 800a684:	4b02      	ldr	r3, [pc, #8]	; (800a690 <raise+0xc>)
 800a686:	4601      	mov	r1, r0
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	f7ff bfd2 	b.w	800a632 <_raise_r>
 800a68e:	bf00      	nop
 800a690:	20000080 	.word	0x20000080

0800a694 <_kill_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d07      	ldr	r5, [pc, #28]	; (800a6b4 <_kill_r+0x20>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	f7f7 fe9f 	bl	80023e4 <_kill>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	d102      	bne.n	800a6b0 <_kill_r+0x1c>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b103      	cbz	r3, 800a6b0 <_kill_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200004a0 	.word	0x200004a0

0800a6b8 <_getpid_r>:
 800a6b8:	f7f7 be8c 	b.w	80023d4 <_getpid>

0800a6bc <_malloc_usable_size_r>:
 800a6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6c0:	1f18      	subs	r0, r3, #4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	bfbc      	itt	lt
 800a6c6:	580b      	ldrlt	r3, [r1, r0]
 800a6c8:	18c0      	addlt	r0, r0, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_init>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr

0800a6d8 <_fini>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	bf00      	nop
 800a6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6de:	bc08      	pop	{r3}
 800a6e0:	469e      	mov	lr, r3
 800a6e2:	4770      	bx	lr
